["```js\n<button class=\"toggle\">Toggle</button>\n\n<div id=\"accordion\">\n    <h3>Section 1</h3>\n    <div>\n        <p>Section 1 content...</p>\n    </div>\n    <h3>Section 2</h3>\n    <div>\n        <p>Section 2 content...</p>\n    </div>\n    <h3>Section 3</h3>\n    <div>\n        <p>Section 3 content...</p>\n    </div>\n</div>\n\n<button class=\"toggle\">Toggle</button>\n\n<div id=\"tabs\">\n    <ul>\n        <li><a href=\"#section1\">Section 1</a></li>\n        <li><a href=\"#section2\">Section 2</a></li>\n        <li><a href=\"#section3\">Section 3</a></li>\n    </ul>\n    <div id=\"section1\">\n        <p>Section 1 content...</p>\n    </div>\n    <div id=\"section2\">\n        <p>Section 2 content...</p>\n    </div>\n    <div id=\"section3\">\n        <p>Section 3 content...</p>\n    </div>\n</div>\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.accordion\", $.ui.accordion, {\n\n    tabs: function() {\n\n        this.destroy();\n\n        var self = this,\n            oldHeaders = this.headers,\n            newHeaders = $( \"<ul/>\" );\n\n        oldHeaders.each( function( i, v ) {\n\n            var id = self.namespace + \"-tabs-\" + self.uuid + \"-\" + i,\n                header = $( \"<li/>\" ).appendTo( newHeaders );\n\n            $( \"<a/>\" ).text( $( v ).text() )\n                       .attr( \"href\", \"#\" + id )\n                       .appendTo( header );\n\n            oldHeaders.next().eq( i ).attr( \"id\", id );\n\n        });\n\n        newHeaders.prependTo(this.element);\n\n        this.headers.remove();\n        return this.element.tabs();\n\n    }\n\n});\n\n$.widget( \"ab.tabs\", $.ui.tabs, {\n\n    accordion: function() {\n\n        this.destroy();\n\n        var self = this;\n\n        this.tabs.each( function( i, v ) {\n\n            var $link = $( v ).find( \"a\" ),\n                id = $link.attr( \"href\" ),\n                text = $link.text();\n\n            $( \"<h3/>\" ).text( text )\n                        .insertBefore( id );\n\n        });\n\n        this.tablist.remove();\n        return this.element.accordion();\n\n    },\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    $( \"button.toggle\" ).button().on( \"click\", function( e ) {\n\n        var $widget = $( this ).next();\n\n        if ( $widget.is( \":ab-accordion\" ) ) {\n            $widget.accordion( \"tabs\" );\n        }\n        else if ( $widget.is( \":ab-tabs\" ) ) {\n            $widget.tabs( \"accordion\" );\n        }\n\n    });\n\n    $( \"#accordion\" ).accordion();\n    $( \"#tabs\" ).tabs();\n\n});\n```", "```js\n<div class=\"container\">\n    <button id=\"add\">Add</button>\n    <button id=\"remove\">Remove</button>\n</div>\n<div class=\"container\">\n    <ul id=\"checklist\">\n        <li><a href=\"#\">Write some code</a></li>\n        <li><a href=\"#\">Deploy some code</a></li>\n        <li><a href=\"#\">Fix some code</a></li>\n        <li><a href=\"#\">Write some new code</a></li>\n    </ul>\n</div>\n<div class=\"container\">\n    <div id=\"progressbar\"></div>\n</div>\n```", "```js\n.ui-checklist {\n    list-style-type: none;\n    padding: 0.2em;\n}\n\n.ui-checklist li {\n    padding: 0.4em;\n    border: 1px solid transparent;\n    cursor: pointer;    \n}\n\n.ui-checklist li a {\n    text-decoration: none;\n    outline: none;\n}\n\n.ui-checklist-checked {\n    text-decoration: line-through;\n}\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.checklist\", {\n\n    options: {\n        items: \"> li\",\n        widgetClasses: [\n            \"ui-checklist\",\n            \"ui-widget\",\n            \"ui-widget-content\",\n            \"ui-corner-all\"\n        ],\n        itemClasses: [\n            \"ui-checklist-item\",\n            \"ui-corner-all\"\n        ],\n        checkedClass: \"ui-checklist-checked\"\n    },\n\n    _getCreateEventData: function() {\n\n        var items = this.items,\n            checkedClass = this.options.checkedClass;\n\n        return {\n            items: items.length,\n            checked: items.filter( \".\" + checkedClass ).length\n        }\n\n    },\n\n    _create: function() {\n\n        this._super();\n\n        var classes = this.options.widgetClasses.join( \" \" );\n\n        this.element.addClass( classes );\n\n        this._on({\n            \"click .ui-checklist-item\": this._click,\n        });\n\n        this.refresh();\n\n    },\n\n    _destroy: function() {\n\n        this._super();\n\n        var widgetClasses = this.options.widgetClasses.join( \" \" ),\n            itemClasses = this.options.itemClasses.join( \" \" ),\n            checkedClass = this.options.checkedClass;\n\n        this.element.removeClass( widgetClasses );\n\n        this.items.removeClass( itemClasses )\n                  .removeClass( checkedClass )\n                  .removeAttr( \"aria-checked\" );\n\n    },\n\n    _click: function( e ) {\n\n        e.preventDefault();\n        this.check( this.items.index( $( e.currentTarget ) ) );\n\n    },\n\n    refresh: function() {\n\n        var trigger = true,\n            items,\n            newItems;\n\n        if ( this.items === undefined ) {\n            trigger = false;\n            this.items = $();\n        }\n\n        items = this.element.find( this.options.items )\n        newItems = items.not( this.items );\n\n        items.addClass( this.options.itemClasses.join( \" \" ) );\n\n        this._hoverable( newItems );\n        this._focusable( newItems );\n\n        this.items = items;\n\n        if ( trigger ) {\n            this._trigger( \"refreshed\",\n                           null,\n                           this._getCreateEventData() );\n        }\n\n    },\n\n    check: function( index ) {\n\n        var $item = this.items.eq( index ),\n            checked;\n\n        if ( !$item.length ) {\n            return;\n        }\n\n        checked = $item.attr( \"aria-checked\" ) === \"true\" ?\n                  \"false\" : \"true\";\n\n        $item.toggleClass( this.options.checkedClass )\n             .attr( \"aria-checked\", checked );\n\n        this._trigger( \"checked\", null, this._getCreateEventData());\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    $( \"#add\" ).button({\n        icons: {\n            primary: \"ui-icon-plus\"\n        },\n        text: false\n    });\n\n    $( \"#add\" ).on( \"click\", function( e ) {\n\n        var $checklist = $( \"#checklist\" ),\n            $item = $( \"<li/>\" ).appendTo( checklist );\n\n        $( \"<a/>\" ).attr( \"href\", \"#\" )\n                   .text( \"Write some documentation\" )\n                   .appendTo( $item );\n\n        $checklist.checklist( \"refresh\" );\n\n    });\n\n    $( \"#remove\" ).button({\n        icons: {\n            primary: \"ui-icon-minus\"\n        },\n        text: false\n    });\n\n    $( \"#remove\" ).on( \"click\", function( e ) {\n\n        var $checklist = $( \"#checklist\" ),\n            $item = $checklist.find( \".ui-checklist-item:last\" );\n\n        $item.remove();\n        $checklist.checklist( \"refresh\" );\n\n    });\n\n    $( \"#progressbar\" ).progressbar();\n\n    $( \"#checklist\" ).checklist({\n        create: function( e, ui ) {\n            $( \"#progressbar\" ).progressbar( \"option\", {\n                max: ui.items,\n                value: ui.checked\n            });\n        },\n        refreshed: function( e, ui ) {\n            $( \"#progressbar\" ).progressbar( \"option\", {\n                max: ui.items,\n                value: ui.checked\n            });\n        },\n        checked: function( e, ui ) {\n            $( \"#progressbar\" ).progressbar( \"value\", ui.checked );\n        }\n    });\n\n});\n```", "```js\n.ui-observer-event {\n    padding: 1px;\n}\n\n.ui-observer-event-border {\n    border-bottom: 1px solid;\n}\n\n.ui-observer-event-timestamp {\n    float: right;\n}\n```", "```js\n<div class=\"container\">\n    <h1 class=\"ui-widget\">Accordion</h1>\n    <div id=\"accordion\">\n        <h3>Section 1</h3>\n        <div>\n            <p>Section 1 content</p>\n        </div>\n        <h3>Section 2</h3>\n        <div>\n            <p>Section 2 content</p>\n        </div>\n    </div>\n</div>\n<div class=\"container\">\n    <h1 class=\"ui-widget\">Menu</h1>\n    <ul id=\"menu\">\n        <li><a href=\"#\">Item 1</a></li>\n        <li><a href=\"#\">Item 2</a></li>\n        <li><a href=\"#\">Item 3</a></li>\n    </ul>\n</div>\n<div class=\"container\">\n    <h1 class=\"ui-widget\">Tabs</h1>\n    <div id=\"tabs\">\n        <ul>\n            <li><a href=\"#tab1\">Tab 1</a></li>\n            <li><a href=\"#tab2\">Tab 2</a></li>\n            <li><a href=\"#tab3\">Tab 3</a></li>\n        </ul>\n        <div id=\"tab1\">\n            <p>Tab 1 content</p>\n        </div>\n        <div id=\"tab2\">\n            <p>Tab 2 content</p>\n        </div>\n        <div id=\"tab3\">\n            <p>Tab 3 content</p>\n        </div>\n    </div>\n</div>\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.observer\", {\n\n    options: {\n\n        observables: [\n            {\n                widget: $.ui.accordion,\n                events: [\n                    \"activate\",\n                    \"beforeActivate\",\n                    \"create\"\n                ]\n            },\n            {\n                widget: $.ui.menu,\n                events: [\n                    \"blur\",\n                    \"create\",\n                    \"focus\",\n                    \"select\"\n                ]\n            },\n            {\n                widget: $.ui.tabs,\n                events: [\n                    \"activate\",\n                    \"beforeActivate\",\n                    \"create\"\n                ]\n            }\n        ]\n\n    },\n\n    _getEvents: function() {\n\n        var events = {};\n\n        $.each( this.options.observables, function ( i, v ) {\n\n            var prefix = v.widget.prototype.widgetEventPrefix;\n\n            $.each( v.events, function( i, v ) {\n                events[ prefix + v.toLowerCase() ] = \"_event\";\n            });\n\n        });\n\n        return events;\n\n    },\n\n    _create: function() {\n\n        this._super();\n\n        var dialogId = \"ui-observer-dialog-\" + this.uuid,\n            dialogSettings = {\n                minHeight: 300,\n                maxHeight: 300,\n                position: {\n                    my: \"right top\",\n                    at: \"right top\"\n                },\n                title: this.element.selector\n            };\n\n        this.dialog = $( \"<div/>\" ).attr( \"id\", dialogId )\n                                   .attr( \"title\", \"Observer\" )\n                                   .addClass( \"ui-observer\" )\n                                   .appendTo( \"body\" )\n                                   .dialog( dialogSettings );\n\n        this._on( this.element, this._getEvents() );\n\n    },\n\n    _event: function( e, ui ) {\n\n        var eventClasses = \"ui-observer-event \" +\n                           \"ui-observer-event-border\",\n            $event = $( \"<div/>\" ).prependTo( this.dialog )\n                                  .addClass( eventClasses ),\n            time = new Date( e.timeStamp ).toLocaleTimeString();\n\n        $( \"<span/>\" ).html( e.type )\n                      .appendTo( $event );\n\n        $( \"<span/>\" ).html( time )\n                      .addClass( \"ui-observer-event-timestamp\" )\n                      .appendTo( $event );\n\n        this.dialog.find( \".ui-observer-event:last\" )\n                   .removeClass( \"ui-observer-event-border\" );\n\n    },\n\n    _destroy: function() {\n\n        this._super();\n        this.dialog.dialog( \"destroy\" )\n                   .remove();\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    $( document ).observer();\n\n    $( \"#accordion\" ).accordion();\n    $( \"#menu\" ).menu();\n    $( \"#tabs\" ).tabs();\n\n});\n```", "```js\n<script type=\"text/template\" id=\"template-detail\">\n    <div>\n        <strong>Title: </strong>\n        <span><%= title %></span>\n    </div>\n    <div>\n        <strong>Authors: </strong>\n        <span><%= authors %></span>\n    </div>\n    <div>\n        <strong>Year: </strong>\n        <span><%= year %></span>\n    </div>\n    <div>\n        <button class=\"delete\">Delete</button>\n    </div>\n</script>\n```", "```js\n.search, .detail {\n    margin: 20px;\n}\n\n.detail {\n    font-size: 1.4em;\n}\n\n.detail button {\n    font-size: 0.8em;\n    margin-top: 5px;\n}\n```", "```js\n<div class=\"search\">\n    <label for=\"search\">Search:</label>\n    <input id=\"search\"/>\n</div>\n<div class=\"detail\"></div>\n```", "```js\n$(function() {\n\n    // Model and collection classes\n\n    var Language,\n        LanguageCollection;\n\n    // View classes\n\n    var AutocompleteView,\n        LanguageView;\n\n    // Application router\n\n    var AppRouter;\n\n    // Collection instance\n\n    var languages;\n\n    // Application and view instances\n\n    var app,\n        searchView,\n        detailView;\n\n    /**\n     *\n     * Class definitions\n     *\n     **/\n\n    Language = Backbone.Model.extend({        \n       // ...\n    });\n\n    LanguageCollection = Backbone.Collection.extend({\n       // ...\n    });\n\n    AutocompleteView = Backbone.View.extend({        \n       // ...\n    });\n\n    LanguageView = Backbone.View.extend({        \n       // ...\n    });\n\n    AppRouter = Backbone.Router.extend({\n\n    });\n\n    /**\n     *\n     * Collection, view, and application instances\n     *\n     **/\n\n    languages = new LanguageCollection([        \n        // …\n    ]);\n\n    searchView = new AutocompleteView({\n        // ….\n    });\n\n    detailView = new LanguageView({\n        // …\n    });\n\n    app = new AppRouter();\n\n    Backbone.history.start();\n\n});\n```"]