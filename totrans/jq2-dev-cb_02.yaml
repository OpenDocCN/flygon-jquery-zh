- en: Chapter 2. Interacting with the User by Making Use of jQuery Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting button clicks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting element clicks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating content based on user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting key press events on inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting input character length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing page elements on mouse hover
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering events manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing event triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter looks at how you can make use of jQuery's many events to allow
    your interface to respond to different user interactions, such as button clicks,
    and also how jQuery events can help you with form validation.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting button clicks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clicking on website elements is a primary user interaction; therefore, detecting
    these clicks is a very fundamental aspect in creating interactive web applications.
    There are various ways in which jQuery developers can listen for certain button
    presses within their web page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using your favorite text editor or IDE, create a blank HTML page named `recipe-1.html`
    in an easily accessible location.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create two buttons with click event handlers by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following HTML code to `recipe-1.html`. Be sure to change the location
    of the jQuery library in the JavaScript file, pointing it to where the latest
    version of jQuery is downloaded on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the script tags, add the following JavaScript code, which attaches click
    event handlers to both of the button elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-1.html` within a web page and click on either of the buttons. You
    will be presented with a different JavaScript alert for each button, demonstrating
    that the event handlers have been executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use various selectors to select button elements and then attach event
    handlers to these elements. In the preceding example, we select the first button
    using its class name, `.button1`, and the second button using the class name `.button2`.
  prefs: []
  type: TYPE_NORMAL
- en: With each button selected via the `$()` method, we can choose a method for attaching
    a click event to our buttons. The `.click()` method, as shown in the following
    code snippet, is dedicated for this purpose. By passing a callback function as
    an argument, we can specify a set of commands to be executed once the buttons
    have been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will display the specified alert once the first button has
    been clicked. The following code uses an alternative function, `.on()`, which
    also handles other event types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This method is a little different as we first select the container of our buttons
    and then specify the button identifier (that is, `.button2`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `.on()` method has some additional benefits over `.click()` alongside the
    previously mentioned memory benefit. If any elements are added to the DOM dynamically
    after the `.click()` function has been called, they will not have a click event
    attached. If the `.on()` method is used, provided that the dynamically added elements
    are added within the specified container, they will be caught by the click event
    handler. Consider the following code as an example of this situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code will attach an event handler to each of the buttons on page load using
    the `.click()` and `.on()` methods, respectively. Then, using the `setTimeout()`
    function, it will dynamically add two more buttons to the DOM; one button with
    the `.button1` class and the other with the `.button2` class. If you open this
    web page in a browser and wait for the second set of buttons to be created and
    then click on the additional **Button 1** button, no click event will be fired.
    Click on the additional **Button 2** button, and you will see the alert box being
    fired as desired.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Detecting element clicks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting key press events on inputs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting element clicks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having the ability to detect if a user has clicked on elements other than buttons
    can provide additional flexibility to your web application. You can attach click
    events to any HTML elements, just as we did with the buttons in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To work through this recipe, we are first going to need a blank HTML page named
    `recipe-2.html`, the same as in the other recipes. Remember that you need to have
    the latest version of jQuery downloaded and easily accessible on your computer
    so that it can be included in `recipe-2.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand how you can detect user clicks on elements other than buttons,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following HTML to the `recipe-2.html` page you have just created. This
    HTML creates a very basic web page with an input, an anchor, and a division element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within the script tags in the head tag of the HTML page we just created, add
    the following JavaScript code. This JavaScript code uses two different methods
    of attaching click event handlers to three DOM elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that all the changes have been saved and then open `recipe-2.html` in
    a browser. When you click on any of the elements, you will be presented with a
    different JavaScript alert, demonstrating that each of these click events are
    being caught by the event handlers we created earlier in the recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can select DOM elements using their tag names, such as `a` to select a link,
    and then use the `.click()` or `.on()` functions to attach a click event handler,
    as shown in the following code snippet. We can also use the CSS selector `input[type="text"]`
    to select all text inputs on the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding jQuery code attaches a click event to each DOM element with the
    `.clickme` class. These elements can be any DOM elements such as divs, buttons,
    links, inputs, and text areas. This gives the jQuery developer the flexibility
    to be able to interpret user interactions across all page elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the *Detecting button clicks* recipe of this chapter to understand the difference
    between `.click()` and `.on()` and why `.on()` is the preferred implementation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Detecting button clicks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting key press events on inputs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While creating dynamic and interactive websites and web applications, it is
    useful to know when a user has changed something on the page, such as the value
    of a selected input, a text input, or any other element that has a modifiable
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once more, create a new blank HTML document named `recipe-3.html`. Ensure that
    you have the latest version of jQuery downloaded, which can be included into this
    HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn how to attach change event handlers to various element types, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to the HTML document you have just created, and
    update the reference to the jQuery library in order to ensure that the latest
    version of jQuery is being included into the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the script tags, add the following JavaScript code to attach change
    event handlers on the different elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that all the changes have been saved. Now, open `recipe-3.html` in a
    web browser; if you change the value of one of the elements on the page, you will
    be presented with an alert informing you of the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selecting each input element using `$()` and then using the `.change()` function
    to attach a change event handler allows us to specify the code to be executed
    once the user has changed the value of each input.
  prefs: []
  type: TYPE_NORMAL
- en: Within the callback function, which is provided to the `.change()` function
    as an argument, we can get the new value. Using `this`, which refers to the selected
    element, we can use `$(this).val()` to retrieve the newly chosen value and display
    it within an alert.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the web page within a browser and change the selected input value
    to `Allyce`, an alert will be displayed similar to the one shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/0896OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is done using `.val()` to return the `value="Allyce"` property on the selected
    option in the drop-down input which has the change event handler attached.
  prefs: []
  type: TYPE_NORMAL
- en: When using the `.change()` event handler on a text input, this change event
    will not be fired until the input box has lost focus, that is, the user has clicked
    on another part of the web page. As it is often desirable to detect an immediate
    change, you should consider using a key press event to catch these changes instead.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *Detecting button clicks* recipe discussed the benefits of using the `.on()`
    method over using `.click()`. These benefits also apply in this situation as the
    `.on()` method can also be used with the change event. Consider the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Detecting button clicks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting key press events on inputs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Updating content based on user input*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating content based on user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery allows developers to easily process user input and then update the page
    to reflect this input. The previous recipes of this chapter have looked at detecting
    changes on input values and clicks on various page elements. This recipe will
    help you to create a web page that will update a header element based on the title
    that has been selected from a drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML document named `recipe-4.html`, with the latest version
    of the jQuery library downloaded and ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using techniques similar to those you have learned in the previous recipes,
    perform the following steps to make changes to the DOM based on user interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following HTML code to `recipe-4.html`, which you have just created;
    don't forget to update the reference to the jQuery library. This HTML creates
    a basic HTML web page with a drop-down menu element, allowing the user to choose
    a number of titles. There is also a header element that we can manipulate with
    jQuery based on user selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following JavaScript code within the script tags to attach a change
    event handler to the select input `#title`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running this web page in a browser and selecting a new option from the drop-down
    menu will update the text of the header accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we instruct jQuery to attach a change event handler to the `#title`
    select input using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When the user changes the selected option in the drop-down input, the change
    event handler is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `function` argument, we can use `$(this)` to refer to the `#title` select
    input and then use `$(this).val();` to get its selected value. Once we have this
    value, we can perform any action we require using JavaScript. In this example,
    we determine which title has been selected using a JavaScript `switch` statement,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the selected title value, we create some text which we then provide
    to `$('#main-title').html();`. This will update the `#main-title` header element's
    HTML to be the provided text.
  prefs: []
  type: TYPE_NORMAL
- en: This illustrates a very simple task of how a jQuery developer can process user
    input and perform an action to alter the page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Detecting change*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Changing page elements on mouse hover*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting key press events on inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery provides three event functions that allow the jQuery developer to determine
    what key a user is pressing, and when and how the user is pressing it. The `.keyup()`
    function is an event handler that can be attached to an input and will be fired
    once the pressed key has been fully released; likewise, `.keydown()`will be fired
    once the key has been fully pressed. The third available event handler is `.keypress()`,
    which is fired instantly when a key is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: These methods allow the developer to provide powerful client-side validation
    or to provide the user with simple features such as triggering a form submission
    when the *Enter* key is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML file named `recipe-5.html` which we can use for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use a variety of event handlers to detect user key press events by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following HTML code to the web page you have just created. Update the
    reference to the jQuery library to ensure that the latest version is being referenced
    into the web page. This HTML creates a simple page that has an input and an unordered
    list element, which we can use to output some event information in order to illustrate
    what each part of our jQuery code is achieving.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the script tags, add the following JavaScript code to attach both the
    `keyup` and `keydown` event handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can attach both the `keyup` and `keydown` event handlers by first selecting
    our `.myInput` element and then specifying one of the event handler functions
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We have added an `event` variable as an argument to the callback function on
    the `keydown` event. From this `event` variable, we can detect which key has been
    pressed using `event.which`. This is often useful as we can determine whether
    the key that the user has just pressed down is the *Enter* key, which we would
    be likely to want to perform a specific action on, such as for form submission
    or when we want to trigger an AJAX call. In this example, we simply append a list
    item to our `#myList` unordered list to illustrate the concept.
  prefs: []
  type: TYPE_NORMAL
- en: We replicate this procedure within our `keyup` event handler and use the `.append()`
    function to append a new DOM element into the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you load this web page in a browser and enter text in the input box, you
    will be able to see the events trigger as the list element updates on every key
    press. You will be able to see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/0896OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides two examples with `keydown` and `keyup`. Try experimenting
    with the code, and use the alternative `keypress()` function in the same way to
    see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Detecting button clicks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting element clicks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Restricting input character length*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting change*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting input character length
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to limit the characters a user is able to input into a text field
    by utilizing jQuery's `keypress` events. In some situations, this can be a powerful
    user experience feature, as the user is visually aware of the characters that
    they cannot provide instead of having to wait for a response from the server informing
    them of this error.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, we are going to need a blank HTML document with the latest version
    of jQuery to work through this recipe. Create `recipe-6.html` and ensure that
    you have jQuery downloaded and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to restrict a user from entering certain characters into a text input
    using jQuery by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to your newly created `recipe-6.html` file that
    creates a basic HTML web page with a single input element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the script tags of the HTML page, add the following JavaScript code,
    which binds a `keypress` event handler to the input and prevents any nonalphanumeric
    character input in the selected text input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-6.html` in a browser and attempt to type a nonalphanumeric character
    into the input textbox; you will see that it is not possible to do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We attach the `keypress` event handler to the `.myInput` element and specify
    the `event` variable as an argument as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This allows us to specify commands to be executed on `keypress` when the `.myInput`
    field has focus.
  prefs: []
  type: TYPE_NORMAL
- en: We declare a regular expression variable which we can use to evaluate whether
    the entered character is alphanumeric.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Each key on the keyboard has a unique numeric code that can be accessed using
    `event.which`. Then, to determine if the key pressed is alphanumeric, we need
    to retrieve its string value (for example, alphanumeric value for f is 102 ),
    which can be done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This now allows us to apply the regular expression and determine if it meets
    our alphanumeric requirements. If it does not, we prevent such key value from
    being entered by returning `false` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We allow the character to be displayed in the textbox if the pressed key was
    a valid alphanumeric character.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to understand that client-side validation such as this is a
    powerful user experience feature, but it should never be solely relied upon. Any
    validation done on the client side should always be mirrored on the server. This
    is because it is extremely easy for a user to bypass client-side validation. It
    is often as easy as turning off JavaScript from the browser settings. Remember
    that any client-side language such as JavaScript is completely open to manipulation
    by the end user. For this reason, client-side validation should only be used as
    a user experience enhancement and never a form of explicit validation of data
    input.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Detecting key press events on inputs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing page elements on mouse hover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery provides many ways to bind mouse event handlers that can give the jQuery
    developer more control and flexibility than CSS pseudo classes such as `:hover`.
    These event handlers make it possible to create a rich and interactive user experience
    based on user actions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the release of jQuery 2.0, jQuery no longer officially supports earlier
    browsers such as IE6, IE7, and IE8\. However, methods such as `.hover()` can still
    provide benefits that will allow you to support earlier versions of browsers.
    Be wary, however, that some parts of the jQuery library may no longer work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate the mouse hover event, we need to firstly create a blank HTML
    document. Create `recipe-7.html` in an easily accessible location on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to understand how jQuery can be used to detect
    when a user is performing a hover action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With your newly created HTML document, add the following HTML and CSS code
    to create a web page with some basic form elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we have a web page with three simple form elements and a div tag in which
    we can display information about the hovered item. Use the following JavaScript
    code and place it within the script tags to attach the `mouseover` and `mouseleave`
    event handlers to each of the elements with the `.hoverinfo` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the web page in a browser and hover over the different form elements; you
    will see the appropriate message displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the following CSS code to add some basic styles to our `.info` div element
    so that it will stand out on the page once displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added `display: none;` to prevent the `.info` element from being displayed
    on the screen, leaving this to the jQuery code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the `.hoverinfo` class to each HTML element that includes extra information,
    so we can identify them within our jQuery code. We then use the following code
    to attach both a `mouseover` and `mouseleave` event handler to each of the `.hoverinfo`
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `mouseover` event handler will be executed when the users move their mouse
    over any of the `.hoverinfo` elements. Similarly, the `mouseleave` event will
    be executed once the user's mouse pointer has left any of the HTML elements with
    the `.hoverinfo` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `mouseover` event handler, we can use `$(this).attr("rel");` to
    get the text of the `rel` attribute (or the value of any HTML attribute) that
    we have added to each of the `.hoverinfo` elements. This can then be used with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We pass the text from the `rel` attribute to the `.html()` function, which will
    replace the existing HTML code inside the `.info` div element. We then use jQuery's
    `.fadeIn()` function to provide an animation and show the `.info` element with
    the value from the `rel` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `mouseleave` event handler uses `$('.info').hide();` to again hide
    the element from view, allowing the process to be repeated once another of the
    `.hoverinfo` element's `mouseover` events has been triggered.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery includes many additional mouse event handlers that can be used for a
    variety of user interactions. Ensure that you choose the one most suitable for
    your situation. Visit the jQuery documentation ([http://api.jquery.com/category/events/mouse-events/](http://api.jquery.com/category/events/mouse-events/))
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Updating content based on user input*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering events manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be parts of your web application where reacting to events fired by
    user interaction is not enough. jQuery allows us to manually trigger events from
    within our code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a web application, there may be times when you require a form
    that is handled solely by your jQuery code and is not submitted as a typical HTML
    form, perhaps to make an AJAX request instead. This is what we will demonstrate
    in this recipe. To get started, once again create another blank HTML document
    named `recipe-8.html`. Ensure that it is placed in an easily accessible location
    on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to manually trigger events from within JavaScript by performing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-8.html` in order to create a very basic
    web page with a set of form elements and a submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code within the script tags to create an event handler
    for the **Submit** button and to manually trigger the submit button click event
    when the user presses *Enter* inside any of the text inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We often want to mimic typical behavior such as form submission when the *Enter*
    key is pressed inside one of our form inputs. We can use the following code to
    listen for a key press event on all of our text inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This code will be executed once the user has pressed a key inside a text input.
    When they do so, we use `event.which == 13` to check if the *Enter* key is pressed
    (that is, the character code of *Enter* is `13`). If it has been pressed, we use
    the jQuery function `.trigger()` and pass the string `click` to manually trigger
    the click event on the selected element, which in this case is `.submit-btn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following code, a click event handler can be attached to `.submit-btn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The code within the `function` argument is executed and the alert is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many other jQuery event handler functions that can be used to manually
    trigger an event if no callback function is provided as an argument. For example,
    consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This code uses the `.click()` function to manually trigger a click event, as
    opposed to using the `.trigger()` function. There is no noticeable difference
    between the two methods, but note that both are available.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing event triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many situations where a jQuery developer will want to prevent the
    default browser actions of events of normal HTML elements such as forms, buttons,
    or even their own event handlers. jQuery provides the ability to stop these events.
    This allows the developer to prevent situations such as multiple button clicks,
    multiple form submissions, and accidental submissions, or generally allow the
    developer to change the normal behavior of typical events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML file named `recipe-9.html` and ensure that the latest version
    of the jQuery library is available.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Understand how to prevent default browser actions by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-9.html`; ensure that you update the
    reference to the jQuery library to the correct location on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following jQuery code and place it within the script tags to catch
    the button click of the **Submit** button and prevent the form from being submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-9.html` in a browser and clicking on the **Submit** button will
    present you with a JavaScript confirmation message, which will catch your response
    and then submit the HTML form, depending on your choice. The form will not be
    submitted until you have responded to this message box, thanks to the `event.preventDefault();`
    and `event.stopPropagation();` methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following jQuery code allows us to click on the **Submit** button and create
    a click event handler using the `.on()` function. We provide `click` as the first
    argument to specify that we require the click event handler, and the `.on()` function
    provides an interface for many other types of events.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We provide the `event` variable as an argument in the `.on()` callback function.
    We can then use the following jQuery functions to create our desired effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `event.prevenDefault();` function prevents the default action of the current
    event; in this case, the form submission. This allows us to handle the event in
    our own way, such as providing extra functionality or resulting in a different
    action entirely. The `event.stopPropagation();` function will prevent the event
    from bubbling up through the parent and ancestor DOM elements. When an event is
    fired on an element, the event is also fired on the parent and all ancestor elements
    within the DOM, and as a result, we can still fire the event we are trying to
    initially prevent.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have used these methods to prevent the form submission, we can ask the
    user if they are sure they would like to submit the form. We use the native JavaScript
    `confirm()` function to do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We store the user's response in a variable which we can then evaluate. If they
    click on **OK** to confirm the form submission, we can go ahead and submit the
    form using `$('#myForm').submit();`. Otherwise, we do nothing and the form is
    not submitted.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Triggering events manually*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery provides the developer with ways to handle built-in JavaScript events
    with functions such as `.click()`, `.hover()`, and others. jQuery also allows
    developers to create their own event types for additional functionality. With
    the creation of custom events, developers are also able to pass data around their
    application more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create another blank HTML document named `recipe-10.html` in an easily accessible
    location.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to create a custom event using jQuery by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following HTML code to this newly created HTML document. Remember to
    update the reference to the jQuery library to point to its local location on your
    computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now bind a custom event handler to our paragraph and trigger it when
    one of our button elements is clicked. Add the following JavaScript code within
    the script tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open your newly created web page, and by clicking on either of the two buttons,
    you should see the paragraph text change along with its color, corresponding to
    the button that was clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jQuery provides us with a `.on()` function that allows us to specify the name
    of the event we wish to bind to the selected element. We can specify a built-in
    jQuery event or we can provide the name of our own event. We do this using the
    following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This code binds an event handler for our custom `switchColour` event to the
    paragraph element with the `colourme` class. The second argument we provide to
    the `.on()` function is a callback method that has its own three arguments: `Event`,
    which holds the event information, and then `colour` and `text`, which are our
    own custom properties that we can use later.'
  prefs: []
  type: TYPE_NORMAL
- en: Within the function, we use `$(this).html(text);` in order to change the content
    of the currently selected `.colourme` paragraph element to be the text provided
    within the `text` variable. We also apply some CSS using `$(this).css("color",
    colour);` (use the spelling `color` not colour) that changes the color of the
    text to that of the value provided as the `colour` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our custom event has been created, we need to be able to trigger this
    event, which can be done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding JavaScript code, we use the jQuery provided `.click()` function
    to execute a set of code once either of the button elements have been clicked.
    Within the click event handler, we first retrieve the `rel` attribute of the element,
    which we specified as a variable `colour` in the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: We then use the `.trigger()` function and specify our custom event to be triggered.
    We provide a second parameter as an array, containing both the variables we specified
    in our custom event using `.on()`, `colour`, and `text`.
  prefs: []
  type: TYPE_NORMAL
- en: The `.trigger()` function will fire our custom event and provide any bound elements
    with the information we provide. The .`colourme` paragraph that is bound to this
    event will have its inner HTML changed and its CSS color property modified to
    become the specified color.
  prefs: []
  type: TYPE_NORMAL
