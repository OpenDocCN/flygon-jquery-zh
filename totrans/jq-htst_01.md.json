["```js\n<!DOCTYPE html>\n\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title></title>\n        <link rel=\"stylesheet\" href=\"css/common.css\" />\n    </head>\n    <body>\n        <script src=\"img/jquery-1.9.0.min.js\"></script>\n    </body>\n</html>\n```", "```js\n<link rel=\"stylesheet\" href=\"css/sliding-puzzle.css\" />\n```", "```js\n<script src=\"img/jquery-ui-1.10.0.custom.min.js\"></script>\n```", "```js\n<script src=\"img/sliding-puzzle.js\"></script>\n```", "```js\n<div id=\"puzzle\" class=\"clearfix\">\n    <figure>\n        <img src=\"img/space-girl-vera.jpg\" />\n    </figure>\n    <div id=\"ui\">\n        <p id=\"time\">Current time: <span>00:00:00</span></p>\n        <button id=\"start\">Start!</button>\n    </div>\n</div>\n```", "```js\n$(function () {\n\n    //all our code will be in here...\n\n});\n```", "```js\nvar numberOfPieces = 12,\n    aspect = \"3:4\",\n    aspectW = parseInt(aspect.split(\":\")[0]),\n    aspectH = parseInt(aspect.split(\":\")[1]),\n    container = $(\"#puzzle\"),\n    imgContainer = container.find(\"figure\"),\n    img = imgContainer.find(\"img\"),\n    path = img.attr(\"src\"),\n    piece = $(\"<div/>\"),\n    pieceW = Math.floor(img.width() / aspectW),\n    pieceH = Math.floor(img.height() / aspectH),\n    idCounter = 0,\n    positions = [],\n    empty = {\n        top: 0, \n        left: 0,\n        bottom: pieceH, \n        right: pieceW\n    },\n    previous = {},\n    timer,\n    currentTime = {},\n    timerDisplay = container.find(\"#time\").find(\"span\");\n```", "```js\nfor (var x = 0, y = aspectH; x < y; x++) {\n    for (var a = 0, b = aspectW; a < b; a++) {\n        var top = pieceH * x,\n            left = pieceW * a;\n\n        piece.clone()\n             .attr(\"id\", idCounter++)\n             .css({\n                 width: pieceW,\n                 height: pieceH,\n                 position: \"absolute\",\n                 top: top,\n                 left: left,\n                 backgroundImage: [\"url(\", path, \")\"].join(\"\"),\n                 backgroundPosition: [\n                     \"-\", pieceW * a, \"px \", \n                     \"-\", pieceH * x, \"px\"\n                 ].join(\"\")\n        }).appendTo(imgContainer);\n\n        positions.push({ top: top, left: left });\n    }\n}\n```", "```js\nimg.remove();\n```", "```js\ncontainer.find(\"#0\").remove();\n```", "```js\npositions.shift();\n```", "```js\n$(\"#start\").on(\"click\", function (e) {\n    var pieces = imgContainer.children();\n\n    function shuffle(array) {\n        var i = array.length;\n\n        if (i === 0) { \n            return false;\n        }\n        while (--i) {\n            var j = Math.floor(Math.random() * (i + 1)),\n                tempi = array[i],\n                tempj = array[j];\n\n                array[i] = tempj;\n                array[j] = tempi;\n        }\n    }\n\n    shuffle(pieces);\n\n    $.each(pieces, function (i) {\n        pieces.eq(i).css(positions[i]);\n    });\n\n    pieces.appendTo(imgContainer);\n\n    empty.top = 0;\n    empty.left = 0;\n\n    container.find(\"#ui\").find(\"p\").not(\"#time\").remove();\n\n});\n```", "```js\npieces.draggable({\n    containment: \"parent\",\n    grid: [pieceW, pieceH],\n    start: function (e, ui) {\n\n    },\n    drag: function (e, ui) {\n\n    },\n    stop: function (e, ui) {\n\n    }\n});\n```", "```js\nvar current = getPosition(ui.helper);\n\nif (current.left === empty.left) {\n    ui.helper.draggable(\"option\", \"axis\", \"y\");\n} else if (current.top === empty.top) {\n    ui.helper.draggable(\"option\", \"axis\", \"x\");\n} else {\n    ui.helper.trigger(\"mouseup\");\n    return false;\n}\n\nif (current.bottom < empty.top || \n    current.top > empty.bottom ||\n    current.left > empty.right || \n    current.right < empty.left) {\n        ui.helper.trigger(\"mouseup\");\n        return false;\n    }\n\n    previous.top = current.top;\n    previous.left = current.left;\n```", "```js\nvar current = getPosition(ui.helper);\n\nui.helper.draggable(\"option\", \"revert\", false);\n\nif (current.top === empty.top && current.left === empty.left) {\n    ui.helper.trigger(\"mouseup\");\n    return false;\n}\n\nif (current.top > empty.bottom ||\n    current.bottom < empty.top || \n    current.left > empty.right || \n    current.right < empty.left) {\n        ui.helper.trigger(\"mouseup\")\n                 .css({ \n                     top: previous.top, \n                     left: previous.left \n                 });\n        return false;\n}\n```", "```js\nvar current = getPosition(ui.helper);\n\nif (current.top === empty.top && current.left === empty.left) {\n\n    empty.top = previous.top;\n    empty.left = previous.left;\n    empty.bottom = previous.top + pieceH;\n    empty.right = previous.left + pieceW;\n}\n```", "```js\nfunction getPosition(el) {\n    return {\n        top: parseInt(el.css(\"top\")),\n        bottom: parseInt(el.css(\"top\")) + pieceH,\n        left: parseInt(el.css(\"left\")),\n        right: parseInt(el.css(\"left\")) + pieceW\n    }\n}\n```", "```js\npieces.appendTo(imgContainer).draggable(\"destroy\");\n\nif (timer) {\n clearInterval(timer);\n timerDisplay.text(\"00:00:00\");\n}\n\ntimer = setInterval(updateTime, 1000);\ncurrentTime.seconds = 0;\ncurrentTime.minutes = 0;\ncurrentTime.hours = 0;\n\npieces.draggable({\n```", "```js\nfunction updateTime() {\n\n    if (currentTime.hours === 23 && currentTime.minutes === 59 &&\ncurrentTime.seconds === 59) {\n        clearInterval(timer);          \n    } else if (currentTime.minutes === 59 && currentTime.seconds === 59) {\n\n        currentTime.hours++;\n        currentTime.minutes = 0;\n        currentTime.seconds = 0;\n    } else if (currentTime.seconds === 59) {\n        currentTime.minutes++;\n        currentTime.seconds = 0;\n    } else {\n        currentTime.seconds++;\n    }\n\n    newHours = (currentTime.hours <= 9) ? \"0\" + currentTime.hours :\n\n    currentTime.hours;\n    newMins = (currentTime.minutes <= 9) ? \"0\" + currentTime.minutes :\n\n    currentTime.minutes;\n    newSecs = (currentTime.seconds <= 9) ? \"0\" + currentTime.seconds : \n\n    currentTime.seconds;\n\n    timerDisplay.text([\n        newHours, \":\", newMins, \":\", newSecs\n    ].join(\"\"));\n\n}\n```", "```js\nvar current = getPosition(ui.helper),\n correctPieces = 0;\n\n```", "```js\n$.each(positions, function (i) {\n    var currentPiece = $(\"#\" + (i + 1)),\n        currentPosition = getPosition(currentPiece);\n\n    if (positions[i].top === currentPosition.top && positions[i].left === currentPosition.left) {\n\n        correctPieces++;\n    }\n});\n\nif (correctPieces === positions.length) {\n    clearInterval(timer);\n    $(\"<p/>\", {\n        text: \"Congratulations, you solved the puzzle!\"\n    }).appendTo(\"#ui\");\n}\n```", "```js\nvar totalSeconds = (currentTime.hours * 60 * 60) + (currentTime.minutes * 60) + currentTime.seconds;\n\nif (localStorage.getItem(\"puzzleBestTime\")) {\n\n    var bestTime = localStorage.getItem(\"puzzleBestTime\");\n\n    if (totalSeconds < bestTime) {\n\n        localStorage.setItem(\"puzzleBestTime\", totalSeconds);\n\n        $(\"<p/>\", {\n            text: \"You got a new best time!\"\n        }).appendTo(\"#ui\");\n    }\n} else {\n    localStorage.setItem(\"puzzleBestTime\", totalSeconds);\n\n    $(\"<p/>\", {\n        text: \"You got a new best time!\"\n    }).appendTo(\"#ui\");\n}\n```", "```js\n#puzzle { \n    width:730px; padding:5px; margin:auto; \n    border:1px solid #aaa; border-radius:5px; \n    background-color:#eee; \n}\n#puzzle figure { \n    width:510px; height:676px; border:1px solid #aaa; \n    position:relative; float:left; background-color:#fff; \n}\n#ui { padding:10px 0 0 10px; float:left; }\n#ui button { margin-bottom: 2em; }\n#ui p { font-size:1.7em; }\n#start { width:204px; height:50px; font-size:1.75em; }\n```"]