- en: Chapter 7. The Datepicker Widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The jQuery UI datepicker widget is probably the most refined and documented
    widget found in jQuery library. It has the biggest **Application programming interface**
    (**API**) and probably provides the most functionality out of all the widgets.
    It not only works completely out of the box, but is also highly configurable and
    robust.
  prefs: []
  type: TYPE_NORMAL
- en: Quite simply, the datepicker widget provides an interface that allows visitors
    of your site or application to select dates. Wherever a form field is required
    that asks for a date to be entered, the datepicker widget can be added. This means
    your visitors get to use an attractive and engaging widget, and you get dates
    in the format in which you expect them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The default datepicker implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the configurable options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a trigger button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring alternative animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dateFormat` option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple month datepickers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-range selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datepicker widget's methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AJAX with the datepicker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional functionality built into the datepicker includes automatic opening
    and closing animations along with the ability to navigate the interface of the
    widget using the keyboard. While holding down the *Ctrl* key (or command key on
    Mac), the arrows on the keyboard can be used to choose a new day cell, which can
    then be selected using the return key.
  prefs: []
  type: TYPE_NORMAL
- en: 'While easy to create and configure, the datepicker is a complex widget made
    up of a wide range of underlying elements, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Datepicker Widget](img/2209OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Despite this complexity, we can implement the default datepicker with just a
    single line of code, much like the other widgets in the library that we have covered
    so far.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the datepicker widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the default datepicker, add the following code to a new page in your
    text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker1.html` in the `jqueryui` project folder. All we have
    on the page is a `<label>` and a standard text `<input>` element. We don't need
    to specify any empty container elements for the datepicker widget to be rendered
    into, as the markup required to create the widget is automatically added by the
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it might be tempting to use the HTML5 `type="date`" attribute in your
    `<input>` statements, it is not recommended—this can cause conflicts where it
    shows both jQuery UI datepickers at the same time as the native HTML5 version.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the page in your browser and focus on the `<input>` element, the
    default datepicker should appear beneath the input. Along with an `<input>` element,
    the datepicker can also be attached to a `<div>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from looking great, the default datepicker also comes with a lot of built-in
    functionality. When the datepicker opens, it is smoothly animated from zero to
    full size, and it will automatically be set to the present date. Selecting a date
    will automatically add the date to the `<input>` and close the calendar (again
    with a nice animation).
  prefs: []
  type: TYPE_NORMAL
- en: 'With no additional configuration and a single line of code, we now have a perfectly
    usable and attractive widget that makes date selection easy. If all you want is
    to let people pick a date, this is all that you need. The source files required
    for the default datepicker are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jquery-2.0.3.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.core.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.widget.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.datepicker.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting dates using inline calendars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've created a basic datepicker widget, which we've linked into a normal text
    `<input>` box. While this will work perfectly fine, there may be instances where
    you don't want to use a normal input box, and just need to display the calendar
    already open within your page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately this is easy to achieve using the datepicker widget. Change the
    HTML code to use `<div>` elements as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we preview the results in a browser, you will notice that the input textbox
    has disappeared, and that the calendar is already displayed in full:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting dates using inline calendars](img/2209OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configurable options of the datepicker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The datepicker has a large range of configurable options (currently 50 to be
    exact). The following table lists the basic options, their default values, and
    gives a brief description of their usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default value | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `altField` | `""` | Specifies a CSS selector for an alternative `<input>`
    field to which the selected date is also added. |'
  prefs: []
  type: TYPE_TB
- en: '| `altFormat` | `""` | Specifies an alternative format for the date added to
    the alternative `<input>`. See the `dateFormat` option in the later section for
    clarification on the value this option takes. |'
  prefs: []
  type: TYPE_TB
- en: '| `appendText` | `""` | Adds text after datepicker `<input>` to show the format
    of the selected date. |'
  prefs: []
  type: TYPE_TB
- en: '| `autoSize` | `false` | Automatically sets the width of the `<input>` element
    so that it can accommodate a date according to the specified `dateFormat`. |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeShow` | `null` | Allows the datepicker configuration object to update
    the datepicker just before it is called. |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeShowDay` | `null` | Takes a date as a parameter, and returns values
    to indicate if the date is selectable, the class name to add to the date''s cell,
    and an (optional) pop-up tooltip for the date.The function is called for each
    day in the datepicker, before it is displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `buttonImage` | `""` | Specifies a path to the image to use for the trigger
    `<button>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `buttonImageOnly` | `false` | Sets to `true` to use an image instead of a
    trigger button. |'
  prefs: []
  type: TYPE_TB
- en: '| `buttonText` | `"..."` | Provides text to display on a trigger `<button>`
    (if present). |'
  prefs: []
  type: TYPE_TB
- en: '| `calculateWeek` | `$.datepicker. iso8601Week` | Accepts a function, used
    to calculate the week of the year for a specified date. |'
  prefs: []
  type: TYPE_TB
- en: '| `changeMonth` | `false` | Show the month change dropdown. |'
  prefs: []
  type: TYPE_TB
- en: '| `changeYear` | `false` | Show the year change dropdown. |'
  prefs: []
  type: TYPE_TB
- en: '| `closeText` |   |  |'
  prefs: []
  type: TYPE_TB
- en: '| `constrainInput` | `true` | Constrains the `<input>` element to the format
    of the date, specified by the widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `currentText` | `"Today"` | The text to display for the current day link.
    This option must be used in conjunction with the `showButtonPanel` attribute to
    display this button. |'
  prefs: []
  type: TYPE_TB
- en: '| `dateFormat` |   | The format to use for parsed and displayed dates. A full
    list of formats is displayed in the *Changing the date format* section later in
    this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `dayNames` | `[ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
    "Saturday" ]` | The list of long day names to be used in conjunction with the
    `dateFormat` attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| `dayNamesMin` | `[ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]` | An array
    that contains the minimized date names that show on the column headers in the
    datepicker widget. This can be localized, as we will see later in this chapter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dayNamesShort` | `[ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]` |
    The list of abbreviated day names, for use with the `dateFormat` attribute of
    the widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultDate` | `null` | Sets the date that will be highlighted when the
    datepicker opens and the `<input>` element is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| `duration` | `"normal"` | Sets the speed at which the datepicker opens. |'
  prefs: []
  type: TYPE_TB
- en: '| `firstDay` | `0` | Sets the first day of the week, beginning with `0` for
    Sunday, through to `6` for Saturday. |'
  prefs: []
  type: TYPE_TB
- en: '| `gotoCurrent` | `false` | Sets the current day link to move the datepicker
    widget to the currently selected date instead of today. |'
  prefs: []
  type: TYPE_TB
- en: '| `hideIfNoPrevNext` | `false` | Hides the previous/next links when not needed,
    instead of disabling them. |'
  prefs: []
  type: TYPE_TB
- en: '| `isRTL` | `false` | Controls whether the language used is drawn from right
    to left. |'
  prefs: []
  type: TYPE_TB
- en: '| `maxDate` | `null` | Sets the maximum date that can be selected. Accepts
    a date object or a relative number. For example: `+7`, or a string such as `+6m`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `minDate` | `null` | Sets the minimum date that can be selected. Accepts
    a number, date object, or string. |'
  prefs: []
  type: TYPE_TB
- en: '| `monthNames` | `Array of month names, for example [ "January", "February",
    "March"…]` | Sets the full list of month names, for use with the `dateFormat`
    attribute in the widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `monthNamesShort` | `Array of abbreviated month names, such as ["Jan", "Feb",
    "Mar"…]` | Sets the list of abbreviated month names for use in each month header
    within the datepicker widget, as specified by the `dateFormat` attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| `navigationAsDateFormat` | `false` | Allows us to specify month names using
    the previous, next, and current links. |'
  prefs: []
  type: TYPE_TB
- en: '| `nextText` | `"Next"` | Sets the text to display for the next month link.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `numberOfMonths` | `1` | Sets the number of months shown on a single datepicker
    widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `onChangeMonthYear` | `Function` | Called when datepicker moves to a new
    month or year. |'
  prefs: []
  type: TYPE_TB
- en: '| `onClose` | `Function` | Called when the datepicker widget is closed, irrespective
    of whether a date has been selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onSelect` | `Function` | Called when the datepicker widget has been selected.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `prevText` | `"Prev"` | Sets the text to display for the previous month link.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `selectOtherMonths` | `false` | Allows days in previous or following months
    that are shown on the current month''s panel (see the `showOtherMonths` option)
    to be selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `shortYearCutoff` | `"+10"` | Determines the current century while using
    the year representation; numbers less than this are deemed to be in the current
    century. |'
  prefs: []
  type: TYPE_TB
- en: '| `showAnim` | `"show"` | Sets the animation used when the datepicker widget
    is displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `showButtonPanel` | `false` | Shows a panel of buttons for the datepicker
    widget, consisting of close and current links. |'
  prefs: []
  type: TYPE_TB
- en: '| `showCurrentAtPos` | `0` | Sets the position of the current month in multiple-month
    datepickers |'
  prefs: []
  type: TYPE_TB
- en: '| `showOn` | `"focus"` | Sets the event that triggers displaying the datepicker.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `showOptions` | `{}` | An object literal containing options to control the
    configured animation. |'
  prefs: []
  type: TYPE_TB
- en: '| `showOtherMonths` | `false` | Shows the last and first days of the previous
    and next months. |'
  prefs: []
  type: TYPE_TB
- en: '| `showWeek` | `false` | Displays a column showing the week of the year. The
    week is determined using the `calculateWeek` option. |'
  prefs: []
  type: TYPE_TB
- en: '| `stepMonths` | `1` | Sets how many months are navigated with the previous
    and next links. |'
  prefs: []
  type: TYPE_TB
- en: '| `weekHeader` | `"Wk"` | Sets the text to display for the week of the year
    column heading. |'
  prefs: []
  type: TYPE_TB
- en: '| `yearRange` | `"-10:+10"` | Specifies the range of years in the year dropdown.
    |'
  prefs: []
  type: TYPE_TB
- en: We will explore some of these options in detail throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using the basic options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the final `<script>` element in `datepicker1.html` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker2.html`. The following screenshot shows how the widget
    will look after configuring these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the basic options](img/2209OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We've used a number of options in this example simply because there are so many
    options available. The appearance of the initial page, before the datepicker is
    even shown, can be changed using the `appendText` option. This adds the specified
    text string using a `<span>` element directly after the `<input>` field, which
    is associated with the picker. This helps visitors to clarify the format that
    will be used for the date.
  prefs: []
  type: TYPE_NORMAL
- en: For styling purposes, we can target the new `<span>` element using the `.ui-datepicker-append`
    class name.
  prefs: []
  type: TYPE_NORMAL
- en: The `defaultDate` option sets which date is highlighted in the datepicker when
    it opens initially and the `<input>` element is empty. We've used the relative
    `+5` string in this example, so that when the datepicker widget opens initially,
    the date five days from the current date is selected. Pressing the *Enter* key
    on the keyboard will select the highlighted date.
  prefs: []
  type: TYPE_NORMAL
- en: Along with a relative string, we can also supply `null` as the value of `defaultDate`
    to set it to the current date (today subjectively), or a standard JavaScript date
    object.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the previous screenshot, the styling of the datepicker widget
    date for the current date is different from the styling used to show the default
    date. This will vary between themes, but for reference, the current date is shown
    in bold against a light shade (orange), while the selected date has a darker border
    than normal dates with the default theme.
  prefs: []
  type: TYPE_NORMAL
- en: Once a date has been selected, subsequent openings of the datepicker widget
    will show the selected date as the default date, which again has different styling
    (a preselected date with the redmond theme will be light blue).
  prefs: []
  type: TYPE_NORMAL
- en: By setting the `showOtherMonths` option to `true`, we've added grayed-out (nonselectable)
    dates from the previous and next months to the empty squares that sit at the beginning
    and end of the date grid, before and after the current month. These are visible
    in the previous screenshot and are rendered in a much lighter color than the selectable
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: Minimum and maximum dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the datepicker will go forward or backward infinitely, there are
    no upper or lower boundaries. If we want to restrict the selectable dates to a
    particular range, we can do it easily using the `minDate` and `maxDate` options.
    Change the configuration object in `datePicker2.html` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker3.html`. In this example, we supply a standard, unmodified
    JavaScript date object to the `minDate` option, which will set the minimum date
    to the current date. This will make any dates in the past unselectable.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `maxDate` option, we use a relative text string of `+10`, which will
    make only the current date and the next 10 dates selectable. You can see how these
    options affect the appearance of the widget in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Minimum and maximum dates](img/2209OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `minDate` and `maxDate` options can also take strings such as `+6w`, `-10m`,
    or `1y`, which represent weeks, months, and years respectively. You can find more
    details on how to set these options at [http://api.jqueryui.com/datepicker/#option-minDate](http://api.jqueryui.com/datepicker/#option-minDate)
    and [http://api.jqueryui.com/datepicker/#option-maxDate](http://api.jqueryui.com/datepicker/#option-maxDate).
  prefs: []
  type: TYPE_NORMAL
- en: Changing the elements in the datepicker UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The datepicker API exposes a number of options directly related to adding or
    removing additional UI elements within the datepicker. To show `<select>` elements
    that allow the visitor to choose the month and year, we can use the `changeMonth`
    and `changeYear` configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker4.html`. Using the month and year `<select>` elements,
    gives the user a much quicker way to navigate to dates that may be far in the
    past or future. The following screenshot shows how the widget will appear with
    these two options enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the elements in the datepicker UI](img/2209OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, the year select box will include the previous and next 10 years,
    covering a total range of 20 years. We can navigate further than this using the
    previous/next arrow links, but if we know beforehand that visitors may be choosing
    dates very far in the past or future, we can change the range of years using the
    `yearRange` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker5.html`. This time when we run the page, we should find
    that the year range now covers 50 years in total.
  prefs: []
  type: TYPE_NORMAL
- en: Another change we can make to the UI of the datepicker is to enable the button
    panel, which adds two buttons to the footer of the widget. Let's see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the configuration object in `datepicker5.html`, so that it appears as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker6.html`. The buttons added to the foot of the widget
    appear exactly as the buttons in a dialog widget, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the elements in the datepicker UI](img/2209OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Today** button will instantly navigate the datepicker back to the month
    showing the current date, while the **Done** button will close the widget without
    selecting a date.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could also change the **Today** button so that it goes to the selected date
    instead of the current date using the `gotoCurrent` option; we can achieve this
    by adding it into the configuration object for the widget, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you select a date, then scroll through a number of months, you can then return
    to the selected date by clicking on the **Today** button.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a trigger button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the datepicker is opened when the `<input>` element that it is
    associated with receives focus. However, we can change this very easily, so that
    the datepicker opens when a button is clicked instead. The most basic type of
    `<button>` can be enabled with just the `showOn` option. Change the configuration
    object in `datePicker6.html`, so that it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker7.html`. Setting the `showOn` option to `true` in our
    configuration object will automatically add a simple `<button>` element directly
    after the associated `<input>` element. We can also set this option to both, so
    that it opens when the `<input>` is focused as well as when the `<button>` is
    clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The datepicker will now open only when the `<button>` is clicked, rather than
    when the `<input>` is focused. This option also accepts the string value "both",
    which opens the widget when the `<input>` is focused and when the `<button>` is
    clicked. The new `<button>` is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a trigger button](img/2209OS_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The default text shown on the `<button>` (an ellipsis) can easily be changed
    by providing a new string as the value of the `buttonText` option; change the
    previous configuration object to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker8.html`. Now, the text on the `<button>` should match
    the value that we set as the `buttonText` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a trigger button](img/2209OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of using text as the label of the `<button>` element, we can use an
    image. This is configured using the `buttonImage` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker9.html`. The value of the `buttonImage` option is a
    string, consisting of the path to the image that we'd like to use on the button.
    Notice that we also set the `buttonText` option in this example too. The reason
    for this is that the value of the `buttonText` option is automatically used as
    the `title` and `alt` attributes of the `<img>` element, that is, added to the
    `<button>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our trigger button should now look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a trigger button](img/2209OS_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we've deliberately not styled the button at this point, and
    concentrated on just adding a logo. You could however style it using jQuery UI,
    as we will see in [Chapter 8](ch08.html "Chapter 8. The Button and Autocomplete
    Widgets"), *The Button and Autocomplete Widgets*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t need to use a button at all if we don''t want to; we can replace
    the `<button>` element with an `<img>` element instead. Change the configuration
    object in `datePicker9.html`, so that it appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker10.html`. This should give you a nice image-only button,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a trigger button](img/2209OS_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring alternative animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The datepicker widget comes with an attractive built-in opening animation that
    makes the widget appear to grow from nothing to full size. Its flexible API also
    exposes several options related to animations. These are the `duration`, `showAnim`,
    and `showOptions` configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest animation configuration that we can set is the speed at which the
    widget opens and closes. To do this, all we have to do is change the value of
    the `duration` option. This option requires a simple string that can take a string
    value of either `slow`, `normal` (the default), or `fast`, or a number representing
    a duration in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the configuration object in `datePicker10.html` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Save this variation as `datePicker11.html`. When we run this page in a browser,
    we should find that the opening animation is visibly faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with changing the speed of the animation, we can also change the animation
    itself using the `showAnim` option. The default animation used is a simple show
    animation, but we can change this so that it uses any of the other show/hide effects
    included with the library (refer to [Chapter 14](ch14.html "Chapter 14. UI Effects"),
    *UI Effects*). Change the configuration object from the previous example to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker12.html`. We also need to use two new `<script>` resources
    to use alternative effects. These are the `jquery.ui.effect.js` and the source
    file of the effect we wish to use, in this example, `jquery.ui.effect-drop.js`.
    We''ll look at both of these effects in more detail in [Chapter 14](ch14.html
    "Chapter 14. UI Effects"), *UI Effects*, but they are essential for this example
    to work. Make sure you add these to the file, directly after the source file for
    the datepicker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Our simple configuration object configures the animation to drop using the `showAnim`
    option, and sets the `direction` option of the effect using `showOptions`, which
    is required due to the datepicker's absolute positioning. When you now run this
    example, the datepicker should drop down into position instead of opening. Other
    effects can be implemented in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying multiple months
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, all of our examples have looked at single-month datepickers, where
    only one month was shown at a time. However, we can easily adjust this to show
    a different number of months, if we wish using a couple of configuration options.
    Remove the effect source files before the configuration object in `datePicker12.html`,
    and change the configuration object so that it appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker13.html`. The `numberOfMonths` option takes an integer
    representing the number of months that we would like to be displayed in the widget
    at any point. Our datepicker should now appear like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying multiple months](img/2209OS_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no upper limit to the number of months that will be displayed; however,
    the performance of the widget decreases with each additional month shown. There
    is also a noticeable lag between focusing the `<input>` and the widget being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the individual month panels are floated side-by-side, and due to their
    size, they will soon overflow the viewport causing a horizontal scroll bar to
    appear. However, as soon as the scroll bar is used, the datepicker will close,
    making any months that go beyond the boundary of the screen unusable. For these
    reasons, it's best to keep the number of months displayed to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: There are several other configuration options related to multiple-month datepickers.
    The `stepMonths` option controls how many months are changed when the previous
    or next links are used.
  prefs: []
  type: TYPE_NORMAL
- en: The default value of `stepMonths` is `1`, so in our previous example, the widget
    starts with the current month displayed first and the next two months after it.
    Each time the **Previous** or **Next** icons are clicked; the panels move one
    space left or right.
  prefs: []
  type: TYPE_NORMAL
- en: If we set `stepMonths` to `3`, the same as the number of months shown, each
    month will move three spaces left or right when the previous or next links are
    clicked, so entirely new panels are shown on each click.
  prefs: []
  type: TYPE_NORMAL
- en: The `showCurrentAtPos` option specifies where the current month is shown when
    the datepicker is displayed. In our previous example, the current month is shown
    as the first month panel. Each month panel has a zero-based index number, so if
    we want the current month to be in the middle of the widget, we would set this
    option to `1` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the datepicker vertically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, it was noted that the use of multiple months should
    be kept to a minimum, as we cannot change the styling used for the width, if the
    calendar goes too far to the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can mitigate this to an extent, by adapting the `numberofMonths` option.
    It takes two attributes: the first is to control the number of months we display,
    and the second is for the number of columns that should be used. If we set the
    example from `datepicker13.html` accordingly, this is how it could look when set
    to show two months in a single column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the datepicker vertically](img/2209OS_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To achieve this effect, all we need to do is to change the configuration object
    in `datepicker13.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that the datepicker now only displays two calendar months, and
    that these are now in a vertical format. We could then use a little jQuery to
    get the size of the window, and set the `numberOfMonths` attribute depending on
    the size returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It isn't possible to achieve the same effect manually using CSS; while most
    styles can be altered, the container width is hardcoded into the library and cannot
    be altered.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the date format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `dateFormat` option is one of the localization options at our disposal
    for advanced datepicker locale configuration. Setting up this option allows you
    to quickly and easily set the format of selected dates (as displayed in the `<input>`)
    using a variety of short-hand references. The format of dates can be a combination
    of any of the following characters (they are case sensitive):'
  prefs: []
  type: TYPE_NORMAL
- en: '**d**: This is the day of month (single digit where applicable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dd**: This is the day of month (two digits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**m**: This is the month of year (single digit where applicable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mm**: This is the month of year (two digits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**y**: This is the year (two digits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**yy**: This is the year (four digits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**D**: This is the short day name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DD**: This is the full day name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**M**: This is the short month name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MM**: This is the long month name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''...''**: This is any literal text string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**@**: This is the UNIX timestamp (milliseconds since January 1, 1970)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use these shorthand codes to quickly configure our preferred date format,
    as in the following example. Change the configuration object in `datePicker13.html`
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Save the new file as `datePicker14.html`. We use the `dateFormat` option to
    specify a string containing the shorthand date code for our preferred date format.
    The format we set is the day of the month (using a single digit if possible) with
    `d`, the full name of the month with `MM`, and the full four-digit year with `yy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When dates are selected and added to the associated `<input>`, they will be
    in the format specified in the configuration object, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the date format](img/2209OS_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While using a string as the value of this option to configure dates, we can
    also specify whole strings of text. However, if we do and any letters in the string
    are those used as shorthand, they will need to be escaped using single quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to add the string `Selected:` to the start of the date, we would
    need to use the string `Selecte''d'':` to avoid having the lowercase `d` picked
    up as the short day of month format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this change as `datePicker15.html`. Notice how we escape the lowercase
    `d` in the string `Selected` by wrapping it in single quotes. Now when a date
    is selected, our text string is prefixed to the formatted date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the date format](img/2209OS_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Styling the <input> tag**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may want to add `width: 15em` as a style for the input box, so you can
    see the whole text clearly. I''ve added this into the code file available in the
    download that accompanies this book.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also a number of built-in preconfigured date formats that correspond
    to common standards or RFC notes. These formats are added to the components as
    constants and can be accessed via the `$.datepicker` object. As an example, let''s
    format the date according to the ATOM standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker16.html`. When a date is selected in this example,
    the value entered into the `<input>` should be in the format as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the date format](img/2209OS_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ATOM format or RFC 3339/ISO 8601 as it is technically known, is an international
    standard designed to provide a clear format for dates and times to avoid misinterpretation,
    especially when data is transferred between countries that use different date
    formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete set of predefined date formats is listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option value | Shorthand | Formatted as… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.ATOM` | `"yy-mm-dd"` | **2013-07-25** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.COOKIE` | `"D, dd M y"` | **Wed, 25 Jul 2013** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.ISO_8601` | `"yy-mm-dd"` | **2013-07-25** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.RFC_822` | `"D, d M y"` | **Wed, 25 Jul 11** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.RFC_850` | `"DD, dd-M-y"` | **Wednesday, 25-Jul-11** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.RFC_1036` | `"D, d M y"` | **Wed, 25 Jul 11** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.RFC_1123` | `"D, d M yy"` | **Wed, 25 Jul 2013** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.RFC_2822` | `"D, d M yy"` | **Wed, 25 Jul 2013** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.RSS` | `"D, d M y"` | **Wed, 25 Jul 13** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.TIMESTAMP` | `@ (UNIX timestamp)` | **1302649200000** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.datepicker.W3C` | `"yy-mm-dd"` | **2013-07-25** |'
  prefs: []
  type: TYPE_TB
- en: Updating an additional input element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There may be times when we want to update two `<input>` elements with the selected
    date, perhaps to show a different date format. The `altField` and `altFormat`
    options can be used to cater to this requirement. Add a second `<input>` element
    to the page in `datepicker16.html` with an `id` attribute of `dateAltDisplay`,
    and then change the configuration object to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker17.html`. The `altField` option accepts a standard
    jQuery selector as its value, and allows us to select the additional `<input>`
    element that is updated when the main `<input>` is updated. The `altFormat` option
    can accept the same formats as the `dateFormat` option. The following screenshot
    shows how the page should appear, once a date has been selected using the datepicker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating an additional input element](img/2209OS_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the date format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While using the datepicker widget, you may have noticed that dates returned
    programmatically through the `getDate` method (see the *Datepicking methods* section)
    are in the default GMT date and time standard. In order to change the format of
    the date returned by the API, the `$.datepicker.formatDate()` utility method should
    be used. Let's take a look at how we can use this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `datePicker17.html`, alter the date configuration object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker18.html`. We need to add an additional CSS style rule,
    so that we can see the results of selecting a date within the widget. Add the
    following to the `<head>` of our file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If we preview the results in a browser, you will see that the date format used
    in the initial `<input>` field is set using the `dateFormat` attribute in the
    configuration object; this was set to `dd-mm-yy`. In the `onSelect` event handler,
    we use `$.datepicker.formatDate` to change the selected date to that shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the date format](img/2209OS_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Localizing the datepicker widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the options already listed, there are also a range of localization
    options. They can be used to provide custom locale support in order to display
    a datepicker with all the text shown in an alternative language, or to change
    the default values of words in English.
  prefs: []
  type: TYPE_NORMAL
- en: 'Those options that are used specifically for localization are listed in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `closeText` | `"Close"` | Text to display on the close button. |'
  prefs: []
  type: TYPE_TB
- en: '| `currentText` | `"Today"` | The text to display for the current day link.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dateFormat` | `"mm/dd/yy"` | The format selected dates should take when
    added to the `<input>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `dayNames` | `["Sunday", "Monday","Tuesday",``"Wednesday", "Thursday", "Friday","Saturday"]`
    | An array of names of days in a week. |'
  prefs: []
  type: TYPE_TB
- en: '| `dayNamesMin` | `["Su", "Mo", "Tu","We", "Th", "Fr", "Sa"]` | An array of
    two-letter names of days in a week. |'
  prefs: []
  type: TYPE_TB
- en: '| `dayNamesShort` | `["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]` | An
    array of abbreviated names of days in a week. |'
  prefs: []
  type: TYPE_TB
- en: '| `firstDay` | `0` | Specify the first column of days in the datepicker. |'
  prefs: []
  type: TYPE_TB
- en: '| `isRTL` | `false` | Set the calendar to right-to-left format. |'
  prefs: []
  type: TYPE_TB
- en: '| `monthNames` | `["January", "February",``"March", "April",``"May", "June",
    "July,``"August", "September",``"October", "November",``"December"]` | An array
    of month names. |'
  prefs: []
  type: TYPE_TB
- en: '| `monthNamesShort` | `["Jan", "Feb", "Mar",``"Apr", "May", "Jun",``"Jul",
    "Aug", "Sep",``"Oct", "Nov", "Dec"]` | An array of abbreviated month names. |'
  prefs: []
  type: TYPE_TB
- en: '| `nextText` | `"Next"` | Text to display on the next link. |'
  prefs: []
  type: TYPE_TB
- en: '| `prevText` | `"Prev"` | Text to display on the previous link. |'
  prefs: []
  type: TYPE_TB
- en: '| `showMonthAfterYear` | `false` | Shows the month after the year in the header
    of the widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `yearSuffix` | `""` | An additional text string to display after the year
    in the month header. |'
  prefs: []
  type: TYPE_TB
- en: A wide range of different translations have already been provided and reside
    within the `i18n` folder in the `development-bundle/ui` directory. Each language
    translation has its own source file and to change the default language, all we
    have to do is include the source file of the alternative language.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `datePicker17.html`, add the following new `<script>` element directly after
    the link to `jquery.ui.datepicker.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `altField` and `altFormat` attributes of the configuration object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datePicker19.html` and view the results in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Localizing the datepicker widget](img/2209OS_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With just a single link to one new resource, we've changed all of the visible
    text in the datepicker to an alternative language, and we don't even need to set
    any configuration options. If we wanted to truly internationalize the datepicker,
    there is even a roll-up file containing all of the alternative languages that
    we can use, and which avoids the need to include multiple language files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `datepicker19.html`, alter the link for `jquery.ui.datepicker-fr.js` in
    the `<head>` to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, change the configuration object for datepicker as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `datepicker20.html`. If we preview the results in our browser,
    you will see that it displays the widget in Arabic. We''ve used datepicker''s
    option attribute to set `$.datepicker.regional` to `ar`, which is jQuery UI''s
    code for the Arabic language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Localizing the datepicker widget](img/2209OS_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will revisit the localization roll-up file later in this chapter, in the
    *Localizing a datepicker dynamically* example.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing custom localization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Custom localization is also very easy to implement. This can be done using a
    standard configuration object containing the configured values for the options
    from the previous table. In this way, any alternative language not included in
    the roll-up file can be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to implement a `Lolcat` datepicker, remove the existing configuration
    object of `datePicker20.html`, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save this change as `datePicker21.html`. Most of the options are used to provide
    simple string substitutions. However, the `monthNames`, `monthNamesShort`, `dayNames`,
    `dayNamesShort`, and `dayNamesMin` options require arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the `dayNamesMin` option and other day-related arrays should begin
    with `Sunday` (or the localized equivalent); here, we''ve set `Monday` to appear
    first in this example using the `firstDay` option. Our datepicker should now appear
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing custom localization](img/2209OS_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those of you curious about the term Lolcat, it is a term dating from 2006,
    but based on a series of images created in the early twentieth century. It is
    used to signify a series of cat images that had (albeit grammatically incorrect
    or idiosyncratic) phrases, intended to create humor. You can learn more about
    this unique form of humor at [http://en.wikipedia.org/wiki/Lolcat](http://en.wikipedia.org/wiki/Lolcat).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing callbacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final set of configuration options is related to the event model exposed
    by the widget. It consists of a series of callback functions that we can use to
    specify the code to be executed at different points during an interaction with
    the datepicker.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Fired when… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeShow` | The datepicker is about to open. |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeShowDay` | Each individual date is rendered in the datepicker. Can
    be used to determine whether the date should be selectable or not. |'
  prefs: []
  type: TYPE_TB
- en: '| `onChangeMonthYear` | The current month or year changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `onClose` | The datepicker is closed. |'
  prefs: []
  type: TYPE_TB
- en: '| `onSelect` | A date is selected. |'
  prefs: []
  type: TYPE_TB
- en: To highlight how useful these callback properties are, we can extend the previous
    internationalization example to create a page that allows visitors to choose any
    available language found in the `i18n` roll-up file.
  prefs: []
  type: TYPE_NORMAL
- en: Localizing a datepicker dynamically via rollup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier in the book, we took a brief look at how you can use the roll-up file
    to change the language displayed by the datepicker. This avoids the need to reference
    multiple language files, which helps reduce HTTP requests to the server; the downside
    though is that the datepicker widget will always be displayed in the language
    that has been hardcoded into the widget's attributes.
  prefs: []
  type: TYPE_NORMAL
- en: We can change that though. Let's take a look at how you can use the `beforeShow`
    callback by adding a language selection dropdown that displays the datepicker
    in whichever language is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `datePicker21.html`, add the following new `<select>` box to the page with
    the following `<option>` elements. For reasons of brevity, I''ve only included
    a few here; you can see the full list in the code download that accompanies this
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, link to the `i18n.js` roll-up file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now change the final `<script>` element so that it appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Save this file as `datePicker22.html`. We use the `beforeShow` callback to specify
    a function that is executed each time the datepicker is displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Within this function, we obtain the `id` attribute of the selected `<option>`
    element, and then pass this to the `$.datepicker.regional` option. This option
    is set using the `$.datepicker.setDefaults()` utility method.
  prefs: []
  type: TYPE_NORMAL
- en: When the page first loads, the `<select>` element won't have a selected `<option>`
    child, and because of the order of the `i18n` roll-up file, the datepicker will
    be set to Taiwanese. In order to set it to default English, we can set the regional
    utility to an empty string after the datepicker has been initialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the datepicker after an alternative language
    has been selected in the `<select>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Localizing a datepicker dynamically via rollup](img/2209OS_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can take this a step further; you may have noticed that the language doesn't
    change until you click inside the `<input>` field to display the widget.
  prefs: []
  type: TYPE_NORMAL
- en: The code works, but feels a little clunky; instead, if we make a change to how
    we display the widget, we can remove the need to click inside the `<input>` field.
    I've included an example of how to do this in the code download, as `datepickerXX.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the utility methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We used one of the utility methods available in a datepicker in the previous
    example, `setDefaults` is used to set configuration options on all datepicker
    instances. In addition to this, there are several other utility methods that we
    can use; these are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Utility | Used to… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `formatDate` | Transform a `date` object into a string in a specified format.While
    using the `dateFormat` option, dates are returned in this specified format using
    the `formatDate` method. This method accepts three arguments—the format to convert
    the date to (see `dateFormat` in configurable options of the picker), the `date`
    object to convert, and an optional configuration object containing additional
    settings. The following options can be provided: `dayNamesShort`, `dayNames`,
    `monthNamesShort`, and `monthNames`. |'
  prefs: []
  type: TYPE_TB
- en: '| `iso8601Week` | Return the week number that a specified date falls on according
    to the ISO 8601 date and time standard. This method accepts a single argument—the
    date to show the week number. |'
  prefs: []
  type: TYPE_TB
- en: '| `noWeekends` | Make weekend dates unselectable. It can be passed to the `beforeShowDay`
    event. |'
  prefs: []
  type: TYPE_TB
- en: '| `parseDate` | Do the opposite of `formatDate`, converting a formatted date
    string into a date object. It also accepts three arguments—the expected format
    of the date to parse, the date string to parse, and an optional setting object
    containing the following options: `shortYearCutoff`, `dayNamesShort`, `dayNames`,
    `monthNamesShort`, and `monthNames`. |'
  prefs: []
  type: TYPE_TB
- en: '| `regional` | Set the language of the datepicker. |'
  prefs: []
  type: TYPE_TB
- en: '| `setDefaults` | Set configuration options on all datepickers. This method
    accepts an object literal containing the new configuration options. |'
  prefs: []
  type: TYPE_TB
- en: All of these methods are called on the singleton instance of the `$.datepicker`
    manager object, which is created automatically by the widget on initialization
    and used to interact with instances of the datepicker. Irrespective of the number
    of datepickers that have been created on the page as jQuery objects, they will
    always reference the properties and methods of the first instance of the datepicker
    widget created on that page.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the datepicker methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with the wide range of configuration options at our disposal, there are
    also a number of useful methods defined that make working with the datepicker
    a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the shared API methods discussed in [Chapter 1](ch01.html "Chapter 1. Introducing
    jQuery UI"), *Introducing jQuery UI*, such as `destroy`, `disable`, `enable`,
    `option`, and `widget`. The datepicker API also exposes the following unique methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Used to… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `dialog` | Open the datepicker in a dialog widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `getDate` | Get the currently selected date. |'
  prefs: []
  type: TYPE_TB
- en: '| `hide` | Programmatically close a datepicker. |'
  prefs: []
  type: TYPE_TB
- en: '| `isDisabled` | Determine whether a datepicker is disabled. |'
  prefs: []
  type: TYPE_TB
- en: '| `refresh` | Redraw the datepicker. |'
  prefs: []
  type: TYPE_TB
- en: '| `setDate` | Programmatically select a date. |'
  prefs: []
  type: TYPE_TB
- en: '| `show` | Programmatically show a datepicker. |'
  prefs: []
  type: TYPE_TB
- en: Let's take a look at some of these methods in more detail, beginning with selecting
    dates programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a date programmatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may be times (such as on dynamic, client-server sites), when we want to
    be able to set a particular date from within our program logic, without the visitor
    using the datepicker widget in the usual way. Let's look at a basic example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `<select>` element in `datePicker22.html` and directly after the
    `<input>` element add the following `<button>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now change the final `<script>` element so that it appears like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker23.html`. The `setDate` function accepts a single argument,
    which is the date to set. As with the `defaultDate` configuration option, we can
    supply a relative string (as we do in this example) or a date object.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see some of the options available to set the date object at [http://api.jqueryui.com/datepicker/#utility-formatDate](http://api.jqueryui.com/datepicker/#utility-formatDate).
  prefs: []
  type: TYPE_NORMAL
- en: If we're forced to work with strings as the source for our datepicker, we can
    easily convert them to a date object; to achieve this, we can use one of the many
    date JavaScript libraries available such as `Moment.js`. I've included a simple
    example of how to use this library to generate our date object in the code download
    that accompanies this book.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the datepicker in a dialog box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dialog` method produces the same highly usable and effective datepicker
    widget, but it displays it in a floating dialog box. The method is easy to use,
    although it affects the placement of the datepicker dialog; the dialog will appear
    disconnected from the date input field, as we shall see.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `<button>` from the page and change the final `<script>` element
    in `datePicker23.html` to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Save this as `datePicker24.html`. First we define a function called `updateDate`.
    This function will be called whenever a date is selected in the datepicker. All
    we do within this function is to assign the date that is selected, which will
    be passed to the function automatically to our `<input>` element on the page.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `focus` event to call the `dialog` method, which takes two arguments.
    In this example, we've supplied `null` as the first argument, so the datepicker
    defaults to the current date.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument is a callback function to execute when a date is selected,
    which is mapped to our `updateDate` function.
  prefs: []
  type: TYPE_NORMAL
- en: We can also supply additional third and fourth arguments; the third is the configuration
    object for the datepicker, and the fourth is used to control the position of the
    dialog containing the datepicker. By default, it will render the dialog in the
    center of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about how to configure these options at [http://api.jqueryui.com/datepicker/#method-dialog](http://api.jqueryui.com/datepicker/#method-dialog).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an AJAX-enabled datepicker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our final datepicker example, we'll work a little magic into the mix and
    create a datepicker, which will communicate with a remote server to see if there
    are any dates that cannot be selected. These dates will then be styled as such
    within the datepicker widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `<body>` of `datepicker24.html`, so that it contains the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The first part of our script initially declares two empty arrays, and then performs
    a request to obtain the JSON object from a PHP file. The JSON object contains
    a single option called dates. The value of this option is an array, where each
    item is also an object.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these subobjects contain month and day properties, representing one
    date that should be made unselectable. The months or days array are populated
    with the values from the JSON object for later use in the script.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define the `noWeekendsOrDates` callback function that is invoked on
    the `beforeShowDay` event. This event occurs once for each of the 35 individual
    day squares in the datepicker. Even the empty squares are included!
  prefs: []
  type: TYPE_NORMAL
- en: The date of each day square is passed to this function, which must determine
    first if the selected date is not a weekend using jQuery UI's `$.datepicker.noWeekends()`
    function. If yes, it is automatically passed to the `disableDates` function, otherwise
    it is marked as being disabled.
  prefs: []
  type: TYPE_NORMAL
- en: If the value is passed to the `disableDates` function, it is passed the date
    of each square sent to it from the `noWeekendsOrDates` function, and must return
    an array containing up to two items.
  prefs: []
  type: TYPE_NORMAL
- en: The first is a Boolean indicating whether the day is selectable, and the second
    is optionally a class name to give the date. Our function loops through each item
    in our months and days arrays to see if any of the dates passed to the callback
    function match the items in the arrays. If both the month and day items match
    a date, the array returns with `false` and a custom class name as its items. If
    the date does not match, we return an array containing `true` to indicate that
    the day is selectable. This allows us to specify any number of dates that cannot
    be selected in the datepicker.
  prefs: []
  type: TYPE_NORMAL
- en: Finally we define a configuration object for the datepicker. The properties
    of the object are simply the callback function to make the dates specified in
    the JSON object unselectable, and the `minDate` option, which will be set to the
    relative value `+1`, as we don't want people to select dates in the past, or the
    current day.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the HTML page, we''ll also need a little custom styling. In
    a new page in your editor, create the following stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `datepickerTheme.css` in the `css` folder. We use PHP to provide
    the JSON object in response to the request made by our page. If you don''t want
    to install and configure PHP on your web server, you can use the file that I have
    placed at the URL specified in the example. For anyone that is interested, the
    PHP used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This can be saved as `bookedDates.php` in the main `jqueryui` project folder.
  prefs: []
  type: TYPE_NORMAL
- en: The pre-booked dates are just hardcoded into the PHP file. Again, in a proper
    implementation, you'd probably need a more robust way of storing these dates,
    such as in a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the page in a browser and open the datepicker, the dates specified
    by the PHP file should be styled according to our `preBooked` class, and should
    also be completely nonresponsive, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing an AJAX-enabled datepicker](img/2209OS_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the datepicker widget that is supported by one
    of the biggest APIs in the jQuery UI library. This gives us a huge number of options
    to work with and methods to receive data from. We first looked at the default
    implementation and how much behavior is added to the widget automatically.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at the rich API exposed by the datepicker, which includes more configurable
    options than any other component. We also saw how we can use the utility functions
    that are unique to the datepicker manager object.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how easy the widget makes implementing internationalization. We also
    saw that there are 34 additional languages the widget has been translated into.
    Each of these is packed into a module that is easy to use in conjunction with
    the datepicker for adding support for alternative languages. We also saw how we
    create our own custom language configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We covered some of the events that are fired during a datepicker interaction,
    and looked at the range of methods available for working with and controlling
    the datepicker from our code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at two of the more recent additions to the library,
    the button widget and the autocomplete widget.
  prefs: []
  type: TYPE_NORMAL
