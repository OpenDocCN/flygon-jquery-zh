["```js\n// define the namespace\nvar cocktail = {};\n\n// add the function shake to the namespace\ncocktail.shake = function(){...}\n\n// add the function stir to the namespace\ncocktail.stir = function(){...}\n```", "```js\nvar cocktail = {\n\n    // add the function shake to the namespace\n   shake: function(){...},\n\n   // add the function stir to the namespace\n   stir: function(){...}\n};\n```", "```js\n$(\"#mygame\").append(\"<div id='sprite1'>\");\n$(\"#sprite1\").css(\"backgroundImage\",\"url('spritesheet1.png')\");\n```", "```js\n/**\n * This function sets the current frame. \n * -divId: the Id of the div from which you want to change the\n *         frame\n * -frameNumber: the frame number\n * -frameDimension: the width of a frame\n **/\ngameFramework.setFrame = function(divId,frameNumber, frameDimension) {\n   $(\"#\"+divId)\n      .css(\"bakgroundPosition\", \"\" + frameNumber * frameDimension + \"px 0px\");\n}\n```", "```js\nvar totalNumberOfFrame = 4;\nvar frameNumber = 0;\nsetInterval(function(){\n gameFramework.setFrame(\"sprite1\",frameNumber, 64);\n   frameNumber = (frameNumber + 1) % totalNumberOfFrame;\n}, 60);\n```", "```js\n/**\n * Animation Object.\n **/\ngf.animation = function(options) {\n    var defaultValues = {\n        url : false,\n        width : 64,\n        numberOfFrames : 1,\n        currentFrame : 0,\n        rate : 30\n    };\n    $.extend(this, defaultValues, options);\n}\n```", "```js\nvar firstAnim = new gameFramework.animation({\n   url: \"spritesheet1.png\",\n   numberOfFrames: 4,\n   rate: 60\n});\n```", "```js\ngf.setFrame = function(divId, animation) {\n    $(\"#\" + divId)\n        .css(\"bakgroundPosition\", \"\" + animation.currentFrame * animation.width + \"px 0px\");\n}\n```", "```js\ngf.animationHandles = {};\n\n/**\n * Sets the animation for the given sprite.\n **/\ngf.setAnimation = function(divId, animation, loop){\n    if(gf.animationHandles[divId]){\n        clearInterval(gf.animationHandles[divId]);\n    }\n    if(animation.url){\n        $(\"#\"+divId).css(\"backgroundImage\",\"url('\"+animation.url+\"')\");\n    }\n    if(animation.numberOfFrame > 1){\n        gf.animationHandles[divId] = setInterval(function(){\n            animation.currentFrame++;\n            if(!loop && currentFrame > animation.numberOfFrame){\n                clearInterval(gf.animationHandles[divId]);\n                gf.animationHandles[divId] = false;\n            } else {\n                animation.currentFrame %= animation. numberOfFrame;\n                gf.setFrame(divId, animation);\n            }\n        }, animation.rate);\n    }\n}\n```", "```js\n$(\"#mygame\").css(\"position\", \"relative\").append(\"<div id='sprite1' style='position: absolute'>\");\n```", "```js\n/**\n * This function adds a sprite the div defined by the first argument\n **/\ngf.addSprite = function(parentId, divId, options){\n    var options = $.extend({\n        x: 0,\n        y: 0,\n        width: 64,\n        height: 64\n    }, options);\n\n    $(\"#\"+parentId).append(\"<div id='\"+divId+\"' style='position: absolute; left:\"+options.x+\"px; top: \"+options.y+\"px; width: \"+options.width+\"px ;height: \"+options.height+\"px'></div>\");\n}\n```", "```js\n/**\n * This function sets or returns the position along the x-axis.\n **/\ngf.x = function(divId,position) {\n    if(position) {\n        $(\"#\"+divId).css(\"left\", position); \n    } else {\n        return parseInt($(\"#\"+divId).css(\"left\")); \n    }\n}\n/**\n * This function sets or returns the position along the y-axis.\n **/\ngf.y = function(divId,position) {\n    if(position) {\n        $(\"#\"+divId).css(\"top\", position); \n    } else {\n        return parseInt($(\"#\"+divId).css(\"top\")); \n    }\n}\n```", "```js\ngf.imagesToPreload = [];\n\n/**\n * Add an image to the list of image to preload\n **/\ngf.addImage = function(url) {\n    if ($.inArray(url, gf.imagesToPreload) < 0) {\n        gf.imagesToPreload.push();\n    }\n    gf.imagesToPreload.push(url);\n};\n```", "```js\n/**\n * Start the preloading of the images.\n **/\ngf.startPreloading = function(endCallback, progressCallback) {\n    var images = [];\n    var total = gf.imagesToPreload.length;\n\n    for (var i = 0; i < total; i++) {\n        var image = new Image();\n        images.push(image);\n        image.src = gf.imagesToPreload[i];\n    }\n    var preloadingPoller = setInterval(function() {\n        var counter = 0;\n        var total = gf.imagesToPreload.length;\n        for (var i = 0; i < total; i++) {\n            if (images[i].complete) {\n                counter++;\n            }\n        }\n        if (counter == total) {\n            //we are done!\n            clearInterval(preloadingPoller);\n            endCallback();\n        } else {\n            if (progressCallback) {\n                count++;\n                progressCallback((count / total) * 100);\n            }\n        }\n    }, 100);\n}; \n```", "```js\ngf.animation = function(options) {\n    var defaultValues = {\n        url : false,\n        width : 64,\n        numberOfFrames : 1,\n        currentFrame : 0,\n        rate : 30\n    };\n    $.extend(this, defaultValues, options);\n    if(this.url){\n        gf.addImage(this.url);\n    }\n}\n```", "```js\n$(function() {\n    var backgroundAnim = new gf.animation({\n        url : \"back.png\"\n    });\n    var networkPacketsAnim = new gf.animation({\n        url : \"packet.png\"\n    });\n    var bugsAnim = new gf.animation({\n        url : \"bug.png\"\n    });\n    var playerAnim = new gf.animation({\n        url : \"player.png\"\n    });\n\n    var initialize = /* we will define the function later */\n\n   $(\"#startButton\").click(function() {\n         gf.startPreloading(initialize);\n       });\n});\n```", "```js\nvar initialize = function() {\n    $(\"#mygame\").append(\"<div id='container' style='display: none; width: 640px; height: 480px;'>\");\n    gf.addSprite(\"container\",\"background\",{width: 640, height: 480});\n    gf.addSprite(\"container\",\"packets1\",{width: 640, height: 40, y: 400});\n    /* and so on */\n    gf.addSprite(\"container\",\"player\",{width: 40, height: 40, y: 440, x: 260});\n\n    gf.setAnimation(\"background\", backgroundAnim);\n    gf.setAnimation(\"player\", playerAnim);\n    gf.setAnimation(\"packets1\", networkPacketsAnim);\n    /* and so on */    \n\n    $(\"#startButton\").remove();\n    $(\"#container\").append(\"<div id='lifes' style='position: relative; color: #FFF;'>life: 3</div>\").css(\"display\", \"block\");\n    setInterval(gameLoop, 100);\n}\n```", "```js\nvar screenWidth = 640;\nvar packets1 = {\n    position: 300,\n    speed: 3\n}\n/* and so on */\n\nvar gameState = \"START\";\n\nvar gameLoop = function() {\n    packets1.position += packets1.speed;\n    $(\"#packets1\").css(\"background-position\",\"\"+ packets1.position +\"px 0px\");\n\n   /* and so on */\n\n    var newPos = gf.x(\"player\");\n    switch(gameState){\n        case \"LINE1\":\n            newPos += packets1.speed;\n            break;\n        case \"LINE2\":\n            newPos += packets2.speed;\n            break;\n        case \"LINE3\":\n            newPos += packets3.speed;\n            break;\n    }\n    gf.x(\"player\", newPos);\n};\n```", "```js\n$(document).keydown(function(e){\n        if(gameState != \"WON\" && gameState != \"GAMEOVER\"){\n            switch(e.keyCode){\n                case 37: //left\n                    gf.x(\"player\",gf.x(\"player\") - 5);\n                    break;\n                case 39: // right\n                    gf.x(\"player\",gf.x(\"player\") + 5);\n                    break;\n                case 38: // jump\n                    switch(gameState){\n                        case \"START\":\n                            $(\"#player\").animate({top: 400},function(){\n                                gameState = \"LINE1\";\n                            });\n                            break;\n                        case \"LINE1\":\n                            $(\"#player\").animate({top: 330},function(){\n                                gameState = \"LINE2\";\n                            });\n                            break;\n                        /* and so on */\n                        case \"LINE6\":\n                            $(\"#player\").animate({top: 0},function(){\n                                gameState = \"WON\";\n                                $(\"#lifes\").html(\"You won!\");\n                            });\n                            break;\n                    }\n            }\n        }\n    });\n```", "```js\nvar detectSafe = function(state){\n    switch(state){\n        case \"LINE1\":\n            var relativePosition = (gf.x(\"player\") - packets1.position) % 230;\n            relativePosition = (relativePosition < 0) ? relativePosition + 230: relativePosition;\n            if(relativePosition > 110 && relativePosition < 210) {\n                return true;\n            } else {\n                return false;\n            }\n            break;\n        /* and so on */ \n        case \"LINE4\":\n            var relativePosition = (gf.x(\"player\") - bugs1.position) % 190;\n            relativePosition = (relativePosition < 0) ? relativePosition + 190: relativePosition;\n            if(relativePosition < 130) {\n                return true;\n            } else {\n                return false;\n            }\n            break;\n        /* and so on */\n    }\n    return true;\n}\n```", "```js\nvar life = 3;\nvar kill = function (){\n    life--;\n    if(life == 0) {\n        gameState = \"GAMEOVER\";\n        $(\"#lifes\").html(\"Game Over!\");\n    } else {\n        $(\"#lifes\").html(\"life: \"+life);\n        switch(gameState){\n            case \"START\":\n            case \"LINE1\":\n            case \"LINE2\":\n            case \"LINE3\":\n                gf.x(\"player\", 260);\n                gf.y(\"player\", 440);\n                gameState = \"START\";\n                break;\n            case \"REST\":\n            case \"LINE4\":\n            case \"LINE5\":\n            case \"LINE6\":\n                gf.x(\"player\", 260);\n                gf.y(\"player\", 220);\n                gameState = \"REST\";\n                break;\n        }\n    }\n}\n```", "```js\nvar newPos = gf.x(\"player\");\nswitch(gameState){\n    case \"LINE1\":\n        newPos += packets1.speed;\n        break;\n    /* and so on */\n}\nif(newPos > screenWidth || newPos < -40){\n        kill();\n} else {\n    if(!detectSafe(gameState)){\n        kill();\n    }\n    gf.x(\"player\", newPos);\n}\n```", "```js\ncase \"START\":\n    $(\"#player\").animate({top: 400},function(){\n        if(detectSafe(\"LINE1\")){\n            gameState = \"LINE1\";\n        } else {\n            kill();\n        }\n    });\n    break;\n```"]