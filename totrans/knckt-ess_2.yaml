- en: Chapter 2. KnockoutJS Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have built our Catalog, it is time to add a cart to our application.
    When our code begins to grow, it's necessary to split it in several parts to keep
    it maintainable. When we split JavaScript code, we are talking about modules,
    classes, function, libraries, and so on. When we talk about HTML, we call these
    parts templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'KnockoutJS has a native template engine that we can use to manage our HTML.
    It is very simple, but also has a big inconvenience: templates, it should be loaded
    in the current HTML page. This is not a problem if our app is small, but it could
    be a problem if our application begins to need more and more templates.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to design our templates with the native engine
    and then we will speak about mechanisms and external libraries we can use to improve
    the Knockout template engine.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can begin from the project we did in [Chapter 1](ch01.html "Chapter 1. Refreshing
    the UI Automatically with KnockoutJS"), *Refreshing the UI Automatically with
    KnockoutJS*. First of all, we are going to add some style to the page. Add a file
    called `style.css` into the `css` folder. Add a reference in the `index.html`
    file, just below the `bootstrap` reference. The following is the content of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now remove all the content from the body tag except for the script tags and
    paste in these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's review this code.
  prefs: []
  type: TYPE_NORMAL
- en: We have two row classes. They will be our containers.
  prefs: []
  type: TYPE_NORMAL
- en: The first container is named with the `id` value as `catalogContainer` and it
    will contain the catalog view and the cart. The second one is referenced by the
    `id` value as `orderContainer` and we will set our final order there.
  prefs: []
  type: TYPE_NORMAL
- en: We also have two more `<div>` tags at the bottom that will contain the modal
    dialogs to show the form to add products to our catalog (the one we built in [Chapter
    1](ch01.html "Chapter 1. Refreshing the UI Automatically with KnockoutJS"), *Refreshing
    the UI Automatically with KnockoutJS*) and the other one will contain a modal
    message to tell the user that our order is finished.
  prefs: []
  type: TYPE_NORMAL
- en: Along with this code you can see a template binding inside the `data-bind` attribute.
    This is the binding that Knockout uses to bind templates to the element. It contains
    a `name` parameter that represents the ID of a template.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, this `<div>` element will contain the HTML that is inside the
    `<script>` tag with the ID `header`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Template elements are commonly declared at the bottom of the body, just above
    the `<script>` tags that have references to our external libraries. We are going
    to define some templates and then we will talk about each one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each template name is descriptive enough by itself, so it's easy to know what
    we are going to set inside them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a diagram showing where we dispose each template on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating templates](img/7074OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the `cart-item` template will be repeated for each item in the cart
    collection. Modal templates will appear only when a modal dialog is displayed.
    Finally, the `order` template is hidden until we click to confirm the order.
  prefs: []
  type: TYPE_NORMAL
- en: In the `header` template, we will have the title and the menu of the page. The
    `catalog` template will contain the table with products we wrote in [Chapter 1](ch01.html
    "Chapter 1. Refreshing the UI Automatically with KnockoutJS"), *Refreshing the
    UI Automatically with KnockoutJS*. The `add-to-catalog-modal` template will contain
    the modal that shows the form to add a product to our catalog. The `cart-widget`
    template will show a summary of our cart. The `cart-item` template will contain
    the template of each item in the cart. The `cart` template will have the layout
    of the cart. The `order` template will show the final list of products we want
    to buy and a button to confirm our order.
  prefs: []
  type: TYPE_NORMAL
- en: The header template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin with the HTML markup that should contain the `header` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We define a `<h1>` tag, and two `<button>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: The first button tag is attached to the modal that has the ID `#addToCatalogModal`.
    Since we are using Bootstrap as the CSS framework, we can attach modals by ID
    using the `data-target` attribute, and activate the modal using the `data-toggle`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The second button will show the full cart view and it will be available only
    if the cart has items. To achieve this, there are a number of different ways.
  prefs: []
  type: TYPE_NORMAL
- en: The first one is to use the CSS-disabled class that comes with Twitter Bootstrap.
    This is the way we have used in the example. CSS binding allows us to activate
    or deactivate a class in the element depending on the result of the expression
    that is attached to the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other method is to use the `enable` binding. This binding enables an element
    if the expression evaluates to `true`. We can use the opposite binding, which
    is named `disable`. There is a complete documentation on the Knockout website
    [http://knockoutjs.com/documentation/enable-binding.html](http://knockoutjs.com/documentation/enable-binding.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first method uses CSS classes to enable and disable the button. The second
    method uses the HTML attribute, `disabled`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use a third option, which is to use a computed observable. We can create
    a computed observable variable in our view-model that returns `true` or `false`
    depending on the length of the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To show the cart, we will use the `click` binding in the same way we used it
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we should go to our `viewmodel.js` file and add all the information we
    need to make this template work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should expose these two objects in the view-model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The catalog template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to define the `catalog` template just below the `header` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same table we built in the previous chapter. We have just added
    a few new things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, each line uses the `style` binding to alert the user, while they are shopping,
    that the stock is reaching the maximum limit. The `style` binding works the same
    way that CSS binding does with classes. It allows us to add style attributes depending
    on the value of the expression. In this case, the color of the text in the line
    must be black if the stock is higher than five, and red if it is four or less.
    We can use other CSS attributes, so feel free to try other behaviors. For example,
    set the line of the catalog to green if the element is inside the cart. We should
    remember that if an attribute has dashes, you should wrap it in single quotes.
    For example, `background-color` will throw an error, so you should write `'background-color'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we work with bindings that are activated depending on the values of the
    view-model, it is good practice to use computed observables. Therefore, we can
    create a computed value in our product model that returns the value of the color
    that should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It would be even better if we create a class in our `style.css` file that is
    called `stock-alert` and we use the CSS binding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, look inside the `<tfoot>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can have nested templates. In this case, we have the `cart-widget`
    template inside our `catalog` template. This give us the possibility of having
    very complex templates, splitting them into very small pieces, and combining them,
    to keep our code clean and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, look at the last cell of each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Look at how we call the `addToCart` method using the magic variable `$parent`.
    Knockout gives us some magic words to navigate through the different contexts
    we have in our app. In this case, we are in the `catalog` context and we want
    to call a method that lies one level up. We can use the magical variable called
    `$parent`.
  prefs: []
  type: TYPE_NORMAL
- en: There are other variables we can use when we are inside a Knockout context.
    There is complete documentation on the Knockout website [http://knockoutjs.com/documentation/binding-context.html](http://knockoutjs.com/documentation/binding-context.html).
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we are not going to use all of them. But we are going quickly
    explain these binding context variables, just to understand them better.
  prefs: []
  type: TYPE_NORMAL
- en: If we don't know how many levels deep we are, we can navigate to the top of
    the view-model using the magic word `$root`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we have many parents, we can get the magic array `$parents` and access
    each parent using indexes, for example, `$parents[0]`, `$parents[1]`. Imagine
    that you have a list of categories where each category contains a list of products.
    These products are a list of IDs and the category has a method to get the name
    of their products. We can use the `$parents` array to obtain the reference to
    the category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Look how helpful the `as` attribute is inside the `foreach` binding. It makes
    code more readable. But if you are inside a `foreach` loop, you can also access
    each item using the `$data` magic variable, and you can access the position index
    that each element has in the collection using the `$index` magic variable. For
    example, if we have a list of products, we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This should display:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0 – Product 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1 – Product 2**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2 – Product 3**'
  prefs: []
  type: TYPE_NORMAL
- en: '**...**'
  prefs: []
  type: TYPE_NORMAL
- en: '![The catalog template](img/7074OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: KnockoutJS magic variables to navigate through contexts
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know more about what binding variables are, let's go back to our
    code. We are now going to write the `addToCart` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to define the cart items in our `js/models` folder. Create a file
    called `CartProduct.js` and insert the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Each cart product is composed of the product itself and the units of the product
    we want to buy. We will also have a computed field that contains the subtotal
    of the line. We should give the object the responsibility for managing its units
    and the stock of the product. For this reason, we have added the `addUnit` and
    `removeUnit` methods. These methods add one unit or remove one unit of the product
    if they are called.
  prefs: []
  type: TYPE_NORMAL
- en: We should reference this JavaScript file into our `index.html` file with the
    other `<script>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the view-model, we should create a cart array and expose it in the return
    statement, as we have done earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to write the `addToCart` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This method searches the product in the cart. If it exists, it updates its units,
    and if not, it creates a new one. Since the cart is an observable array, we need
    to get it, manipulate it, and overwrite it, because we need to access the product
    object to know if the product is in the cart. Remember that observable arrays
    do not observe the objects they contain, just the array properties.
  prefs: []
  type: TYPE_NORMAL
- en: The add-to-cart-modal template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a very simple template. We just wrap the code we made in [Chapter 1](ch01.html
    "Chapter 1. Refreshing the UI Automatically with KnockoutJS"), *Refreshing the
    UI Automatically with KnockoutJS*, to add a product to a Bootstrap modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The cart-widget template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This template gives the user information quickly about how many items are in
    the cart and how much all of them cost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We should define `totalItems` and `grandTotal` in our view-model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now you should expose them in the return statement, as we always do. Don't worry
    about the format now, you will learn how to format currency or any kind of data
    in the future. Now you must focus on learning how to manage information and how
    to show it to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The cart-item template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cart-item` template displays each line in the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We set an **x** button in the top-right of each line to easily remove a line
    from the cart. As you can see, we have used the `$root` magic variable to navigate
    to the top context because we are going to use this template inside a `foreach`
    loop, and it means this template will be in the loop context. If we consider this
    template as an isolated element, we can't be sure how deep we are in the context
    navigation. To be sure, we go to the right context to call the `removeFormCart`
    method. It's better to use `$root` instead of `$parent` in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for `removeFromCart` should lie in the view-model context and should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in the `addToCart` method, we get the array that is inside the observable.
    We did that because we need to navigate inside the elements of the array. In this
    case, Knockout observable arrays have a method called `remove` that allows us
    to remove the object that we pass as a parameter. If the object is in the array,
    it will be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the data context is always passed as the first parameter in the
    function we use in the click events.
  prefs: []
  type: TYPE_NORMAL
- en: The cart template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cart` template should display the layout of the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It's important that you notice the template binding that we have just below
    `<h1>Cart</h1>`. We are binding a template with an array using the `foreach` argument.
    With this binding, Knockout renders the `cart-item` template for each element
    inside the cart collection. This considerably reduces the code we write in each
    template and in addition makes them more readable.
  prefs: []
  type: TYPE_NORMAL
- en: We have once again used the `cart-widget` template to show the total items and
    the total amount. This is one of the good features of templates, we can reuse
    content over and over.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe that we have put a button at the top-right of the cart to close it
    when we don''t need to see the details of our cart, and the other one to confirm
    the order when we are done. The code in our view-model should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, to show and hide elements we use jQuery and CSS classes from
    the Bootstrap framework. The hidden class just adds the `display: none` style
    to the elements. We just need to toggle this class to show or hide elements in
    our view. Expose these two methods in the `return` statement of your view-model.'
  prefs: []
  type: TYPE_NORMAL
- en: We will come back to this when we need to display the `order` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result once we have our catalog and our cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The cart template](img/7074OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The order template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have clicked on the **Confirm Order** button, the order should be shown
    to us, to review and confirm if we agree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have a read-only table with all cart lines and two buttons. One is
    to confirm, which will show the modal dialog saying the order is completed, and
    the other gives us the option to go back to the catalog and keep on shopping.
    There is some code we need to add to our view-model and expose to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As we have done in previous methods, we add and remove the hidden class from
    the elements we want to show and hide. The `finishOrder` method removes all the
    items of the cart because our order is complete; hides the cart and shows the
    catalog. It also displays a modal that gives confirmation to the user that the
    order is done.
  prefs: []
  type: TYPE_NORMAL
- en: '![The order template](img/7074OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Order details template
  prefs: []
  type: TYPE_NORMAL
- en: The finish-order-modal template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last template is the modal that tells the user that the order is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The finish-order-modal template](img/7074OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Handling templates with if and ifnot bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned how to show and hide templates with the power of jQuery and
    Bootstrap. This is quite good because you can use this technique with any framework
    you want. The problem with this type of code is that since jQuery is a DOM manipulation
    library, you need to reference elements to manipulate them. This means you need
    to know over which element you want to apply the action. Knockout gives us some
    bindings to hide and show elements depending on the values of our view-model.
    Let's update the `show` and `hide` methods and the templates.
  prefs: []
  type: TYPE_NORMAL
- en: Add both the control variables to your view-model and expose them in the `return`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now update the `show` and `hide` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We can appreciate how the code becomes more readable and meaningful. Now, update
    the `cart` template, the `catalog` template, and the `order` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `index.html`, consider this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then consider the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'It is important to know that the if binding and the template binding can''t
    share the same `data-bind` attribute. This is why we go from one element to two
    nested elements in this template. In other words, this example is not allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, consider this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: With the changes we have made, showing or hiding elements now depends on our
    data and not on our CSS. This is much better because now we can show and hide
    any element we want using the `if` and `ifnot` binding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review, roughly speaking, how our files are now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have our `index.html` file that has the main container, templates, and libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have our `viewmodel.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: It is useful to debug to globalize the view-model. It is not good practice in
    production environments, but it is good when you are debugging your application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now you have easy access to your view-model from the browser debugger or from
    your IDE debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the product model that we coded in the [Chapter 1](ch01.html
    "Chapter 1. Refreshing the UI Automatically with KnockoutJS"), *Refreshing the
    UI Automatically with KnockoutJS*, we have created a new model called `CartProduct`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You have learned how to manage templates with Knockout, but maybe you have noticed
    that having all templates in the `index.html` file is not the best approach. We
    are going to talk about two mechanisms. The first one is more home-made and the
    second one is an external library used by lots of Knockout developers, created
    by Jim Cowart, called *Knockout.js-External-Template-Engine* ([https://github.com/ifandelse/Knockout.js-External-Template-Engine](https://github.com/ifandelse/Knockout.js-External-Template-Engine)).
  prefs: []
  type: TYPE_NORMAL
- en: Managing templates with jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we want to load templates from different files, let''s move all our templates
    to a folder called `views` and make one file per template. Each file will have
    the same name the template has as an ID. So if the template has the ID, `cart-item`,
    the file should be called `cart-item.html` and will contain the full `cart-item`
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![Managing templates with jQuery](img/7074OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The views folder with all templates
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in the `viewmodel.js` file, remove the last line (`ko.applyBindings(vm)`)
    and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This code gets all the templates we need and appends them to the body. Once
    all the templates are loaded, we call the `applyBindings` method. We should do
    it this way because we are loading templates asynchronously and we need to make
    sure that we bind our view-model when all templates are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: This is good enough to make our code more maintainable and readable, but is
    still problematic if we need to handle lots of templates. Further more, if we
    have nested folders, it becomes a headache listing all our templates in one array.
    There should be a better approach.
  prefs: []
  type: TYPE_NORMAL
- en: Managing templates with koExternalTemplateEngine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen two ways of loading templates, both of them are good enough to
    manage a low number of templates, but when lines of code begin to grow, we need
    something that allows us to forget about template management. We just want to
    call a template and get the content.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, Jim Cowart's library, `koExternalTemplateEngine`, is perfect.
    This project was abandoned by the author in 2014, but it is still a good library
    that we can use when we develop simple projects. In the next chapters, you will
    learn more about asynchronous loading and module patterns and we will see other
    libraries that are currently maintained.
  prefs: []
  type: TYPE_NORMAL
- en: We just need to download the library in the `js/vendors` folder and then link
    it in our `index.html` file just below the Knockout library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you should configure it in the `viewmodel.js` file. Remove the templates
    array and the `foreach` statement, and add these three lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Here, `infuser` is a global variable that we use to configure the template engine.
    We should indicate which suffix will have our templates and in which folder they
    will be.
  prefs: []
  type: TYPE_NORMAL
- en: We don't need the `<script type="text/html" id="template-id"></script>` tags
    any more, so we should remove them from each file.
  prefs: []
  type: TYPE_NORMAL
- en: So now everything should be working, and the code we needed to succeed was not
    much.
  prefs: []
  type: TYPE_NORMAL
- en: KnockoutJS has its own template engine, but you can see that adding new ones
    is not difficult. If you have experience with other template engines such as jQuery
    Templates, Underscore, or Handlebars, just load them in your `index.html` file
    and use them, there is no problem with that. This is why Knockout is beautiful,
    you can use any tool you like with it.
  prefs: []
  type: TYPE_NORMAL
- en: You have learned a lot of things in this chapter, haven't you?
  prefs: []
  type: TYPE_NORMAL
- en: Knockout gives us the CSS binding to activate and deactivate CSS classes according
    to an expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the style binding to add CSS rules to elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template binding helps us to manage templates that are already loaded in
    the DOM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can iterate along collections with the `foreach` binding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside a `foreach`, Knockout gives us some magic variables such as `$parent`,
    `$parents`, `$index`, `$data`, and `$root`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the binding `as` along with the `foreach` binding to get an alias
    for each element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can show and hide content using just jQuery and CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can show and hide content using the bindings: `if`, `ifnot`, and `visible`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery helps us to load Knockout templates asynchronously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the `koExternalTemplateEngine` plugin to manage templates in a more
    efficient way. The project is abandoned but it is still a good solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to split an application using templates
    that share the same view-model. Now that we know the basics, it would be interesting
    to extend the application. Maybe we can try to create a detailed view of the product,
    or maybe we can give the user the option to register where to send the order.
    You will learn how to do these things in the coming chapters, but it would be
    interesting to experiment just with the knowledge we have now.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to extend Knockout behaviors.
    This will be useful to format data and to create code that we can reuse over and
    over. You will learn what custom bindings and components are and how they help
    us write reusable and elegant code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of this chapter is on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jorgeferrando/knockout-cart/archive/chapter2.zip](https://github.com/jorgeferrando/knockout-cart/archive/chapter2.zip)'
  prefs: []
  type: TYPE_NORMAL
