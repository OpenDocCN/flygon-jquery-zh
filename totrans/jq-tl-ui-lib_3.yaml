- en: Chapter 3. Form Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ask yourself a question: do you like filling in forms? If, as I suspect, the
    answer is no, then join the masses—there is nothing worse than filling in a form
    online, only to find you''ve entered in something incorrectly, and you have to
    go back and change it…'
  prefs: []
  type: TYPE_NORMAL
- en: Enter jQuery Tools' Form Tools!
  prefs: []
  type: TYPE_NORMAL
- en: This group of 3 useful tools may not be as popular as some of the other tools
    in the library, but they still serve a useful function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use Validator to ensure a form is correctly filled out, or to display
    errors when this is not the case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to update the basic style of DateInput, using elements of jQuery UI's themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to turn RangeInput into a browser, so you can scroll through a number of
    products, and some tips on how to combine it with other tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So…what are you waiting for? Let's get started with looking at Validator.
  prefs: []
  type: TYPE_NORMAL
- en: Using Validator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validators can be used to ensure whether a form is correctly filled out. Validators
    can also be used to display the errors.
  prefs: []
  type: TYPE_NORMAL
- en: Why basic Validator?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The art of form filling, as defined by Wikipedia, means that you cannot simply
    submit forms with any old rubbish, or saying "put rubbish in, and you get rubbish
    out" will definitely be true. It is crucial to ensure that the content you enter
    at least conforms to some form of minimum standard—one of the tools that can help
    with this is Validator. Let's have a look at this component of the Tools library
    in a little more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data validation is the process of ensuring that a program operates on clean,
    correct and useful data.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic code for Validator is in two parts—the first part is the HTML structure,
    with the second part a single line call to the Validator tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the form set up, then you need to add the call for Validator
    here''s the basic code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that this includes the `novalidate` attribute on the form—this is to
    force IE not to try to use the HTML5 validator that works in more modern browsers,
    but to use that from jQuery Tools instead.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, let's put it into practice, by setting up a demonstration
    of how we can use Validator in a form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: improving styling, and adding custom field validators'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to use an existing form, available from the jQuery Tools site, and
    add some tweaks in the form of additional validators, and changes to the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the basic HTML structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open up the text editor of your choice, and copy in the following code—you
    will notice that it follows a similar pattern to most of the projects in this
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding in the form details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay. Now we have the basic structure in place, let''s start filling it out
    with a little detail. First up is the form content, with the fields that we are
    going to validate—so copy in the code below in between the`<body>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that there are a number of additional parameters that pop up in the code,
    such as the pattern attribute in the Telephone input field. These are used by
    Validator and/or its additional custom validators, as a basis for validating text
    entered by the person visiting the site.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that is done, we need to add in the all important styling—note that this
    does include some additional styles for the purposes of this demo, but are not
    necessarily required in your live projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The final part—the script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final part required is the all important script, to make it all work—as
    this is a reasonably long script, we will break it down into sections, starting
    with the validators.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Validators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'While Validator will use standard HTML4 and HTML5 validators, the functionality
    only really comes into its own when you add in custom validators, that are not
    available as a part of the normal library. We have five examples of custom validators
    in this demo, so copy the following code into your site—this should be the last
    stage on your page, or in the`<head>` area, as long as the `document.ready()`
    function is used accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This validator performs a check on`<select>` drop downs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use radio buttons, then this is the validator code you need
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The validator below will do a pattern match for a valid time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This validator will flag an error if the minimum character length is not obeyed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This validator will show an error if the uploaded file type is not one of the
    pre-determined types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The real heart of the validator script is as given below, it contains the call
    to jQuery Tools'' Validator functionality, with a number of additional configuration
    options. In order, they do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`position:` It controls the location on screen where the text will appear'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speed:` It determines how fast or slow the error message appears'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offset:` It is used in conjunction with position to fine-tune the location
    on screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`errorClass` and `errorInputEvent:` The CSS style to use on the error message,
    and the trigger for the input validity check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message:` The text of the error message, including any images (as shown here)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputEvent:` It revalidates text each time the user "blurs" or moves away
    from the element—this is used particularly on the checking of`<select>` tags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy this into your script section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This next section performs two functions—the first one is to set Validator
    to automatically reposition the error message text, if the window is resized;
    the second one adds a red border on fields that do not validate properly, on a
    trigger of "onFail", when the submit button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The final part of this script is a reset function that clears the red border
    set against any field that doesn''t validate correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If all has worked correctly, then you should see something like the form shown
    in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom Validators](img/7805_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"It seems very negative, this onFail…"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, it is true—a potential downside of Validator is that it does feel very
    one-sided in that it concentrates on only when input entries fail. However, it
    is possible to include code to display a confirmation or message if the validator
    deems that the entry concerned does match the required pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should note that,this is a concept only at the moment; it is meant as a
    starting point for your own development, and would need thorough testing before
    putting into production use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, you can try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following into your style sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this to your JavaScript call to jQuery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this to the bottom of your `reset` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this line to the configuration set up for Validator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code is not perfect—it has some bugs in it, so should only be treated as
    a starting point for your own ideas. If you do implement the code above, then
    you should see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '!["It seems very negative, this onFail…"](img/7805_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Validator—a final thought
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This demo scratches just the surface of what can be done with Validator—Validator
    will happily work with jQuery Tools' Overlay functionality, so that you could
    show the errors in a dialog box, with the overlay mask behind, for example. You
    can even use jQuery UI to provide that dialog box effect as well—the key to using
    jQuery UI is to declare the call to jQuery Tools first, then reassign the Tabs
    object in Tools to use a different naming convention, otherwise it will conflict
    with UI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at another important tool in the library—DateInput.
  prefs: []
  type: TYPE_NORMAL
- en: Making your HTML5 date input look and behave the way you want with Dateinput
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advent of HTML5 has brought the ability to use`<input type=date>`, which
    removes the need for additional functionality. However, this is only available
    in a limited capacity, as it only works on Safari—jQuery Tools seeks to redress
    this with DateInput, which makes the HTML5 functionality available now, across
    all modern browsers. Let's take a peek at how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If there was an example of where minimal JavaScript was needed, then this is
    arguably one of them; DateInput only needs two words to work, with the exception
    of the call to the library, of course! Below is the basic framework required to
    get jQuery Tools'' DateInput working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: With this in mind, it's time to look at a project using DateInput—this time
    though, this will be a project with a difference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: styling and localization'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When preparing the demos for this book, I originally had in mind something that
    would try to showcase some of the functionality of DateInput. However, on reflection,
    I wanted to do something else, which was to answer the question—"is it possible
    to combine elements from jQuery UI's themes into jQuery Tools?"
  prefs: []
  type: TYPE_NORMAL
- en: The inspiration for this came from the themes that are available with jQuery
    UI—themes are one area where DateInput is lacking. In this project, we're going
    to look at styling DateInput using the original skin, but making a number of tweaks
    to first add some color and then localization.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the basic HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To begin with, let''s create the basic HTML structure—open up your text editor,
    and copy in the following lines as a starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Okay, there is nothing complicated here; save a copy of this as your base HTML
    file, ready for adding the CSS and JavaScript code. You will notice the similarities
    to other projects in this book, where minimal HTML is required to build a usable
    structure—DateInput is no different.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that the`<input type="date">` tag is used here—whilst this is valid HTML5,
    the beauty of jQuery Tools lies in making this available to all modern browsers,
    not just ones that accept HTML5\. If JavaScript is not available for any reason,
    this will actually degrade nicely for those using Safari!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving on, let''s add in the JavaScript we''re going to use for DateInput:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This comes in two parts—the first part is the localization code for DateInput,
    which gives the French language equivalents for the months and days of the year.
    This is used by DateInput—to activate it, the `lang` attribute needs to be used,
    along with the correct two letter code for the appropriate language.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the code is the call to DateInput, where the format and desired
    language is specified (the latter using the same code from the localization code).
  prefs: []
  type: TYPE_NORMAL
- en: Adding the styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is arguably the most important part of DateInput—the styling. You will
    notice that the original `skin1.css` link has been included in the code at the
    beginning of this project; this is to illustrate that the original skin can be
    overridden, and that it is not necessary to always try to reinvent the wheel.
    You will also need to download the "Start" theme from the jQueryUI site at [http://www.jqueryui.com](http://www.jqueryui.com);
    if using this styling technique, you will need to refer to this, to extract the
    relevant CSS that make up your custom styles. Copy the code given below into the
    style tags in your webpage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is well, you will have a calendar that is similar in appearance to that
    of jQuery UI''s version, but perhaps without the same amount of code! Here''s
    a screenshot of what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the styling](img/7805_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A final thought
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code above is not perfect—it was designed as a concept of what could be
    possible when using elements from jQuery UI's themes in DateInput. The jQuery
    UI has a number of themes available, from which elements could easily be used
    to provide similar effects within your code. It is key to understand that I am
    not using jQuery UI's Javascript, as this will add a large amount of additional
    code to your site, which is against the whole ethos of jQuery Tools. That all
    said, there is nothing stopping you from using elements from the themes!
  prefs: []
  type: TYPE_NORMAL
- en: There is a barebones version of the `skin` file available to download from the
    main jQuery Tools site—in some respects, you may find it more desirable to work
    from this, rather than try to adjust an existing theme. However, a lot of this
    will depend on the changes you want to make—if you are not making many, then it
    might be more sensible to simply override the existing `skin` file, rather than
    create additional work for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling your HTML5 range input with RangeInput
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advent of HTML5 is bringing with it a number of additional types that can
    be used with the`<input>` command, such as`<input type="range">`. Whilst this
    may be good news for developers, it is not so good for those who still have to
    work with older browsers, as this effect will only work natively in the most recent
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Enter jQuery Tools' RangeInput, which makes the same effect available to all
    browsers (with the exception of IE5 and IE6, as the market share for these browsers
    is now so small that the lack of support for these two browsers will not affect
    the majority of your website audiences).
  prefs: []
  type: TYPE_NORMAL
- en: Why basic RangeInput?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery Tools is designed to standardize the HTML5 functionality of`<input
    type="range">` across all modern browsers, ready for when it is officially released,
    and the majority of browsers support it by default. As jQuery Tools abstracts
    a lot of the styling and inherent power away into its CSS, it will just be a matter
    of removing this, to allow the HTML5 functionality to work.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dive into this a little more, to see how it would work in a normal environment.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the Tools follow the same basic principle of requiring minimal JavaScript
    to operate, with CSS styling providing the real power—RangeInput is no exception.
    The basic format falls into three parts—the first is the link to the CSS that
    provides the styling required by RangeInput, the second is at least one`<input>`
    statement (the following code shows two—the same principle applies for both),
    followed by the call to RangeInput from the Tools library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, most of the people might think that a RangeInput should really be used
    to obtain a value from a preset scale, displayed on a website. This is a perfectly
    valid assumption, but only a small part of what RangeInput could be used to do.
    To prove this, let's have a look at the project to build a scrollable product
    gallery—this one will display a number of books, and could easily be used on a
    retail website, such as Packt's.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: building a product gallery'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to build a basic scrollable product gallery, in a style used by
    the PC manufacturer Apple™ some years ago. The inspiration for this project came
    from a tutorial available online, from [http://jqueryfordesigners.com/slider-gallery/](http://jqueryfordesigners.com/slider-gallery/)
    , that explains how to create a similar effect using jQuery—which is a perfect
    excuse to show off how versatile jQuery Tools' RangeInput really is, and how it
    can be used to produce the same effect!
  prefs: []
  type: TYPE_NORMAL
- en: Although the basic framework will remain the same, this is something for which
    you could easily alter the styles at a later date, as you see fit. Let's begin
    with setting up the basic structure.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the basic HTML structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open up the text editor of your choice, and insert the following lines Then
    save this as your HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have our basic framework, let's start adding the content.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will note that in the demo, we have linked directly to the source file for
    Tools, that is hosted in Github. This is acceptable, but should only be for the
    purposes of development; if you are using this in a production environment, you
    will need to change to using one of the CDN links, or a downloaded copy of the
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Adding in the book images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next come the images of the books we need to add in; we're using 30 in all.
    If you want to use fewer, then this is possible, but you will need to alter the
    styling around the slider, to allow for the change in the number of images used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following in between the`<ul> </ul>` tags in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we're using images from Packt's website—you are free to use
    other images if you desire, although you will need to keep to a similar size,
    or adjust the styling to suit.
  prefs: []
  type: TYPE_NORMAL
- en: Adding in the JavaScript functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s move onto adding the JavaScript functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The code above creates an instance of the internal "scrolling" `DIV` (that is
    `#scroll)`, then use CSS to move it to the appropriate amount either left or right;
    this is animated by using jQuery's .animate() function to provide smoother movement.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this stage, if you run the code, you will not see an awful lot working—that
    is because the true power of jQuery Tools actually lies in the CSS styling that
    is applied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is well, then you should see something similar to this, once you have
    added in the styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the gallery](img/7805_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some final comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whilst this was built for 30 book images, this could easily have been any product
    images—the key to it is ensuring that either the images used are of the same size,
    or that the CSS is adjusted to ensure an even width. The beauty of jQuery Tools
    is that whilst JavaScript is kept to a minimum, just about every element can be
    tweaked using CSS—RangeInput is no exception. It is important to note that though
    there are some CSS3 styles used in this demo, which you may find won't work in
    some of the older browsers; this is something to bear in mind when using this
    effect in your websites. After all, the very ethos of jQuery Tools is to push
    forward to using more and more CSS3
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at three of the lesser known, yet still important
    components of jQuery Tools, namely Validator, DateInput and RangeInput. Although
    these may not be so well known or used as the other components, they are still
    equally as powerful, particularly when you allow for the level of customisability
    available using CSS, and where they can also be extended using jQuery (as can
    the other components). We took a more theoretical peek at how you can style DateInput
    using elements from jQuery UI—the effect here probably needs some tweaking; it
    is still a useful way to show off what could be done, if elements from other jQuery
    UI themes were also used.
  prefs: []
  type: TYPE_NORMAL
- en: In the fourth and final chapter of this book, we will be delving into the world
    of Expose and FlashEmbed, which in themselves are not necessarily used on their
    own, but are still important parts of the jQuery Tools library.
  prefs: []
  type: TYPE_NORMAL
