- en: Chapter 3. Background Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the last chapter, we used the `fadeIn()` and `fadeOut()` methods to animate
    image elements. In this chapter, we''ll be using the `animate()` effect to animate
    the background color and learn how to animate the position of background images
    inside our elements. In [Chapter 7](ch07.html "Chapter 7. Custom Animations"),
    *Custom Animation*, we''ll go further in depth as to everything that the `animate()`
    method is capable of.*'
  prefs: []
  type: TYPE_NORMAL
- en: Background-color animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animating the background color of an element is a great way to draw our users'
    eyes to the object we want them to see. Another use for animating the background
    color of an element is to show that something has happened to the element. It's
    typically used in this way if the state of the object changes (added, moved, deleted,
    and so on), or if it requires attention to fix a problem. We'll learn about some
    of these things in the next two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the lack of support in jQuery 2.0 for animating background-color, we'll
    be using jQuery UI to give us the functionality we need to create this effect.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be covering all of the beautiful things jQuery UI gives us the ability
    to do in [Chapter 6](ch06.html "Chapter 6. Extended Animations with jQuery UI"),
    *Extending Animations with jQuery UI*.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the animate method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `animate()` method is one of the most useful methods jQuery has to offer
    in its bag of tricks in the animation realm. With it, we're able to do things
    such as move an element across the page or alter and animate the properties of
    colors, backgrounds, text, fonts, the box model, position, display, lists, tables,
    generated content, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating the body background-color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the steps below, we're going to start by creating an example that
    changes the `body` background color.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new file (using our template) called `background-color.html`
    and save it in our `jquery-animation` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll need to include the jQuery UI library by adding this line directly
    under our jQuery library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <script src="img/jquery-ui.min.js"></script>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A custom or stable build of jQuery UI can be downloaded from [http://jqueryui.com](http://jqueryui.com),
    or you can link to the library using one of the three **Content Delivery Networks**
    (**CDNs**) below. For the fastest access to the library, go to [http://jqueryui.com](http://jqueryui.com),
    scroll to the very bottom, and look for the **Quick Access** section. Using the
    jQuery UI library JS file there will work just fine for our need of the examples
    in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Media Template: [http://code.jquery.com](http://code.jquery.com)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Google: [http://developers.google.com/speed/libraries/devguide#jquery-ui](http://developers.google.com/speed/libraries/devguide#jquery-ui)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Microsoft: [http://asp.net/ajaxlibrary/cdn.ashx#jQuery_Releases_on_the_CDN_0](http://asp.net/ajaxlibrary/cdn.ashx#jQuery_Releases_on_the_CDN_0)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'CDNJS: [http://cdnjs.com/libraries/jquery](http://cdnjs.com/libraries/jquery)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we''ll add the following jQuery code to the anonymous function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var speed = 1500;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#D68A85" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#E7912D" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#CECC33" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#6FCD94" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#3AB6F1" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#8684D8" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$( "body" ).animate({ backgroundColor: "#DD67AE" }, speed);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added the jQuery UI library to our page. This was needed because of
    the lack of support for animating the background color in the current version
    of jQuery. Next, we added in the code that will animate our background. We then
    set the `speed` variable to `1500` (milliseconds) so that we can control the duration
    of our animation. Lastly, using the `animate()` method, we set the background
    color of the body element and set the duration to the variable we set above named
    `speed`. We duplicated the same line several times, changing only the hexadecimal
    value of the background color.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is an illustration of colors that the entire body
    background color animates through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/9642_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chaining together jQuery methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s important to note that jQuery methods (`animate()`, in this case) can
    be chained together. Our code mentioned previously would look like the following
    if we chained the `animate()` methods together:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $("body")
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#D68A85" }, speed)  //red'
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#E7912D" }, speed)  //orange'
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#CECC33" }, speed)  //yellow'
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#6FCD94" }, speed)  //green'
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#3AB6F1" }, speed)  //blue'
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#8684D8" }, speed)  //purple'
  prefs: []
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "#DD67AE" }, speed); //pink'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s another example of chaining methods together:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(selector).animate(properties).animate(properties).animate(properties);`'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – extending our script with a loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example we used the `animate()` method and with some help from jQuery
    UI, we were able to animate the body background color of our page. Have a go at
    extending the script to use a loop, so that the colors continually animate without
    stopping once the script gets to the end of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – chaining with the animate() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which code will properly animate our body background color from red to
    blue using chaining?
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $("body")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.animate({ background: "red" }, "fast")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.animate({ background: "blue" }, "fast");'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $("body")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.animate({ background-color: "red" }, "slow")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.animate({ background-color: "blue" }, "slow");'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $("body")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "red" })'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.animate({ backgroundColor: "blue" });'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $("body")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .animate({ backgroundColor, "red" }, "slow")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .animate({ backgroundColor, "blue" }, "slow");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The illusion of depth with parallax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term parallax, when used in the context of computer graphics, especially
    video games, refers to the technique of using multiple background layers that
    scroll at slightly different speeds to create the illusion of depth. Although
    not as widely deployed in modern gaming, thanks to the advent of richer 3D graphics
    engines, parallax is still seen frequently in portable gaming devices, and increasingly,
    on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: A parallax effect is achievable using pure CSS, as demonstrated nicely on the
    Silverback site (see [http://silverbackapp.com](http://silverbackapp.com) for
    the effect, and [http://blog.teamtreehouse.com/how-to-recreate-silverbacks-parallax-effect](http://blog.teamtreehouse.com/how-to-recreate-silverbacks-parallax-effect)
    for the details on how it was implemented). This application of parallax will
    only become apparent when the window is resized horizontally. While this is a
    fantastic effect when the window is resized, it doesn't help us if we want the
    effect to take more of a center stage.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating the stage and adding the styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The underlying page requires just four elements (for this simple example), which
    sit in the `<body>` of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the elements in the following structure to a fresh copy of the template
    file, between the `<body>` tag and the first `<script>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="background"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="midground"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="foreground"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="ground"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this page as `parallax-horizontal.html` in our `jquery-animation` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The CSS in this example is equally as simple as the underlying HTML. Add the
    following code to a new file in your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: div {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:100%;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:1000px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#background { background:url(../images/background.png) repeat-x 0 0; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#midground { background:url(../images/midground.png) repeat-x 0 0; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#foreground { background:url(../images/foreground.png) repeat-x 0 0; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#stage { background:url(../images/ground.png) repeat-x 0 100%; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `parallax-` `horizontal.css` in the `css` directory and update
    the HTML file we just created to link to this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point the page should look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action – creating the stage and adding the styling](img/9642_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The front area is the ground, the foreground layer is the darker colored bushes,
    the midground is the lighter colored bushes, and the background slice is the sky
    and clouds.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You'll also find the images for this example in the images folder of the code
    download accompanying this book. We have a separate image for each element that
    we wish to be part of the parallax effect, three in this example, one for the
    background, one for the midground, and one for the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: The underlying HTML is also very simple. We just have a separate `<div>` for
    each layer of the background. In CSS, each image layer is positioned absolutely
    so that they overlay each other. Now, let's get the layers of the parallax moving!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating the background position
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, for the `<script>` itself. At the bottom of the HTML file, as usual in
    the empty anonymous function, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: var bg = $("#background");
  prefs: []
  type: TYPE_NORMAL
- en: var mg = $("#midground");
  prefs: []
  type: TYPE_NORMAL
- en: var fg = $("#foreground");
  prefs: []
  type: TYPE_NORMAL
- en: $(document).keydown(function(e) {
  prefs: []
  type: TYPE_NORMAL
- en: if (e.which === 39) { //right arrow key
  prefs: []
  type: TYPE_NORMAL
- en: 'bg.animate({ backgroundPosition: "-=1px" }, 0, "linear" );'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mg.animate({ backgroundPosition: "-=10px" }, 0, "linear" );'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fg.animate({ backgroundPosition: "-=20px" }, 0, "linear" );'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: If we run this page in a browser now, we should find that as we hold down the
    right arrow key, the different background image slices move at relatively slower
    speeds with the foreground almost rushing past and the background moving leisurely
    along.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the script we first cache the selectors we'll be using so that we don't have
    to create a new jQuery object and select the elements from the DOM each time the
    `background-position` changes, which will be very frequently indeed. We then set
    a `keydown` event listener on the document object. Within the anonymous function
    we use as the event handler, we check whether the key code supplied by the `which`
    property of the event object (this is normalized by jQuery so it will be accessible
    via cross-browser) is equal to `39`, which is the key code returned by the right
    arrow key.
  prefs: []
  type: TYPE_NORMAL
- en: We then call the `animate()` on `backgroundPosition` and we supplied relative
    values of `-=1px`, `-=10px`, and `-=20px` to move each layer at progressively
    faster speeds, which gives us the parallax effect. These animations are called
    simultaneously, and have their durations set to zero (0) milliseconds and `linear`
    easing. This is the last thing our `keydown` handler needs to do.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero - extending parallax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, the backgrounds animate only from right to left. Extend the
    example so that both the left to right and right to left motion is available.
    Need help getting started? You'll need to create another function for the left
    arrow key and increment the `backgroundPostion` values instead of decrementing
    like we did in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic background animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we're going to make the background image animate up the page
    automatically, without any special interaction from our user.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating an automatic background animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to create an example that will automatically animate the background
    image now.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file using our template called `background-auto.html` and save
    it in our `jquery-animation` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we only have one line of CSS for our example, we aren''t going to create
    a stylesheet. We''re going to drop it in the file we just created (`background-auto.html`)
    under the `<title>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body {background:url(images/background.jpg) top center fixed;}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we'll remove the stylesheet `<link>` since we won't be using it in this
    example. This will be the line directly after the code we just added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, add the following code into our waiting anonymous function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var yPos = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var timer = setInterval(start, 50);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: function start() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: yPos = yPos - 5;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '$(''body'').css({ backgroundPosition: ''50% '' + yPos + ''px'' });'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following is a screenshot of what we just created. You'll notice that when
    viewing the example, the background image animates up the back from the bottom
    to the top.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating an automatic background animation](img/9642_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we did was declare our variable, `yPos`, as an integer. Doing
    this, as you may know, scares off any spooky JavaScript errors that haunt Internet
    Explorer and similarly, non-modern browser versions.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we declared our `timer` variable using `setInterval()`. In the previous
    chapter, we learned that the parameters for this method are `function` and `duration`.
    Our function name is `start`, so we set the `function` parameter to that. We also
    set our `duration` to `50` (milliseconds), as this is a suitable time frame for
    our function to wait before executing again.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created a function that can be called by our timer named `start`. We
    take the current value of `yPos` and subtract it by five each time our function
    executes. The last line of our function is what does all of the heavy lifting.
    This line animates the `<body>` background image's position vertically five pixels
    each time the function comes to this line in our script.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – playing under the hood
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a go at changing the `timer` duration and `yPos` offset values to see how
    these values affect the speed and frame rate at which our background animates.
    Another challenge would be to try to make the background animate horizontally
    instead of vertically, like we did for this example.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make it diagonal!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, instead of making the background image animate vertically, we're going
    to animate it diagonally now. Hold on to your programming hats!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating the background diagonally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to make our animation move diagonally now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the same file as before (`background-auto.html`) and replace the
    code in our anonymous function with the code below (new code is highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var xPos = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var yPos = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var timer = setInterval(start, 50);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: function start() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: xPos = xPos - 5;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: yPos = yPos - 5;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '$(''body'').css({ backgroundPosition: xPos +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''px '' +  yPos + ''px'' });'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `background-auto-diagonal.html`, and view it in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Previewing the animation should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – animating the background diagonally](img/9642_03_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the same code, we gave it a bit of an upgrade to allow us to animate both
    the X coordinates in addition to the Y coordinates of the background position.
    The variable `xPos` was added to control the left and right horizontal position
    and also added to the `backgroundPostion` line, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example mentioned previously, we made the background image animate northwest.
    Have a go at making the background animation move northeast, southeast, and southwest.
    Also, try using the different offset values for the `xPos` and `yPos` that aren't
    the same to see how it affects the background image animation direction.
  prefs: []
  type: TYPE_NORMAL
- en: Parallax background on page elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next example will show you how to animate an element's background position
    based on the interaction of the window's scroll. This animation can be hard to
    see based on how smooth scrolling looks in your browser and how smooth the scroll
    wheel on your mouse is. If you aren't seeing a smooth scroll effect, just grab
    the scroll bar on your browser and slowly move it up and down to see the effect
    more clearly. You'll notice that the background position moves at a slower rate
    than the elements on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting up the markup and styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin, we'll need to add the necessary HTML and CSS to a new document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML page using the same template as before and insert the following
    code into the `<body>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="row row1">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/image1.png">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="row row2">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/image2.png">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="row row3">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/image3.png">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the page in the `jquery-animation` directory as `parallax-vertical.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we should create the stylesheet that we just linked to. In a new file,
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: html, body {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin:0;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: padding:0;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: img {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:block;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: width:1000px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: margin:0 auto;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: padding-top:200px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .row { height:700px; }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .row1 { background:url(images/background1.jpg) repeat-x top center fixed;}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .row2 { background:url(images/background2.jpg) repeat-x top center fixed;}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .row3 { background:url(images/background3.jpg) repeat-x top center fixed;}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `parallax-vertical.css` in the `css` folder within our `project`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added in our HTML structure for the example. This consists of three
    rows holding only one image each. The CSS is pretty straightforward, as well.
    We're first removing all of the space around the `html` and `body` elements. Then,
    we set the width and position of the images. We then set the height of the rows,
    to give us a little space to be able to see the effect. In the wild, this will
    generally be spaced out by the element's content. Lastly, we set a background
    image on each of the rows, so that we can see a little variety in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – scripting our parallax script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's add in the code that'll make our background animate when we scroll
    down the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to our anonymous function so we can get this script
    off the ground and running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(window).scroll(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var yPos = -($(window).scrollTop() / 2);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '$(".row").css({ backgroundPosition: "50% " + yPos + "px" });'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here''s a screenshot illustration of how our script will function when previewed
    in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – scripting our parallax script](img/9642_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used a window scroll function here because we want to trigger our code every
    time our user scrolls through the window using the mouse wheel or the browser's
    scroll bar.
  prefs: []
  type: TYPE_NORMAL
- en: Our variable, `yPos`, is set to a negative value because we want the background
    animation to move in the same direction as the page elements that are being scrolled.
    Using `scrollTop()` gives us the current vertical scrollbar position of `window`.
    We then divide that number by two.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `css()` method to set our background position. The value `50%` is
    for the x axis, which is the horizontal axis of our browser. This tells our background
    image to center itself vertically. The y axis (or `yPos` in this case) is set
    to our above variable, `yPos`, and then `px` is appended to tell the script this
    number is in pixels. The `yPos` controls the horizontal placement of the image,
    and therefore centers the background image horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – customizing the speed and direction of the effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try changing the value of the number `yPos` is divided by, and then try changing
    the negative number to a positive number. Changing these values affect the speed
    and direction that our background position scrolls.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – the scroll() and scrollTop() methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What does the `scroll()` method do?
  prefs: []
  type: TYPE_NORMAL
- en: Scrolls to the next sibling element in the set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allows you to smoothly scroll to an element or numerical value (in pixels) on
    the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allows code to be run each time the selected element is scrolled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When set to `false`, enables disabled scrolling on the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What does the `scrollTop()` method do?
  prefs: []
  type: TYPE_NORMAL
- en: Jumps back to the top of the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outputs the current scroll position of the selected element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When used with the `click()` method, allows you to scroll to the top of an element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Animates the selected element to roll up like a piece of paper
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we looked at several examples that animate the background
    image on an element. Some of the things we learned were:'
  prefs: []
  type: TYPE_NORMAL
- en: The `animate()` method and some of the great things we can achieve with it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using jQuery UI to give our script color animation support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading between background colors on elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaining jQuery methods together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallax animations, where the background layers are animated at different speeds
    and directions to create the illusion of depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an automatic background image animation and how to make them animate
    in different directions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `scroll()` and `scrollTop()` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we're going to look at navigation animation and how we
    can bring some life to this common website feature. We're going to be creating
    a one page scroller script that jumps to sections in the page based on the link
    clicked. Also, we're going to be looking at how to change the background color
    of an element to bring attention to that area of the site.
  prefs: []
  type: TYPE_NORMAL
