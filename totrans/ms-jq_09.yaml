- en: Chapter 9. Using the Web Performance APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many times have you had a browser session running with multiple tabs? As
    a developer, I would expect that to almost be the norm, right?
  prefs: []
  type: TYPE_NORMAL
- en: Now, what if when you switched tabs, content was still playing on the original
    tab? It's really irritating, right? Sure, we could stop it, but hey, we're busy
    people with more important things to do…!
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, this is no longer an issue – in the age of mobile, where conservation
    of resources is ever more important, we can employ a few tricks to help curb our
    use. This chapter will introduce you to using the Page Visibility API, and show
    you how, with some simple changes, you can dramatically reduce the resources used
    by your site. Over the next few pages, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Page Visibility and requestAnimationFrame APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting and adding support, using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling activity using the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating support into practical uses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready to make a start? Good! Let's get going...
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the Page Visibility API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider this scenario for a moment, if you will:'
  prefs: []
  type: TYPE_NORMAL
- en: You're viewing a content-heavy site on an iPad, which is set to pre-render content.
    This is beginning to hammer the resources on the device, with the result that
    battery power is being drained quickly. Can you do anything about it? Well, on
    that site, probably not – but if it is a site you own, then yes. Welcome to the
    **Page Visibility API**.
  prefs: []
  type: TYPE_NORMAL
- en: The Page Visibility API is a nifty little API that detects when content in a
    browser tab is visible (that is, being viewed), or hidden. Why is this of interest?
    Simple – if a browser tab is hidden, then there is no point in playing media on
    the site, or running frequent polls to a service, right?
  prefs: []
  type: TYPE_NORMAL
- en: The net impact of using this API is aimed at reducing the use of resources and
    (consequently) saving power. After all, your visitors will not thank you if their
    batteries are drained as a result of visiting a media-heavy site!
  prefs: []
  type: TYPE_NORMAL
- en: Over the next few pages, we're going to visit this library in detail and see
    how we can use it with jQuery. Let's kick off with a look at browser support for
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike other APIs, support for this library is very good within all major browsers.
    As with many APIs, Page Visibility went through the usual process of requiring
    vendor prefixes, before reaching Recommendation stage at the end of October 2013\.
    At present, none of the recent browsers (post IE8) require vendor prefixes in
    order to operate.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical code extract that uses the Page Visibility API looks like the following
    code snippet, when using plain JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We'll be looking at using jQuery later on this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: It's trivial to implement it in code, so there is no excuse not to. To prove
    this, let's take a look at a demo in action.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Page Visibility API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've been introduced to the Page Visibility API, and have covered the
    benefits of using it to pause content when it is not visible. It's worth spending
    a moment to see how we can implement it in our code, and how such a simple change
    can reap massive benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll begin with covering the plain JavaScript first, before looking at using
    jQuery later in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by extracting the markup files we need from the code download that
    accompanies this book. For this demo, we'll need `basicuse.html` and `basicuse.css`.
    Save the files into the root and `css` subfolders of our project area respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in a new file add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the crux of our demo, using the Page Visibility API to determine if
    the tab is visible or hidden. Save this in the `js` subfolder of our project area
    as `basicuse.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, then when we preview the results in a browser, we should see
    something akin to the following screenshot – this shows the results after switching
    to a new tab and back again:![Implementing the Page Visibility API](img/image00412.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Breaking down the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A quick look through the code in the previous demo should reveal two properties
    of note – they are `document.visibilityState` and `document.hidden`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These form the Page Visibility API. If we look at `document.visibilityState`
    in more detail first, it can return any of the following four different values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hidden`: Page is not visible on any screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prerender`: Page is loaded off-screen, ready to be viewed by visitor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visible`: Page is visible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unloaded`: Page is about to unload (user is navigating away from current page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also make use of the `document.hidden` property - it is a simple Boolean
    property, that is set to `false` if page is visible and `true` if page is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Together with the `visibilitychange` event, we can easily be notified when
    the condition of a page''s visibility changes. We would use something akin to
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will work for most browsers, but not all. Even though it is a minority,
    we still have to allow for it. To see what I mean, try running the demo in IE8
    or below – it won't show anything. Showing nothing is not an option; instead,
    we can provide a path to degrade gracefully. So, let's take a look at how to avoid
    code collapsing into a heap.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting support for the Page Visibility API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the API will work perfectly well in most modern browsers, it will fail
    in a limited number; IE8 is a good example. To get around this, we need to provide
    either a root to gracefully degrade, or use a fallback; step one to this process
    is to first work out if our browser supports the API.
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways to do this. We could use the `Modernizr.addTest` option
    from Modernizr (from [http://www.modernizr.com](http://www.modernizr.com)). Instead,
    we're going to use a plugin by Matthias Bynens, which contains a check for support
    for older browsers. The original version is available from [https://github.com/mathiasbynens/jquery-visibility](https://github.com/mathiasbynens/jquery-visibility).
    The version included in the code download is a cut-down copy, which removes support
    for older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A version of this demo that uses Modernizr is available in the code download
    that accompanies this book. Extract and run the `usemodernizr.html` file to see
    how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how Page Visibility can be incorporated into our code, we
    will switch to using jQuery for this demo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to start with downloading the markup and styling files from the code
    download that accompanies this book. Go ahead and extract copies of the following:
    `usingjquery.html`, `usingjquery.css`, `jquery.min.js,` and `jquery-visibility.js`.
    Save the CSS file to the `css` subfolder, the JS files to the `js` subfolder,
    and the HTML file to the root area of our project folder.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a new file, add the following code – this contains the code required to
    check visibility, and confirm that the browser supports the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file as `usingjquery.js` in the `js` subfolder of our project area.
    If we run the demo in IE9 or above, we will see it render the changes as we switch
    between tabs. Refer to the following image:![Detecting support for the Page Visibility
    API](img/image00413.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try changing the browser to IE8 – either by using the IE Developer Toolbar,
    or switching to a native copy of the browser. We also need to change the version
    of jQuery used, as our demo was aimed at newer browsers. Change the link to jQuery
    to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now try refreshing the browser window. It will show that it doesn't support
    Page Visibility API, but equally does not crash out with unexpected errors. Refer
    to the next image:![Detecting support for the Page Visibility API](img/image00414.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With a fallback option in place, we now have two options here:'
  prefs: []
  type: TYPE_NORMAL
- en: We could just provide a path to gracefully degrade when a browser isn't supported.
    This is perfectly acceptable, but should be given consideration first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could otherwise provide fallback support to allow for older browsers to still
    be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's assume we use the latter route. We can do this using any one of a number
    of plugins; we will use the `visibility.js` plugin, created by Andrey Sitnik,
    for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Providing fallback support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Providing fallback support for any application is the bane of any developer's
    life. I lose count of the number of times I want to develop something that breaks
    new ground, yet can't. I have to provide support for older browsers that simply
    can't hack the new technology!
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, this is not an issue for the Page Visibility API – browser coverage
    is very good, although a minority number of browser versions still require some
    fallback support. There are a number of plugins available for this purpose – perhaps
    the most well-known is by Mathias Bynens, available at [https://github.com/mathiasbynens/jquery-visibility](https://github.com/mathiasbynens/jquery-visibility).
    We saw how to use a customized version in the previous demo.
  prefs: []
  type: TYPE_NORMAL
- en: For this demo, we're going to use a similar plugin by Andrey Sitnik, which is
    available from [https://github.com/ai/visibilityjs](https://github.com/ai/visibilityjs).
    This contains additional functionality that includes a timer to show how long
    your page is visible; we'll make use of this in the following demo.
  prefs: []
  type: TYPE_NORMAL
- en: Installing visibility.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin on the demo, it''s worth noting that the `visibility.js` plugin
    can be referenced several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: We can download the original from the GitHub link at [https://github.com/ai/visibilityjs](https://github.com/ai/visibilityjs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is available via Bower. To do this, you need Node and Bower installed. Once
    done, run the following command to download and install the plugin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It can even be referenced via a CDN link, which is currently [http://cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.1/visibility.min.js](http://cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.1/visibility.min.js).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the purposes of this demo, I'm assuming you're using the CDN version (which
    contains the additional timer functionality), but saved as a local copy.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note – if you don't use this method, then you will need to download all four
    visbility JavaScript files at [https://github.com/ai/visibilityjstree/master/lib](https://github.com/ai/visibilityjstree/master/lib),
    as these provide fallback and timer functionality that is otherwise available
    in the compressed CDN version.
  prefs: []
  type: TYPE_NORMAL
- en: Building the demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, now that we have our plugin in place, following is a screenshot of what
    we will demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the demo](img/image00415.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the relevant markup files from the code download that accompanies this
    book. For this exercise, we'll need the [fallback.html](http://fallback.html)
    and [fallback.css](http://fallback.css) files. Store these in the root and `css`
    folders of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll also need the `visibility.min.js` plugin file – they are both in the code
    download file. Extract and save this to the `js` subfolder in our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following to a new file, saving it as `fallback.js` within the
    `js` subfolder of our project area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code contains the magic required for our demo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the files. If we preview the results in a browser, we can expect to see
    something akin to the screenshot at the start of the exercise. If we switch to
    a different tab, as shown in the next screenshot, then the timer count is stopped
    temporarily, and the original tab's title is updated accordingly:![Building the
    demo](img/image00416.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, what happened? It's a really easy demo, but we first kicked off with a check
    to ensure our browser can support the API. In most cases, this isn't an issue,
    except for IE8 or below.
  prefs: []
  type: TYPE_NORMAL
- en: We then displayed the initial state of the window in its title area; this is
    updated each time we switch from the demo to a different tab and back. As a bonus,
    we made use of the `visibility.timer.js` plugin that comes with the main plugin,
    to show a count of how long our window has been visible. This of course is stopped
    each time we flip over to a different browser window and back again!
  prefs: []
  type: TYPE_NORMAL
- en: The great thing though, is that unlike the previous demo, the plugin will still
    work even if we're using IE8 or below; we might need to alter the code in our
    demo to ensure it is styled correctly, but this is a minor consideration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on. Now that we understand the basics of using the Page Visibility
    API, I am sure you are asking the question: how can we use it in a practical context?
    No problem – let''s take a look at some possible use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the API in a practical context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API can be used in a variety of different contexts. The classic is usually
    to help control playback of video or audio, although it can be used with other
    APIs such as the Battery API, to prevent content being displayed at all if power
    levels are too low.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a moment to delve into some practical examples, so we can see how
    easy it is to implement the API.
  prefs: []
  type: TYPE_NORMAL
- en: Pausing video or audio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most common uses of the API is to control playback of audio or media
    such as videos. In our first example, we're going to use the API to play or pause
    a video when switching between tabs. Let's delve in and take a look.
  prefs: []
  type: TYPE_NORMAL
- en: For this demo, we'll use a couple of additional items – the Dynamic Favicons
    library this is available from [http://softwareas.com/dynamic-favicons/](http://softwareas.com/dynamic-favicons/).
    Although a couple of years old, it still works OK with current versions of jQuery.
    The videos came from the Big Buck Bunny project website, at [https://peach.blender.org](https://peach.blender.org).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The videos for this demo are from the Blender Foundation, and are (c) copyright
    2008, Blender Foundation / [www.bigbuckbunny.org](http://www.bigbuckbunny.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'Right! Let''s get cracking:'
  prefs: []
  type: TYPE_NORMAL
- en: As always, we need to start somewhere. For this demo, go ahead and extract the
    `pausevideo` demo folder from within the code download that accompanies this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `pausevideo.js` file. This contains the code to play or pause the
    video, using the `jquery-visibility` plugin. Refer to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The plugin is very simple. It exposes two methods, namely `show.visibility`
    and `hide.visibility`. Try running the demo now. If all is well, we should see
    the Big Buck Bunny video play; it will pause when we switch tabs. Following is
    the screenshot of the video:![Pausing video or audio](img/image00417.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition, the window's title is updated using the `favicon.js` library. It
    shows a pause symbol when we switch tabs, as seen in the next image:![Pausing
    video or audio](img/image00418.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That was easy, huh? That's the beauty of the API. It is very simple, but works
    with a variety of different tools. Let's prove this, by incorporating support
    for the API into a **Content Management System** (**CMS**), such as WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support to a CMS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've seen how easy it is to incorporate support for the standard within
    static page sites – but what about CMS systems, such as WordPress, I hear you
    ask?
  prefs: []
  type: TYPE_NORMAL
- en: Well, the API can easily be used here too. Rather than talk about it, let's
    take a look and see how we can add it in. For this demo, I will use WordPress,
    although the principles will equally apply to other CMS systems such as Joomla.
    The plugin I will use is my own creation.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that you should have a working WordPress installation available,
    either online or as a self-hosted version, and that you have some familiarity
    installing plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note – the `jquery-pva.php` plugin is *only intended for development
    purposes*; it needs further work before it can be used in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make changes to the `functions.php` file within a theme. For this
    purpose, I will assume you are using the Twenty Fourteen theme. Open `functions.php`,
    and then add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the code download that accompanies this book, find and extract the `jquery-pva`
    folder, then copy it to your WordPress installation; it needs to go into the `plugins`
    folder. Return to your WordPress installation, then activate the plugin in the
    usual way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, log into your WordPress Admin area, then click on **Settings** | **PVA
    Options**, and enter the version number of jQuery that you would like to use.
    I will assume 2.1.3 has been chosen. Click on **Save Changes** for it to take
    effect. Refer to the following image:![Adding support to a CMS](img/image00419.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we can begin to use the library. If we upload a video and add
    it to a post, it will show the time elapsed when we begin to play it; this will
    pause when we switch tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding support to a CMS](img/image00420.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To confirm it is working, it is worth looking in the source, using a DOM Inspector.
    If all is well, we should see the following links. The first link would confirm
    that the Page Visibility library is referenced, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding support to a CMS](img/image00421.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second link would confirm that our script is being called, as seen in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding support to a CMS](img/image00422.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the API certainly has its uses! Throughout this chapter, I've
    tried to keep the code relatively simple, so that it is easily picked up. It's
    now over to you to experiment and take it further - perhaps I can give you some
    ideas for inspiration?
  prefs: []
  type: TYPE_NORMAL
- en: Exploring ideas for examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic principles of the Page Visibility API are simple to implement, so
    the level of complexity that we go to is only limited by one''s imagination. During
    my research, I came across some ideas for inspiration – hopefully the following
    will give you a flavor of what is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: Animations! Sometimes we can get issues with synching animations, if a tab is
    not active. [http://greensock.com/forums/topic/9059-cross-browser-to-detect-tab-or-window-is-active-so-animations-stay-in-sync-using-html5-visibility-api/](http://greensock.com/forums/topic/9059-cross-browser-to-detect-tab-or-window-is-active-so-animations-stay-in-sync-using-html5-visibility-api/)
    explores some of the tips available to help work around some of these issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This next one could either freak you, or just be plain irritating – take a look
    at [http://blog.frankmtaylor.com/2014/03/07/page-visibility-and-speech-synthesis-how-to-make-web-pages-sound-needy/](http://blog.frankmtaylor.com/2014/03/07/page-visibility-and-speech-synthesis-how-to-make-web-pages-sound-needy/),
    where the author has mixed both the Page Visibility and Speech Synthesis APIs.
    Be warned – he counsels against mixing the two; let us just say that this is likely
    to be more of a turn off! (It's included here for technical reasons only – not
    because we should do it.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A somewhat more useful technique is to use the Page Visibility API to reduce
    the number of checks for new emails or news feeds. The API would check to see
    if the tab is hidden, and reduce the frequency of requesting updates until the
    tab becomes active again. The developer Raymond Camden has explored the basics
    required to do this, so head over to his site to learn more, at [http://www.raymondcamden.com/2013/05/28/Using-the-Page-Visibility-API](http://www.raymondcamden.com/2013/05/28/Using-the-Page-Visibility-API).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To really mix things up, we can instigate some useful notifications, using the
    Page Visibility, Web Notification, and Vibration APIs at the same time. Have a
    look at [http://www.binpress.com/tutorial/building-useful-notifications-with-html5-apis/163](http://www.binpress.com/tutorial/building-useful-notifications-with-html5-apis/163)
    for ideas on how to mix the three together within the site or application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Okay, I think it's time for a change. Let's move on and take a look at another
    API that was created around the same time as the Page Visibility API, and works
    using similar principles to help reduce demand on resources.
  prefs: []
  type: TYPE_NORMAL
- en: I'm of course referring to the requestAnimationFrame API. Let's delve in and
    find out what it is, what makes it tick, and why such a simple API can be a real
    boon to us developers.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the requestAnimationFrame API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The shift to working online over the last few years has led to a massive increase
    in demand for performant browsers, while at the same time reducing resource consumption
    and battery power.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, browser vendors and Microsoft teamed together to create three
    new APIs. We've already explored one, in the form of the Page Visibility API;
    the other that we're going to look at is **requestAnimationFrame**. All three
    (the third being **setImmediate**) were designed for better performance and increased
    power efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the concept
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what is requestAnimationFrame? Simple – if you've spent any time creating
    animation using jQuery, you will no doubt have used the `setInterval` method (or
    even `clearInterval`), right? requestAnimationFrame (and clearAnimationFrame)
    were designed as drop-in replacements for each respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Why should we use it? We will explore the benefits of using requestAnimationFrame
    in the next section, but first let's understand its essence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most animations work to a JavaScript based timer of less than 16.7ms when drawing
    animations, even though monitors can only display at 16.7ms (or 60Hz frequency),
    as indicated by the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the concept](img/image00423.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Why is this important? The key to this is that a typical `setInterval` or `setTimeout`
    frequency is usually around 10ms. This means that every third draw of the monitor
    is not seen by the viewer, as another draw will happen before the display refreshes.
    Refer to the next graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the concept](img/image00424.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This results in a choppy display, as frames will be dropped. Battery life can
    be impacted by as much as 25 percent, which is a significant loss!
  prefs: []
  type: TYPE_NORMAL
- en: Browser vendors recognized this, so came up with the requestAnimationFrame API.
    This tells the application when the browser needs to update the screen, and when
    the browser needs a refresh. This results in a reduction in use of resources,
    and fewer dropped frames, as the frame rate is more consistent compared to code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The developer Paul Irish sums it up perfectly with the following comment on
    his blog at [http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/](http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/),
    when he notes that this allows browsers to "optimize concurrent animations together
    into a single reflow and repaint cycle, leading to higher fidelity animation."
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the API in action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As is nearly always the case, it is better seeing something in action, rather
    than reading about it. It's something about a moving demo that helps ram the concept
    home, at least for me!
  prefs: []
  type: TYPE_NORMAL
- en: To help with this, there are two demos available on the code download that accompanies
    this book – the `requestAnimAtionframe.html` and `cancelAnimationFrame.html` files.
    They contain simple examples of both APIs. We will explore more practical uses
    of the APIs towards the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using the requestAnimationFrame API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although it may not be immediately apparent from the simple demos that we referenced
    at the end of the previous section, there are some clear benefits to using requestAnimationFrame,
    which are listed next and are worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: requestAnimationFrame works with the browser to combine animations together
    into a single repaint during a redraw transition, using the screen refresh rate
    to dictate when these should happen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations are paused if a browser tab is inactive or hidden, which reduces
    requests to refresh the screen, resulting in lower memory consumption and battery
    use on mobile devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations are optimized by the browser, and not in code – the lower frame refresh
    rate results in a smoother, more consistent appearance, as fewer frames will be
    dropped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API is even supported on most mobile devices too. The only platform that
    doesn't support it at present is Opera Mini version 8.0\. The CanIUse site ([http://www.caniuse.com](http://www.caniuse.com))
    shows global usage of this as being very low at 3 percent, so this is unlikely
    to present too much of an issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's worth noting that cancelAnimationFrame (as a sister API to requestAnimationFrame)
    can be used to pause animations. We can potentially use this with something like
    the Battery API to stop animations (or media such as videos) from kicking in,
    if battery power is too low.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the difference between requestAnimationFrame against setTimeout, then
    take a look at [http://jsfiddle.net/calpo/H7EEE/](http://jsfiddle.net/calpo/H7EEE/).
    You can clearly see the difference between the two, despite the simple nature
    of the demo!
  prefs: []
  type: TYPE_NORMAL
- en: A key point to note though, is that there are instances where requestAnimationFrame
    doesn't always produce an improvement over using jQuery. There is a useful article
    by David Bushell at [http://dbushell.com/2013/01/15/re-jquery-animation-vs-css/](http://dbushell.com/2013/01/15/re-jquery-animation-vs-css/),
    which outlines this issue, and notes that requestAnimationFrame is best suited
    to being used in `<canvas>` based animations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating animations based around requestAnimationFrame (and cancelAnimationFrame)
    is very straightforward. The developer Matt West has created a JavaScript/jQuery
    example on CodePen, which is available at [http://codepen.io/matt-west/full/bGdEC](http://codepen.io/matt-west/full/bGdEC).
    He has written a tutorial that accompanies this demo, and which is available on
    Team Treehouse's blog at [http://blog.teamtreehouse.com/efficient-animations-with-requestanimationframe](http://blog.teamtreehouse.com/efficient-animations-with-requestanimationframe).
  prefs: []
  type: TYPE_NORMAL
- en: This brings us nicely onto our next subject. Now that we've seen how to manipulate
    the API using JavaScript, let's take a look at using similar techniques with jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Retrofitting the changes to jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've covered the basics of using requestAnimationFrame, along with
    its sister API, cancelAnimationFrame; we've seen how to implement it using either
    plain JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting at this point though that jQuery does not have native support
    included. An attempt was made to add it to jQuery prior to version 1.8, but was
    removed due to issues with support by the major browser vendors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, vendor support is now much better than previously; and there are
    plans to add requestAnimationFrame support into jQuery 2.2 or 1.12\. You can see
    the changes that need to be made as follows, along with the history:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The commit: [https://gitcandy.com/Repository/Commit/jQuery/72119e0023dcc0d9807caf6d988598b74abdc937](https://gitcandy.com/Repository/Commit/jQuery/72119e0023dcc0d9807caf6d988598b74abdc937)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The changes to `effect.js` which can be referred from [https://github.com/jquery/jquery/blob/master/src/effects.js](https://github.com/jquery/jquery/blob/master/src/effects.js)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the history behind including requestAnimationFrame in jQuery core:
    [https://github.com/jquery/jquery/pull/1578](https://github.com/jquery/jquery/pull/1578);
    [http://bugs.jquery.com/ticket/15147](http://bugs.jquery.com/ticket/15147)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a temporary measure (if you still need to support an earlier version of jQuery),
    you can try using Corey Frang's drop-in shim at [https://github.com/gnarf/jquery-requestAnimationFrame](https://github.com/gnarf/jquery-requestAnimationFrame),
    which adds support to versions of jQuery post 1.8.
  prefs: []
  type: TYPE_NORMAL
- en: If however you are feeling more adventurous, then it is easy enough to retrofit
    requestAnimationFrame support directly to a library that uses it. Let's take a
    moment to see what is involved in making the conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Updating existing code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Making the change is relatively straightforward. The key to it is making the
    changes modular so that they can be swapped back out easily, once jQuery gains
    support for requestAnimationFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes can be made if the library you are using has code references to
    either `setInterval` or `clearInterval`. For example, consider if we had the following
    code extract:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It would be updated to the following code extract, replacing the reference
    to `setInterval` with `requestAnimationFrame` (and adding the equivalent replacement
    for `clearInterval`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code example, the code highlighted in bold indicates the type
    of changes needed to update the code. We will use this technique later on in this
    chapter, to retrofit support to an existing library. It will be one of two demos
    that we will explore, which use requestAnimationFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Some examples of using requestAnimationFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we've seen the theory behind using requestAnimationFrame and covered
    the typical changes that we might have to make to existing code.
  prefs: []
  type: TYPE_NORMAL
- en: It's a good starting point, but not always easy to get one's head around the
    concept; it's much easier to see in action! With this in mind, we're going to
    take a look at a couple of demos, which make use of the API. The first will retrofit
    support, whilst the second has been built with support already included in the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a scrollable effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our first demo, we're going to take a look at updating an example of the
    classic scrollable UI element that can be found on hundreds of sites worldwide.
    We'll be using the Thumbelina plugin, available from [https://github.com/StarPlugins/thumbelina](https://github.com/StarPlugins/thumbelina).
    Although it is a couple of years old, it still works perfectly well, even with
    the latest version of jQuery!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, we''ll replace the `setInterval` call within the plugin, to `requestAnimationFrame`.
    Let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by extracting a copy of the `thumbelina` demo folder that is in
    the code download that accompanies this book. If we run the `scrollable.html`
    file, we should see a scrollable appear with images of orchids, as in the following
    image:![Creating a scrollable effect](img/image00425.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Thumbelina plugin currently uses `setInterval` to manage the time period
    between animations. We're going to alter it to use the new `requestAnimationFrame`
    instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open thumbelina.js, then add the following code immediately below `$.fn.Thumbelina
    = function(settings) {`, which is at line 16:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Scroll down to the following line, which will be on or around line 121:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify it as shown next, so it uses the new `requestInterval()` function we
    have just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file. If we run the demo, we should not see any visual difference;
    the real difference is what happens in the background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try running the demo in Google Chrome, then viewing the results within the Timeline.
    If you do a before and after, you should see a significant difference! If you
    are unsure how to profile the demo, then head over to [https://developer.chrome.com/devtools/docs/timeline](https://developer.chrome.com/devtools/docs/timeline)
    for full details.
  prefs: []
  type: TYPE_NORMAL
- en: Animating the Google Maps marker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our final demo in this chapter makes use of the well-known Google Maps service,
    to animate moving the marker that indicates a specific location on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating the Google Maps marker](img/image00426.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we're going to use the demo created by Robert Gerlach, which
    is available from [http://robsite.net/google-maps-animated-marker-move/](http://robsite.net/google-maps-animated-marker-move/).
    I've tweaked the code in his `markerAnimate.js` plugin file to remove the vendor
    prefixes, as these are no longer required.
  prefs: []
  type: TYPE_NORMAL
- en: 'He''s produced a neat effect that gives some life to what can appear very plain
    content. Nonetheless, it still requires a fair amount of code! Space constraints
    mean we can''t explore all of it in print, but we can explore some of the more
    important concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by extracting the `googlemap` demo folder from the code download
    that accompanies this book. This contains the styling, JavaScript libraries, and
    markup for our demo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `googlemap.html` in a browser. If all is well, we should see the pointer
    over Birmingham, UK, where Packt Publishing's UK office is based.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try clicking somewhere else on the map – notice how it moved across? It's taking
    advantage of some easing effects available in the jQuery Easing plugin, which
    we used back in [Chapter 6](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating in
    jQuery"), *Animating in jQuery*.
  prefs: []
  type: TYPE_NORMAL
- en: We can choose which easing effect to use by simply changing the value shown
    in the drop-down box in the bottom right corner. This could even include a custom
    animation that we craft, using the examples given in [Chapter 6](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery"), *Animating in jQuery* as a basis. As long as
    the custom animation function is included in our code, and the appropriate name
    is added to the dropdown, we can use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The real point to note is actually in the `markeranimate.js` file. If we open
    it and scroll down to lines **64** - **71**, we can see how `requestAnimationFrame`
    has been used. We use it if the browser supports the API, otherwise `setTimeout`
    is used, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating the Google Maps marker](img/image00427.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The combination of using an easing and calling `requestAnimationFrame` makes
    for a cool effect, that also reduces the demand on resources – great if you have
    a lot of animations on your site!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make it easier to incorporate replacements for `setInterval`, `clearInterval`
    (and `setTimeout` / `clearTimeout`), use the replacement functions by Joe Lambert,
    which are available at, [https://gist.github.com/joelambert/1002116](https://gist.github.com/joelambert/1002116).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring sources of inspiration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've covered a lot over the last few pages – it can take some time to fully
    appreciate how requestAnimationFrame (and its sister, clearAnimationFrame) work,
    but with the upcoming changes to jQuery, it is worth spending the time to familiarize
    ourselves with the APIs and the benefits they bring to our development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we round up this chapter, listed next are a couple of sources of inspiration
    that you may find useful:'
  prefs: []
  type: TYPE_NORMAL
- en: requestAnimationFrame is by no means limited to playing videos or music, or
    the like. It can even be used in developing online games! Take a look at [http://www.somethinghitme.com/2013/01/09/creating-a-canvas-platformer-tutorial-part-one/](http://www.somethinghitme.com/2013/01/09/creating-a-canvas-platformer-tutorial-part-one/)
    - hopefully you'll recognize some of the classics!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a more serious note, and for those sites using parallax scrolling, there
    is likely to be room for improvement in the implementation. Krister Kari has written
    a detailed blog post that goes through a typical example, and outlines some of
    the techniques that can be used to fix the issues. You can read it at [http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/](http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are plenty more sources available – over to you to see where your imagination
    takes you!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Delving into new APIs is always fun. Even though they can be simplistic in nature
    (check out the Vibration API, for example), they can prove to be a really useful
    addition to anyone's toolbox. We've explored two in detail in this chapter. Let's
    take a moment to recap what we've covered.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with an introduction to the Page Visibility API. We looked at
    browser support for the API, before implementing a basic example. We moved onto
    how to detect and provide fallback support, and then looked at some practical
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Next came a look at the requestAnimationFrame API, where we learnt about some
    of the similarities to the Page Visibility API. We explored the basics of how
    it worked, before looking at some practical uses and how to add support to jQuery
    itself. We then rounded up the chapter with a look at two examples; one based
    around converting to using the API, whilst the other had it built in from the
    ground up.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on, in the next chapter we'll explore another key element of websites,
    namely images. We're going to explore how you can manipulate images using jQuery
    to produce some really interesting effects.
  prefs: []
  type: TYPE_NORMAL
