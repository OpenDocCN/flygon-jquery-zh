["```js\n$.fn.simplePlugin101 = function(arg1, arg2/*, ...*/) { \n    // Plugin's implementation... \n};\n```", "```js\n$('h1').simplePlugin101('test', 1);\n```", "```js\n$.fn.simplePlugin101 = function() { \n    this.slideToggle(); \n    // \"this\" is a jQuery object where all \n    // jQuery methods are available\n};\n```", "```js\n$.fn.vibrate = function() { \n  this.each(function(i, element) { \n    // specifically handle every element\n    var $element = $(element); \n    if ($element.css('position') === 'static') { \n      $element.css({ position: 'relative' }); \n    } \n  }); \n\n  this.animate({ left: '+=3' }, 30) \n    .animate({ left: '-=6' }, 60) \n    .animate({ left: '+=6' }, 60) \n    .animate({ left: '-=3' }, 30); \n\n  return this; // allow further chaining\n};\n```", "```js\n$.fn.myLogPlugin = function() { \n    return this.each(function(i, element) { \n        console.log($(element).text()); \n    }); \n};\n```", "```js\njQuery.fn.simplePlugin101 = function(arg1, arg2/*, ...*/) { \n    var $buttons = jQuery('button');\n    // ...\n};\n```", "```js\n(function($) { \n    var callCounter = 0; \n\n    function utilityLogMethod(message) { \n        if (window.console && console.log) { \n            console.log(message); \n        } \n    } \n\n    $.fn.simplePlugin101 = function(arg1, arg2/*, ...*/) { \n        callCounter++; \n        utilityLogMethod(callCounter); \n        return this;\n    }; \n})(jQuery);\n```", "```js\n(function($) { \n    'use strict'; \n\n    $.fn.leakingPlugin = function() { \n        x = 0;// there is no \"var x\" declaration, \n        // so an error is thrown when executed\n    }; \n})(jQuery); \n\n$('div').leakingPlugin();\n```", "```js\n(function ( $, window, document, undefined ) { \n    // Plugin's implementation... \n})( jQuery, window, document );\n```", "```js\n(function($) { \n\n  $.fn.vibrate = function(options) { \n    var opts = $.extend({}, $.fn.vibrate.defaultOptions, options);\n\n    this.each(function(i, element) { \n      var $element = $(element); \n      if ($element.css('position') === 'static') { \n        $element.css({ position: 'relative' }); \n      } \n    }); \n\n    for (var i = 0, len = opts.loops * 4; i < len; i++) { \n      var animationProperties = {}; \n      var movement = (i % 2) ? '+=': '-='; \n\n      movement += (i === 0 || i === len - 1) ? \n        opts.amplitude / 2: \n        opts.amplitude; \n\n      var t = (i === 0 || i === len - 1) ? \n        opts.period / 4: \n        opts.period / 2; \n\n      animationProperties[opts.direction] = movement; \n      this.animate(animationProperties, t); \n    }\n\n    return this; \n  }; \n\n  $.fn.vibrate.defaultOptions = { \n    loops: 2, \n    amplitude: 8, \n    period: 100, \n    direction: 'left' \n  }; \n})(jQuery);\n```", "```js\n// do the default intense animation on a button\n// that appears disabled, to designate an invalid action \n$('button.disabled').on('click', function() { \n  $(this).vibrate(); \n}); \n\n// do a smother shake animation to catch the user's \n// attention on an important part of the page \n$('.save-button').vibrate({loops: 3, period: 250}); \n\n// start a long running levitation effect on the header of the page \n$('h1').vibrate({direction: 'top', loops: 1000, period: 5000});\n```", "```js\n(function($) { \n  $.fn.mutationObserver = function(action) { \n    return this.each(function(i, element) { \n      var $element = $(element); \n      var instance = $element.data('plugin_mutationObserver'); \n\n      if (!instance) { \n        var observer = new MutationObserver(function(mutations) { \n          mutations.forEach(function(mutation) { \n            instance.callbacks.forEach(function(callbackFn) { \n              callbackFn(mutation); \n            }); \n          }); \n        }); \n\n        observer.observe(element, {\n          attributes: true,\n          childList: true,\n          characterData: true\n        }); \n\n        instance = { \n          observer: observer, \n          callbacks: [] \n        }; \n        $element.data('plugin_mutationObserver', instance); \n      } \n\n      if (typeof action === 'function') { \n        instance.callbacks.push(action); \n      } \n    }); \n\n  }; \n})(jQuery);\n```", "```js\n$('.container').mutationObserver(function(mutation) { \n  console.log('Something changed on the DOM tree!'); \n});\n```", "```js\n(function($) { \n  $.fn.mutationObserver = function(action) { \n    return this.each(function(i, element) { \n      var $element = $(element); \n      var instance = $element.data('plugin_mutationObserver'); \n\n      if (action === 'destroy' && instance) { \n        instance.observer.disconnect(); \n        instance.observer = null;\n        $element.removeData('plugin_mutationObserver'); \n        return; \n      } \n\n      if (!instance) { \n        /* ... */ \n      } \n    }); \n\n  }; \n})(jQuery);\n```", "```js\n$('.container').mutationObserver('destroy');\n```", "```js\n(function($) { \n  $.fn.mutationObserver = function(action, callbackFn) { \n    var result = this; \n\n    this.each(function(i, element) { \n      var $element = $(element); \n      var instance = $element.data('plugin_mutationObserver'); \n      /* ... */ \n\n      if (typeof action === 'function') { \n        instance.callbacks.push(action); \n      } else if (action === 'callbacks') { \n        if (callbackFn && callbackFn.length >= 0) { \n          // used as a setter \n          instance.callbacks = callbackFn; \n        } else { \n          // used as a getter for the first element \n          result = instance.callbacks; \n          return false;// break the $.fn.each() iteration \n        } \n      }\n    }); \n\n    return result; \n  }; \n})(jQuery); \n```", "```js\n// retrieve the callbacks \nvar oldCallbacks = $('.container').mutationObserver('callbacks'); \n// clear them \n$('.container').mutationObserver('callbacks', []); \n// add a new one \n$('.container').mutationObserver(function() { \n  console.log('Printed only once'); \n  // restore the old callbacks\n  $('.container').mutationObserver('callbacks', oldCallbacks); \n});\n```", "```js\n(function() { \n    'use strict'; \n    dashboard.counter = dashboard.counter || {}; \n\n    var $counter; \n\n    dashboard.counter.init = function() { \n        $counter = $('#dashboardItemCounter'); \n        var $boxContainer = dashboard.$container\n          .find('.boxContainer'); \n\n        $boxContainer.mutationObserver(function(mutation) { \n            dashboard.counter.setValue($boxContainer.children().length); \n        }); \n    }; \n\n    dashboard.counter.setValue = function (value) { \n        $counter.text(value); \n    }; \n})(); \n```", "```js\n/*! \n * jQuery lightweight plugin boilerplate \n * Original author: @ajpiano \n * Further changes, comments: @addyosmani \n * Licensed under the MIT license \n */ \n;(function ( $, window, document, undefined ) { \n  var pluginName = \"defaultPluginName\", \n    defaults = { \n      propertyName: \"value\" \n    }; \n  function Plugin( element, options ) { \n    this.element = element; \n    this.options = $.extend( {}, defaults, options) ; \n    this._defaults = defaults; \n    this._name = pluginName; \n    this.init(); \n  } \n  Plugin.prototype = { \n    init: function() { /* Place initialization logic here  */ },\n    yourOtherFunction: function(options) { /* some logic */ }\n  };\n  // A really lightweight plugin wrapper around the constructor, \n  // preventing against multiple instantiations \n  $.fn[pluginName] = function ( options ) { \n    return this.each(function () { \n      if (!$.data(this, \"plugin_\" + pluginName)) { \n        $.data(this, \"plugin_\" + pluginName, \n        new Plugin( this, options )); \n      } \n    }); \n  }; \n\n})( jQuery, window, document ); \n```", "```js\n$.fn[pluginName] = function ( options, extraParam ) { \n  return this.each(function () { \n    var instance = $.data(this, \"plugin_\" + pluginName); \n    if (!instance) { \n      instance = new Plugin( this, options ); \n      $.data(this, \"plugin_\" + pluginName, instance); \n    } else if (options === 'yourOtherFunction') { \n      instance.yourOtherFunction(this, extraParam); \n    } \n  }); \n};\n```", "```js\n$.fn[pluginName] = function ( options ) {\n  var restArgs = Array.prototype.slice.call(arguments, 1);\n  return this.each(function () {\n    var instance = $.data(this, \"plugin_\" + pluginName);\n    if (!instance) {\n      instance = new Plugin( this, options );\n      $.data(this, \"plugin_\" + pluginName, instance);\n    } else if (typeof options === 'string' && // method name\n      options[0] !== '_' && // protect private methods\n      typeof instance[options] === 'function') {\n      instance[options].apply(instance, restArgs);\n    }\n  });\n};\n```"]