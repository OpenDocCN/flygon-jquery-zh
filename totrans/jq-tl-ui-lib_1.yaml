- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've built web pages, or developed websites using HTML over the last few
    years, you will most likely have heard of jQuery—you may not have heard of jQuery
    Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Web professionals all over the world have been trying to make the Internet a
    more usable place to visit, using JavaScript to try to overcome some of the shortcomings
    of HTML and CSS. jQuery's power and flexibility lie in its deceptive simplicity,
    making navigating a document, selecting elements on a page, and handling events,
    straightforward, while smoothing out any browser differences. There are a number
    of UI libraries available on the Internet that offer functionality based on jQuery.
    jQuery Tools is one of them—while although many libraries were designed to offer
    a wide variety of functionality, jQuery Tools was designed to offer only the functionality
    that is most useful on a normal website, in other words not a JavaScript application
    based site. Its small size belies its power and flexibility, offering a huge amount
    of functionality in just 4 KB.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we shall learn:'
  prefs: []
  type: TYPE_NORMAL
- en: A little of the history of jQuery Tools, and some of its guiding principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to download and install the library, or use the CDN links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some best practices for writing events and using the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's begin...
  prefs: []
  type: TYPE_NORMAL
- en: 'jQuery Tools basics and rules: a primer'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Let''s face it—do you really need drag-and-drop, resizable windows, or sortable
    lists in your web applications…?"'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the answer is no, then welcome to jQuery Tools! jQuery Tools were designed
    to provide a number of Web 2.0 goodies found on websites around the Internet,
    that can be extended, customized, and styled the way you desire. The principle
    aim of the tools is to provide a bare bones framework of functionality, that offers
    just the functionality needed, and nothing else—the API framework can then be
    used to extend the tools in a myriad of ways. With this in mind, let's take a
    look at the ethos of jQuery Tools in a little more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The role of HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery Tools library was designed with a high degree of flexibility, where
    you can progressively enhance the functionality of a normal website, while still
    allowing for browsers that don't support JavaScript. When using the toolset, you
    are not limited to any particular HTML structure; you are free to use any suitable
    elements such as `ul, ol, div`, or `dl` at will. It is crucial to understand what
    you are doing, and how to choose the right element for your specific requirement.
    A root element, such as a `div` can equally be used, although this is not obligatory.
    For example, you could have an overlay's root element that contains a mix of HTML,
    images, forms, and Flash objects, as your overlaid information.
  prefs: []
  type: TYPE_NORMAL
- en: The role of JavaScript and jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although the JQuery Tools library was built using jQuery, it is, with the exception
    of FlashEmbed, not a prerequisite to using the Tools. While you can use the tools
    without any prior knowledge of jQuery, it can help with extending or enhancing
    the functionality within the library, and on your site. If you would like to delve
    more into using jQuery with the tools, then a useful place to start is by looking
    at selectors and object literals, such as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code can be split into two parts—the first part selects all `ul`
    elements with the class name of `tabs`, contained in a `div` called `content`,
    in a similar manner to CSS. The `tabs` functionality is then set to operate on
    all div elements held directly within the `div` with a CSS style class of `panes`.
    You can use a similar format of syntax when configuring any of the tools, although
    it would be wise to take care over typing the right number of brackets! Irrespective
    of which tool you use, you will need to encompass any script within a `$(document).ready()`
    block, so that the script can be loaded at the appropriate time—you may find it
    preferable to load the script into the footer of your website (this is required
    for some of the tools).
  prefs: []
  type: TYPE_NORMAL
- en: The role of CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery Tools was designed to allow website designers to abstract code away from
    the main "block", and into separate style sheets. You will notice that CSS style
    names have been used where possible. This makes styling the code more flexible,
    as styles can be changed at will, without needing to change the main code—though
    it is not a recommended practice to mix CSS styles within JavaScript or HTML code.
    As an example, you can style an instance of an active tab within `tabs:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After that you can style the current tab with CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This allows you to control the appearance of an instance of `tabs` completely,
    even down to changing the default style names used. This is useful if you already
    have existing styles which would otherwise conflict, or if you need to follow
    a particular CSS naming convention.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery Tools website hosts a number of demos, which contain CSS style files
    that are available for you to use—it is worth checking these out to get a feel
    for the basics on styling the Tools. All of the demos are fully documented and
    use good CSS styling practices.
  prefs: []
  type: TYPE_NORMAL
- en: Using tools for graphic design and presentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a developer using jQuery Tools, you have a high degree of freedom when it
    comes to styling the Tools on your site. This means you can use pure CSS, images,
    or a mix of both within your designs.
  prefs: []
  type: TYPE_NORMAL
- en: CSS-based design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using pure CSS within your design means a reduced reliance on images, as most
    (if not all) of the styles can be handled by using pure CSS. This is particularly
    true with the advent of CSS3, which can handle styles such as gradients in backgrounds,
    that would otherwise require images. However, it does mean that while pages are
    lightweight and easy to maintain, it is not possible to achieve everything using
    just CSS, at least up to version 2\. The advent of CSS3 is beginning to change
    this, although your latest stunning design may not work in older browsers!
  prefs: []
  type: TYPE_NORMAL
- en: Image-based design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If images are more to your style, then the best method is to use an image sprite,
    which is the favored method within jQuery Tools. Sprites can be positioned exactly,
    using CSS, and as long as an appropriate image format is used, will display in
    most (if not all) browsers. This allows you to achieve exactly the look and feel
    you are after, without any compromise, although it will make pages heavier, and
    it could mean more use of scrollbars, if you have a large amount of content within
    a Tool (such as an Overlay).
  prefs: []
  type: TYPE_NORMAL
- en: CSS and image-based design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This method gives you the best of everything—CSS can be used to keep the page
    download times low, while images can be used where CSS styles are inappropriate
    in your environment. jQuery Tools uses both within its demos, you are equally
    free to use both within your own designs, with no restriction on CSS coding or
    the requirement to use frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Using tools for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purposes of completing the exercises in this book, you will need a text
    editor. Most PCs will come with one—usually Notepad on Microsoft Windows, or TextEdit
    on Mac OS X. There are literally thousands available for free or low cost, with
    varying degrees of features.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are an existing developer, you will likely have your editor of choice
    already; for those of you who are new to editing, it is a matter of trying a few,
    and seeing which you prefer. There are some features I would recommend you enable
    or use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View line numbers:** This feature is handy during validating and debugging
    any scripts that you write. This can be of particular help when requesting assistance
    in the forums, as others can indicate any line(s) at fault, and help provide a
    fix or workaround.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View syntax colors:** Most editors will have this feature switched on by
    default. This feature displays code using different colors, which helps you to
    identify different syntax, or broken mark-up or CSS rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text wrapping:** This allows the editor to wrap code lines around onto the
    next line, which reduces the need to scroll through long lines of code when editing.
    It makes it easier to scroll through a nice, correctly indented, block of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may also want an editor which allows you to upload files using FTP, or
    view your local directories. This avoids the need to go hunting for files in your
    OS''s file explorer, or using an external FTP application to get copies of files,
    and cuts down the time it takes to edit files. To view the results of the experiments
    and samples, you will need a browser—jQuery Tools uses CSS3 styling, so a modern
    browser will provide the most feature-rich and design-rich experience. This includes
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Firefox 2.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer 7+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari 3+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera 9+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome 1+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Any of these browsers can be downloaded for free from the Internet. If you
    are using Internet Explorer or Firefox and if you do not already have them installed,
    it is strongly recommended that you also install or activate the appropriate developer
    toolbar for your chosen browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IE Developer Toolbar:** It is available from [http://www.microsoft.com/download/en/details.aspx?id=18359](http://www.microsoft.com/download/en/details.aspx?id=18359)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Firebug:** Developer tool for Firefox, which can be downloaded from [http://www.getfirebug.com](http://www.getfirebug.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chrome:** This is already built in, and can be activated by right-clicking
    an element and selecting **Inspect element**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari:** You can activate its developer toolbar under the **Advanced** tab
    in Safari **Preferences**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Opera:** You can download its developer toolbar from [http://www.opera.com/dragonfly/](http://www.opera.com/dragonfly/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All will be very useful in helping you debug your scripts, when designing sites
    that use jQuery Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is to get a copy of the jQuery Tools library,
    from the official website ([http://www.flowplayer.org/tools](http://www.flowplayer.org/tools)).
  prefs: []
  type: TYPE_NORMAL
- en: The modular nature of jQuery Tools means that you can choose the components
    you want to download, or you can choose to download a copy of the entire library.
    This is important if you want to keep your pages as light as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options available for the purpose of downloading the jQuery
    Tools library: you can use the free CDN links (even for production use), download
    a custom version, or download an uncompressed version from the Github area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you include this statement in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will have the following tools available:'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery 1.6.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tooltip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrollable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overlay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tools will be loaded with maximum performance no matter where your user
    is located on the globe. If you already have jQuery included on your page, you
    can simply remove it and use only the script `src` statement (as it already includes
    jQuery), or, if you prefer, insert the tools without jQuery link, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then reference jQuery separately; the best practice is to use Google''s CDN
    link, which is (at time of writing):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: But I want more… using the CDN links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you prefer, you can use one of the other CDN links provided for referencing
    jQuery Tools—CDN stands for **Content Delivery Network**, which is a high-speed
    network that allows fast provision of content around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several advantages to using this method:'
  prefs: []
  type: TYPE_NORMAL
- en: If you've already been to a site where jQuery Tools have been used, then it
    will already be cached, and this means you don't have to download it again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content is made available through local servers around the world, which reduces
    the download time, as you will get a copy of the code from the nearest server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some of the links available for you to use, more are available
    on the jQuery Tools website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For the purpose of this book, you should use the main CDN link, so that we can
    make sure we're all on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling your own tools—using the download builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modular design of jQuery Tools allows you to pick and choose which components
    you need for your projects. If your project doesn't need all of the components,
    then it's good practice to only download those that you need, to reduce the page
    weight and keep page response time as low as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The download builder ([http://flowplayer.org/tools/download/index.html](http://flowplayer.org/tools/download/index.html))
    produces minified versions of the tools you choose, into one file—this can include
    jQuery if desired. The default download (shown overleaf) includes the major tools,
    which are **Overlay, Tabs, Scrollable**, and **Tooltips**—you can change these
    selections to only download those components you need for a specific project.
    You can also choose to include jQuery 1.6.4 at the same time, which helps to cut
    down page load times, as explained earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using Firebug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using a debugger such as Firebug, you can test which tools are included
    and what are their versions by running the following command from the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Firebug](img/7805_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see each tool you have included and the version number. If you drill
    down a little deeper into these global settings you will see each tool's default
    configuration values (a good source for documentation!), which are discussed more
    extensively in the important *Using Global Configuration* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Firebug](img/7805_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Including and initializing the tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to include the Tools on your page—you can either use one of
    the CDN links as shown earlier, or include a custom version using the download
    builder.
  prefs: []
  type: TYPE_NORMAL
- en: Then you need to initialize the tools—they all follow the same pattern, which
    starts with a jQuery selector, followed by the initialization function (or constructor),
    and its configuration object. Here is an example using the scrollable tool, where
    elements are contained within an element whose ID is `scroll:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the API format, the constructor will always return the jQuery object
    that is a collection of the elements that are selected by the selector, which
    you can then continue to work with, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using global configurations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes you may find that you want to specify a default configuration value,
    so that you can avoid the need to set the same settings repeatedly in your code.
    jQuery Tools has a global configuration option, `$.tools.[TOOL_NAME].conf`, which
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This means you then don''t need to include it in your JavaScript code for Overlay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then override it if you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change multiple configuration options at a global level, you
    can use the jQuery built-in `$.extend` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The list of various configuration settings can be found on each individual tool's
    documentation page.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use something like Firebug to get more details of the global configuration,
    by typing in this command `console.dir($.tools.overlay.conf)`; which will produce
    images similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using global configurations](img/7805_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Best practices for events and API calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will look at some of the best practices for each of the tools,
    including how to use the API, write events, and design plug-ins using jQuery Tools
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Application Programming Interface (API)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As time goes by, you will want to extend your skills with jQuery Tools you can
    do this by using its API, which was built to expose methods and access properties
    for each tool in the library. The API hides the internal values from the outside
    world, which is good programming practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, you need to create an instance of the API for that tool, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice that the argument passed to `data` in brackets is that of the
    tool name this could be changed to `overlay`, for example. When you have the API
    instance created, you can start using it, by calling its methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can easily see the available API methods a jQuery Tool is using with Firebug,
    which can act as a good source of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application Programming Interface (API)](img/7805_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the API means that you are less likely to need all of jQuery's DOM methods,
    as most of the methods you need will be available from within the tool. This includes
    methods to retrieve information, as well as set values or invoke actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even chain methods onto an API instance of a tool, as the method will
    always return the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If your selector returns multiple instances and you want to access a particular
    API, you can do following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: jQuery Tools events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the API, each tool can respond to events as specific points in time where
    an action needs to be completed. A good example of this is **Scrollable**—each
    time you scroll through images, for example, you could fire the `onSeek` event.
    You could add your own custom responses (or listeners) each time this happens—this
    is particularly useful if you want to extend the default behavior of the tools.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Event listeners are often referred to as **callbacks**—both terms are equally
    valid.
  prefs: []
  type: TYPE_NORMAL
- en: Before and after events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can add your own custom functionality to any of the Tools, as they provide
    the before and after event methods for this purpose. These actions can equally
    be cancelled using the `onBefore` event, such as in this example, which uses the
    `onBeforeClick` callback for tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Supplying events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three different ways of supplying event listeners in the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first, and easiest, option is to include event listeners as part of your
    code directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: A downside of using this option means that you can't specify multiple instances
    of the same callback in the code. For example, including two different `onClick`
    methods in the same configuration would result in an error.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous example, the `this` variable is a reference to the Tabs API.
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery's bind method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The second method follows that used within jQuery, where you can assign multiple
    listeners consecutively, in a chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this method offers greater flexibility, as it allows you to remove specific
    event listeners within the code, or to bind several instances of the same event
    listener within the same call. In the preceding example, the CSS .tabs selector
    is set to perform two actions when the `onClick` event is triggered by any of
    the tabs using that selector. The tools also allow you to bind the same event
    listener to multiple event trigger types in a single call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It is strongly recommended that you try to familiarize yourself with this functionality
    in some depth, if you aren't already familiar with event binding—there is plenty
    of good reference material available in this area.
  prefs: []
  type: TYPE_NORMAL
- en: Supplying listeners from the API
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The tools also allow you to supply one or more callbacks from within the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the internal `this` variable as a reference to any of the Tools
    APIs, which will allow you to chain multiple event listeners together; this is
    more suitable for developers who are not already familiar with jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The event object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using callbacks, it is worth noting that the Tools adhere to the
    current W3C standards, when passing the `event` object as the first argument for
    each callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Within the scope of jQuery Tools, the `preventDefault()` is identical to returning
    false from the callback; this is considered to be the accepted practice for cancelling
    the default event.
  prefs: []
  type: TYPE_NORMAL
- en: Creating jQuery Tools plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Tools were designed to work in tandem with jQuery, which allows you to
    create jQuery Tools-based plugins. Using jQuery, you can easily alter or extend
    the default behavior of the tools, with the added benefit of being able to reference
    the Tools API, and use any number of callback functions. To give you some idea,
    here''s a simple example of a plugin that uses Google Analytics to track each
    click, every time a tab is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those of you not familiar with writing jQuery plugins, you may like to look
    at the jQuery 1.4. *Plugin Development Beginner's Guide*, by Giulio Bai, published
    by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have included the plugin on your page, you can use the plugin in
    the following manner, which follows the standard format for developing the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'jQuery Tools require that the tabs be initialized before the analytics plugin,
    so you cannot write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using jQuery Tools plugins and effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The design of jQuery Tools allows you to make full use of jQuery''s chaining
    capabilities, which means you can create chain patterns, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, the base Scrollable call will turn any element with the `.scroller` class
    into a scrollable and the Tools' minimalist design means you are free to then
    extend or alter the behavior by use of additional code or plugins, such as adding
    the navigator or autoscroll, whilst keeping code easier to read and file sizes
    smaller. The net result is that you can then set up a number of scrollables on
    a page, which are all activated using the same single line of code, but which
    contain their own local configuration values (this could equally be global). This
    decorator philosophy forms part of the whole ethos of jQuery Tools (and indeed
    jQuery as a whole). Most tools come with a number of plugins that are available
    for download, or you can add your own custom-built ones if desired.
  prefs: []
  type: TYPE_NORMAL
- en: Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Coupled with the plugin architecture available with most tools, you can also
    design your own effects for use with some of the tools. This will allow you to
    change the default behavior of the tool being used, whereas plugins would be used
    to extend that behavior. For example, you can add an effect to control how overlay
    opens or closes—an example of this is the apple effect, which comes with overlay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The use of additional effects means that you can hive off code into separate
    files, which makes the base overlay code smaller and more organized. You can then
    take this a step further by creating more effects that can be referenced from
    separate files, and dropped into your code as necessary. You could also set a
    specific effect to be used as your default effect, from within a global configuration;
    this reduces the need to specify in each instance it is used in your code. You
    can also achieve the same effect with configuration values—if you have a number
    of values that are set as part within an effect, you can then set these to apply
    by default at a global level, for every instance where this effect is used. For
    example, you may have an `explosionSpeed` value set in your effect—the following
    would turn it into a global configuration variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: It is worth having a look at [http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/),
    the home of the jQuery Easing plugin; there are a number of effects there, that
    can be adapted for use within jQuery Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Performance of jQuery Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A key design facet of jQuery Tools, as outlined by Yahoo''s five rules of best
    practice, is that designers should try to reduce the number of images, stylesheets,
    and scripts that have to be downloaded. Yahoo argues that this is the key to improving
    the speed of your site, as most of the time spent looking at a site is from the
    front-end. The five rules created by Yahoo!, and to which jQuery Tools adheres,
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce the number of HTTP requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a CDN link, for incorporating scripts into your code where possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `expires` header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GZIP components where possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minimize the JavaScript by compressing the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you include the following script link in your code, you will be able to
    respect these five rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: They can help to improve the performance of your site significantly and improve
    your website performance roughly by 70 to 80 percent! You are encouraged to use
    the CDN links that are made available, especially for production use; if you are
    concerned about the file size you should download a combined script that contains
    only those tools that you really need and follow the principles that are mentioned
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Reduce the number of HTTP requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good practice is to minimize the number of separate JavaScript or CSS files
    used in a site—this helps to reduce the amount of time taken to fetch content
    from different sources. This is allowed for within jQuery Tools, which uses one
    combined JavaScript file when either downloading a custom build of the library,
    or using the CDN links.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Tools are available through CDN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of CDN links that are available for use—using these can result
    in a 15 to 20 percent increase in efficiency, in comparison to using manual, static
    links.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an expires header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JQuery Tools are built with `expires` headers set on all of the tools, which
    makes them cacheable; this will reduce subsequent response times from each visit
    to a site by as much as 50 percent.
  prefs: []
  type: TYPE_NORMAL
- en: GZIP components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If gzipping has been enabled on a server, then this can help cut file sizes
    by as much as 65 percent; most modern browsers claim to be able to handle gzipping,
    when it has been enabled on a server. All jQuery Tools downloads available through
    the CDN links are gzipped, to help reduce download times.
  prefs: []
  type: TYPE_NORMAL
- en: Minifying JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery Tools scripts are minified using Google Closure Compiler to reduce the
    file sizes and increase performance, as this yields a higher compression ratio
    than simply packing the same files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about:'
  prefs: []
  type: TYPE_NORMAL
- en: The basics of jQuery Tools, and some of the rules that it follows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to download a copy of the library or to use the CDN links provided
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the best practices for writing events and API calls when using jQuery
    Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We discussed how you can leverage jQuery Tool's modular nature, to download
    only those components you need for your projects. We also looked at some of the
    rules and best practices that should be used when designing pages or projects
    that use jQuery Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've learned about the basics of jQuery Tools, and how to install
    it, we're ready to start delving into using it, which is the subject of the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
