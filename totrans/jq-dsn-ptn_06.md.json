["```js\n// Create the request object \n// (This is still attached to ajaxSettings for backward compatibility) \njQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? \n  // Support: IE6-IE8\n  function() { \n\n    // XHR cannot access local files, always use ActiveX for that case \n    if ( this.isLocal ) {\n      return createActiveXHR();\n    }\n    // Support: IE 9-11\n    if ( document.documentMode > 8 ) {\n      return createStandardXHR();\n    }\n    // Support: IE<9\n    return /^(get|post|head|put|delete|options)$/i.test( this.type ) && createStandardXHR() || createActiveXHR();\n\n  } : \n  // For all other browsers, use the standard XMLHttpRequest object \n  createStandardXHR; \n\n// Functions to create xhrs \nfunction createStandardXHR() { \n  try { \n    return new window.XMLHttpRequest(); \n  } catch ( e ) {} \n} \n\nfunction createActiveXHR() { \n  try { \n    return new window.ActiveXObject( \"Microsoft.XMLHTTP\" ); \n  } catch ( e ) {} \n}\n```", "```js\n    <h1>Data Driven Form</h1> \n\n    <form></form> \n\n    <script type=\"text/javascript\" src=\"img/jquery.js\"></script> \n    <script type=\"text/javascript\" src=\"img/datadrivenform.js\"></script> \n```", "```js\n(function() { \n  'use strict'; \n\n  window.dataDrivenForm = window.dataDrivenForm || {}; \n\n  dataDrivenForm.formElementHTMLFactory = function (type, name, title) { \n    if (!title || !title.length) { \n      title = name; \n    } \n    var topPart = '<div><label><span>' + title + ':</span><br />'; \n    var bottomPart = '</label></div>'; \n    if (type === 'text') { \n      return topPart + \n        '<input type=\"text\" maxlength=\"200\" name=\"' +name + '\" />' + \n        bottomPart; \n    } else if (type === 'email') { \n      return topPart + \n        '<input type=\"email\" required name=\"' + name + '\" />' + \n        bottomPart; \n    } else if (type === 'number') { \n      return topPart + \n        '<input type=\"number\" min=\"0\" max=\"2147483647\" ' +'name=\"' + name + '\" />' + \n        bottomPart; \n    } else if (type === 'date') { \n      return topPart + \n        '<input type=\"date\" min=\"1900-01-01\" name=\"' +\n          name + '\" />' + \n        bottomPart; \n    } else if (type === 'textarea') { \n      return topPart + \n        '<textarea cols=\"30\" rows=\"3\" maxlength=\"800\" name=\"' +name + '\" />' + \n        bottomPart; \n    } else if (type === 'checkbox') { \n      return '<div><label><span>' + title + ':</span>' + \n        '<input type=\"checkbox\" name=\"' + name + '\" />' + \n        '</label></div>'; \n    } else if (type === 'notice') { \n      return '<p>' + name + '</p>'; \n    }  else if (type === 'button') { \n      return '<button name=\"' + name + '\">' + title + '!</button>'; \n    } \n  }; \n\n})(); \n```", "```js\ndataDrivenForm.parts = [{ \n    type: 'text', \n    name: 'firstname', \n    title: 'First Name' \n  }, { \n    type: 'text', \n    name: 'lastname', \n    title: 'Last Name' \n  }, { \n    type: 'email', \n    name: 'email', \n    title: 'e-mail address' \n  }, { \n    type: 'date', \n    name: 'birthdate', \n    title: 'Date of birth' \n  }, { \n    type: 'number', \n    name: 'experience', \n    title: 'Years of experience' \n  }, { \n    type: 'textarea', \n    name: 'summary', \n    title: 'Summary' \n  }, { \n    type: 'checkbox', \n    name: 'receivenotifications', \n    title: 'Receive notification e-mails' \n  }, { \n    type: 'notice', \n    name: 'By using this form you accept the terms of use' \n  }, { \n    type: 'button', \n    name: 'save' \n  }, { \n    type: 'button', \n    name: 'submit' \n  }];\n```", "```js\ndataDrivenForm.init = function() { \n  for (var i = 0; i < dataDrivenForm.parts.length; i++) { \n    var part = dataDrivenForm.parts[i]; \n    var elementHTML = dataDrivenForm.formElementHTMLFactory(part.type, part.name, part.title); \n    // check if the result is null, undefined or empty string\n    if (elementHTML && elementHTML.length) { \n      $('form').append(elementHTML); \n    } \n  } \n}; \n\n$(document).ready(dataDrivenForm.init); \n```", "```js\ndataDrivenForm.formElementHTMLFactory = function (formElementDefinition) { \n  var topPart = '<div><label><span>' + formElementDefinition.title + ':</span><br />'; \n  var bottomPart = '</label></div>'; \n  if (formElementDefinition.type === 'text') { \n    return topPart + \n      '<input type=\"text\" maxlength=\"200\" name=\"' +formElementDefinition.name + '\" />' + \n      bottomPart; \n  } /* ... */ \n};\n```", "```js\nvar $input = $('<input />'); \n$input.attr('type','number'); \n$input.attr('min', '0'); \n$input.attr('max', '100'); \n$input.prop('required', true);\n$input.val(4);\n\n$input.appendTo('form');\n```", "```js\n$('<input />').attr({\n    'type':'number',\n    'min': '0',\n    'max': '100'\n  })\n  .prop('required', true) \n  .val(4)\n  .css('display', 'block') \n  .wrap('<label>') // wrap the input with a <label> \n  .parent() // traverse one level up, to the <label> \n  .prepend('<span>Qty:#</span') \n  .appendTo('form');\n```", "```js\n  init = jQuery.fn.init = function( selector, context ) { \n    /* 11 lines of code */ \n    // Handle HTML strings \n    if ( typeof selector === \"string\" ) { \n      if ( selector[ 0 ] === \"<\" &&selector[ selector.length - 1 ] === \">\" &&selector.length >= 3 ) { \n        // Assume that strings that start and end with <> are HTML // and skip the regex check \n        match = [ null, selector, null ]; \n\n      } /*...*/\n\n      // Match html or make sure no context is specified for #id \n      if ( match && ( match[ 1 ] || !context) ) { \n\n        // HANDLE: $(html) -> $(array) \n        if ( match[ 1 ] ) { \n          /* 4 lines of code */\n          jQuery.merge( this, jQuery.parseHTML( match[ 1 ], /*...*/ ) ); \n          /* 16 lines of code */ \n\n          return this; \n        }/*...*/ \n      }/*...*/ \n    }/*...*/ \n  }; \n```", "```js\njQuery.parseHTML = function( data, context, keepScripts ) { \n  /* 17 lines of code */ \n  // Single tag \n  if ( parsed ) { \n    return [ context.createElement( parsed[ 1 ] ) ]; \n  } \n\n  parsed = buildFragment( [ data ], context, scripts ); \n  /* 5 lines of code */\n  return jQuery.merge( [], parsed.childNodes ); \n};\n```", "```js\njqXHR = { \n  readyState: 0, \n\n  // Builds headers hashtable if needed \n  getResponseHeader: function( key ) {/* ... */}, \n\n  // Raw string \n  getAllResponseHeaders: function() {/* ... */}, \n\n  // Caches the header \n  setRequestHeader: function( name, value ) {/* ... */}, \n\n  // Overrides response content-type header \n  overrideMimeType: function( type ) {/* ... */}, \n\n  // Status-dependent callbacks \n  statusCode: function( map ) {/* ... */}, \n\n  // Cancel the request \n  abort: function( statusText ) {/* ... */} \n}; \n```", "```js\ntransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR ); \n\n// If no transport, we auto-abort \nif ( !transport ) { \n  done( -1, \"No Transport\" ); \n} else { \n  jqXHR.readyState = 1; \n  /* 12 lines of code */ \n  try { \n    state = 1; \n    transport.send( requestHeaders, done ); \n  } catch ( e ) {/* 7 lines of code */} \n}\n```", "```js\n    <h1>Data Driven Quiz</h1> \n    <form> </form> \n\n    <script type=\"text/javascript\" src=\"img/jquery.js\"></script> \n    <script type=\"text/javascript\" src=\"img/datadrivenquiz.js\"></script> \n```", "```js\nul.unstyled > li { \n    margin: 0; \n    padding: 0; \n    list-style: none; \n}\n```", "```js\ndataDrivenQuiz.questions = [{ \n  title: 'Which is the most preferred way to write our JavaScript code?', \n  options: [ \n    'inline along with our HTML', \n    'flat inside *.js files', \n    'in small Modules, one per *.js file' \n  ] \n}, { \n  title: 'What does the $() function returns when invoked with a CSS selector?', \n  options: [ \n    'a single element', \n    'an array of elements', \n    'the HTML of the selected element', \n    'a Composite Object' \n  ] \n}, { \n  title: 'Which of the following are Design Patterns', \n  acceptsMultiple: true, \n  options: [ \n    'Garbage Collector', \n    'Class', \n    'Object Literal', \n    'Observer' \n  ] \n}, { \n  title: 'How can get a hold to the <body> element of a page?', \n  acceptsMultiple: true, \n  options: [ \n    'document.body', \n    'document.getElementsByTagName(\\'body\\')[0]', \n    '$(\\'body\\')[0]', \n    'document.querySelector(\\'body\\')' \n  ] \n}];\n```", "```js\nfunction MultipleChoiceBuilder() { \n  this.title = 'Untitled'; \n  this.options = []; \n} \ndataDrivenQuiz.MultipleChoiceBuilder = MultipleChoiceBuilder; \n\nMultipleChoiceBuilder.prototype.setTitle = function(title) { \n  this.title = title; \n  return this; \n}; \n\nMultipleChoiceBuilder.prototype.setAcceptsMultiple = function(acceptsMultiple) { \n    this.acceptsMultiple = acceptsMultiple; \n    return this; \n  }; \n\nMultipleChoiceBuilder.prototype.addOption = function(title) { \n  this.options.push(title); \n  return this; \n}; \n\nMultipleChoiceBuilder.prototype.getResult = function() { \n  var $header = $('<header>').text(this.title || 'Untitled'); \n\n  var questionGuid = 'quizQuestion' + (jQuery.guid++); \n  var $optionsList = $('<ul class=\"unstyled\">'); \n  for (var i = 0; i < this.options.length; i++) { \n    var $input = $('<input />').attr({\n      'type': this.acceptsMultiple ? 'checkbox' : 'radio',\n      'value': i,\n      'name': questionGuid,\n    });\n\n    var $option = $('<li>'); \n    $('<label>').append($input, $('<span>').text(this.options[i]))\n      .appendTo($option); \n    $optionsList.append($option); \n  } \n  return $('<article>').append($header, $optionsList);\n};\n```", "```js\ndataDrivenQuiz.init = function() { \n  for (var i = 0; i < dataDrivenQuiz.questions.length; i++) { \n    var question = dataDrivenQuiz.questions[i]; \n    var builder = new dataDrivenQuiz.MultipleChoiceBuilder(); \n\n    builder.setTitle(question.title) .setAcceptsMultiple(question.acceptsMultiple); \n\n    for (var j = 0; j < question.options.length; j++) { \n      builder.addOption(question.options[j]); \n    } \n\n    $('form').append(builder.getResult());\n  }\n}; \n\n$(document).ready(dataDrivenQuiz.init);\n```"]