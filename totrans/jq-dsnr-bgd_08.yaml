- en: Chapter 8. Showing Content in Lightboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It has become common to see galleries of photos displayed in lightboxes on the
    web. Lightboxes can be useful for other things too — playing videos, showing additional
    information, displaying important information to site visitors, or even showing
    other websites. In this chapter, we'll cover how to use the flexible and adaptable
    Colorbox plugin to create lightboxes for a variety of purposes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll take a look at how to use the Colorbox plugin to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple photo gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize photo gallery settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a fancy login box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play a collection of videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a one-page website portfolio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple photo gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simple photo gallery is probably the most common use for lightboxes. We'll
    set up a page that shows thumbnails of each photo and displays the full-size image
    in a lightbox when the thumbnail is clicked. To get started, you'll need a series
    of photographs with smaller size thumbnails of each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a photo displayed in a lightbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple photo gallery](img/6709OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action — setting up a simple photo gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll walk through creating a simple photo gallery with the Colorbox plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get started by setting up a basic HTML page and associated files and
    folders just like we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"),
    *Designer, Meet jQuery*. The body of the HTML document will contain a list of
    thumbnails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we've wrapped each thumbnail in a link to the full-size version of
    the image. If you load the page in a browser, you'll see that the page works for
    users with JavaScript disabled. Clicking a thumbnail opens the full-size image
    in the browser. The back button takes you back to the gallery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that we've also included a `title` attribute on each link. This is helpful
    for our site visitors as it will show a short description of the image in a tooltip
    when they hover over the thumbnail with their mouse, but it will also be used
    later on for the Colorbox plugin. We've also included a `rel` attribute on each
    link and set it equal to ireland. This will make selecting our group of links
    to Ireland images easy when we're ready to add the Colorbox plugin magic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll add a bit of CSS to lay our images out in a grid. Open your `styles.css`
    file and add these styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action — setting up a simple photo gallery](img/6709OS_08_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Feel free to play around a bit with the CSS to create a different layout for
    your image thumbnails if you'd like.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's add the jQuery magic. We're going to be using Color Powered's Colorbox
    plugin. Head over to [http://jacklmoore.com/colorbox](http://jacklmoore.com/colorbox)
    to find the downloads, documentation, and demos. You'll find the download link
    in the **Download** section, near the top of the page. Just click the current
    version number to download a ZIP file.![Time for action — setting up a simple
    photo gallery](img/6709OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the folder and have a look inside. You'll find the plugin script file
    itself, of course, but a lot of other goodies as well.![Time for action — setting
    up a simple photo gallery](img/6709OS_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The plugin code itself is in the `colorbox` folder — you'll find both the development
    and minified versions. The five example folders each contain an example file (`index.html`)
    that shows the plugin in action. Why five different folders? Each folder contains
    the same basic example, but with five different looks for the Colorbox. These
    same examples can be viewed on the Colorbox website by clicking numbers in the
    **View Demos** section on the website.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right out of the box, the plugin's developers are providing us with five different
    possibilities for our Colorbox's look and feel. And if that's not enough choice,
    they've also included a `colorbox.ai` ( **Adobe Illustrator**) file that contains
    all of the image assets used to create these five different looks. You can customize
    them to your heart's content and then export your new fully custom look from Illustrator
    to create your own appearance. Changing colors and special effects is straightforward
    enough, but remember that if you change the size and shape of the image assets,
    you'll have to touch up the accompanying CSS file to accommodate the new sizes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try out each of the different examples, either on the website or using the example
    files included in the ZIP download, and note that the appearance, size, placement
    of the back and forward buttons, the close button, the caption, the pagination
    indicator (image 1 of 3), and so on, are all controlled via CSS—not the plugin
    code itself. This makes it very easy to customize the look and feel—it's all done
    via CSS rather than in JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the ZIP download, in the `colorbox` folder, you'll find the plugin code
    a file named `jquery.colorbox-min.js`. Copy this file to your own `scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll get started by choosing one of the provided CSS skins. Pick your favorite,
    then copy and paste its CSS file to your own `styles` folder. Open up the `images`
    folder for that CSS skin and copy and paste the images from that folder to your
    own `images` folder. Once you've chosen a skin, your own setup should look like
    the following:![Time for action — setting up a simple photo gallery](img/6709OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index.html` file contains the HTML with thumbnail images that link to full-size
    versions. The `images` folder contains the images provided with my chosen Colorbox
    skin, alongside my own images for my slideshow, both the thumbnail and full-size
    versions. My `scripts` folder contains jQuery (`jquery.js`) and the Colorbox plugin
    script (`jquery.colorbox-min.js`). My `styles` folder contains the CSS file for
    the Colorbox skin I chose.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We do have to open up `colorbox.css` to make a minor set of edits. In the example
    files, the CSS file is not in a `styles` or `css` folder, but rather sits at the
    top level alongside the `index.html` file. We''ve chosen to follow our preferred
    convention and store our CSS in our `styles` folder. This means that we''ll have
    to open up the `colorbox.css` file and update the references to images in the
    CSS. I''ll have to replace references like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'with references like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: I'm just telling the CSS to go up one level and then look for the `images` folder.
    You should be able to replace all of these quickly by using the Find and Replace
    functionality of your text editor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, open up your `index.html` file and attach the `colorbox.css` file in the
    head section, before your own `styles.css:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And then head down to the bottom of the file, just before the closing`</body>`
    tag, and attach the Colorbox plugin, after jQuery and before your own `scripts.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, remember that `rel="ireland`" attribute we included on each of our links?
    We''re going to use that in our JavaScript to select all of our Ireland image
    links for the Colorbox plugin. Open your `scripts.js` file and write the attribute
    selector to select all links with a `rel` attribute equal to `ireland` inside
    of the document ready statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The only thing left to do is call the `colorbox()` method on those links the
    Colorbox plugin will take care of everything else for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now if you open the page in the browser and click one of the thumbnail images,
    you'll see the full-size image open up in a Colorbox. You can navigate through
    all of the full-size images without having to close the lightbox, thanks to the
    back and forward buttons included. You can also move between the images by pressing
    the left and right arrow keys on your keyboard. The pagination indicator helps
    you to see where you are in the collection of photos. You'll also notice that
    the `title` attribute included on each link gets re-used as an image caption for
    each image. The Colorbox can be closed by clicking the close button, clicking
    outside the Colorbox, or by hitting the Esc key on your keyboard. All in all,
    it's a pretty nice experience right out of the box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the Colorbox jQuery plugin to turn a list of links to images into a
    lightbox that allows site visitors to navigate through the full-size images without
    leaving the page. We used the `title` attribute of the links to provide captions
    for the images. We used one of the five Colorbox styles provided with the plugin
    to create a nicely-designed lightbox.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Colorbox's behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you take a look through the **Settings** section of the Colorbox website,
    you'll see that you have plenty of options for customizing how the Colorbox behaves.
    Let's take a look at how we can put some of these options to use. For this section,
    we'll keep working with the files we set up in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First up, we'll try out the different transition effects that are available.
    The default transition is `elastic`. If your full-size images are all different
    sizes, you'll see that Colorbox uses a nice resizing animation to transition between
    them. The other options for transitions are `fade` and `none`. Let's take a look
    at how we can modify the transition.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using a custom transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to change the default transition between images:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we''ll take a look at how to use the `fade` transition. Open
    your `scripts.js` file. All we have to do is pass the `fade` value for the transition
    key to the `colorbox()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we've added some curly braces inside the parentheses. Inside these
    curly braces, we can pass in key/value pairs to customize different aspects of
    the Colorbox. In this case, the key is `transition` and the value is 'fade'.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you reload the page in the browser, click one of the thumbnails then click
    the next and previous buttons to flip through the images, you'll see that the
    Colorbox fades out and then back in between each image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What if we decided we'd rather get rid of the transitions altogether? We'd simply
    have to change the value for the `transition` key to`'none':`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now if you refresh the page in the browser, you'll see that the images change
    without any transition effect between them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saw how to take advantage of one of the available settings with the Colorbox
    plugin and modified the transition between images as our site visitor moves through
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Fixed size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a case where the photos you're loading into the Colorbox are of widely varying
    different sizes, you might decide that all the resizing is distracting to the
    site visitors and that you want to set a fixed size for the Colorbox. That's easy
    to do as well, by passing in a couple more key/value pairs. Looking through the
    documentation, you'll see that there are lots of settings for controlling the
    width and height of the Colorbox. To keep things simple, we're going to use `width`
    and `height`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — setting a fixed size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set a fixed width and height for the Colorbox:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your `scripts.js` file. We''re going to make a few changes to our code
    to set a fixed `width` and `height` for the Colorbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now if you refresh the page in the browser, you'll see that the Colorbox remains
    the same size. No matter what size the images or the browser window is, the Colorbox
    will always fill 90% of the width and 60% of the height of the browser window.
    The images inside resize proportionally to fit into the available space if they
    are too large.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set the `width` and `height` settings to percentage values. This is a really
    helpful option if you have large photos that could potentially be larger than
    your site visitor's browser window. Setting the `width` and `height` to percentage
    values ensures that in this case, the Colorbox will be 90% of the width and 60%
    of the height of the site visitor's browser window, no matter what size the browser
    window happens to be. That way if the browser window is small, the site visitor
    will be able to see the complete photo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Colorbox also provides some other settings for width and height:'
  prefs: []
  type: TYPE_NORMAL
- en: innerWidth/innerHeight
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These keys provide `width` and `height` values for the content inside the Colorbox
    instead of for the Colorbox itself. This can be helpful in cases where you know
    the exact width and height of the actual content, for example a video player.
  prefs: []
  type: TYPE_NORMAL
- en: InitialWidth/initialHeight
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Colorbox is very flexible and can be used for a variety of different content
    (as we'll see shortly). Setting an `intialWidth` and `initialHeight` allow you
    to control the size of the Colorbox before any content is loaded in. If you load
    in content via Ajax, it can take a few moments to load into the Colorbox. Setting
    `initialWidth` and `initialHeight` allows you to specify how large the Colorbox
    should be while you wait for the content to load in.
  prefs: []
  type: TYPE_NORMAL
- en: maxWidth/maxHeight
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These keys allow you to set a maximum width and maximum height for the Colorbox.
    If the content is smaller, then the box will appear smaller on the screen. But
    when you're loading in larger contents, they won't exceed the `maxWidth` and `maxHeight`
    values you specify. For example, if you wanted to set up a Colorbox for images
    in a variety of sizes, you could allow the Colorbox to resize with fade or elastic
    transitions between images, but set a `maxWidth` and `maxHeight` to be sure that
    larger images wouldn't exceed the site visitor's browser window.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a slideshow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Colorbox also provides us with an option to automatically cycle through all
    the images so the site visitor doesn't have to continually click the next button
    to see them all.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a slideshow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s how we can turn our lightbox image gallery into a slideshow:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `scripts.js`. We're going to add another key/value pair to our settings.
    To create a slideshow inside our Colorbox, set the `slideshow` key to `true:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now if you refresh the page in the browser, you''ll see that after you open
    the Colorbox, it automatically cycles through the images, using whichever transition
    effect you''ve chosen. A link is provided so that site visitors can stop the slideshow
    at any time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — creating a slideshow](img/6709OS_08_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Colorbox provides a few more keys we can use to control the slideshow. We can
    provide a value for `slideshowSpeed` to set the number of milliseconds each photo
    will be displayed. If we don''t want the slideshow to automatically play, we can
    set `slideshowAuto` to `false`. We can change the text that appears in the link
    to start and stop the slideshow by passing in values for the `slideshowStart`
    and `slideshowStop` keys, respectively. That would all look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this code, we've set up our slideshow to show each photo for 2 seconds
    (2000 milliseconds), to not start the slideshow automatically, and to customize
    the text on the links that start and stop the slideshow.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that each key/value pair is separated by a comma, but that there's no comma
    after the last key/value pair. No comma after the last one is only important for
    Internet Explorer — if you accidentally put a comma after the last key/value pair
    in Internet Explorer, it will throw an error and none of your JavaScripts will
    work. Other browsers will ignore the error and continue to work gracefully. Always
    test your work in Internet Explorer before you make it available to the public.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's talk for a minute about the \' that appears in the text I want to use
    for the link to start and stop the slideshow. Since these are strings, I have
    to wrap them in quote marks, either 'single' quote or "double" quotes will work,
    and it's a matter of personal preference which you choose. If I want to then use
    quote marks in my string, I have to escape them I have to escape them — which
    is the JavaScript way of saying I have to tell JavaScript that those are part
    of my string and not characters that JavaScript should pay attention to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If I were to write my string this way:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: this would cause an error. As far as JavaScript is concerned, the ' in Let's
    is the closing single quote for the string — and JavaScript has no idea what to
    do with the rest of the line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In this case, if my personal preference were for using double quotes for writing
    strings, I wouldn''t have to do anything at all. This would be perfectly acceptable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since we're using double quotes around our string, there's no chance that JavaScript
    will accidentally read it as the end of our string. Once JavaScript sees an opening
    " character, it automatically looks for the matching ending " character.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've got our slideshow customized, refresh the page in the browser
    and click one of the image thumbnails to open the Colorbox. The only visible difference
    is the addition of the **Let's get started** link. Clicking it kicks off the slideshow
    and switches the link to say Ok, that's enough, so that we can stop the slideshow.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saw how to create and customize a slideshow. We did this by taking the simple
    lightbox photo gallery and customizing it by passing a series of key/value pairs
    to the `colorbox()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Fancy login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's nice enough to be able to use a lightbox for displaying images and slideshows,
    but Colorbox is more capable and flexible than that. In this section, we'll take
    a look at showing a login form in a Colorbox. Note that our login form isn't hooked
    up to anything and won't actually function in the sample case. But this same technique
    can be applied to a dynamic site to allow your site visitors to view the login
    form in a lightbox.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a fancy login form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create a login form in a lightbox:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get started by setting up an HTML page and associated files and folders
    like we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer,
    Meet jQuery*. Our HTML page will contain a header that displays a login form.
    It''s common for sites to enable people to login from any page on the site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll open `styles.css` and add some CSS, so that the header displays
    with the title on the left and the form on the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you view the page in a browser, you''ll see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — creating a fancy login form](img/6709OS_08_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: This is perfectly acceptable for users without JavaScript enabled — they'll
    be able to log into the site from any page. But I do think it's a bit cluttery.
    So if the site visitor has JavaScript enabled, we will hide the login form, and
    show it in a Colorbox when the site visitor is ready to log in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll get ready to use the Colorbox plugin the same way we did in the
    previous section: choose one of the provided styles for the Colorbox and attach
    its stylesheet to the head section of our document, move all the required images
    to your `image` directory and update the path to the images in the CSS, and attach
    the Colorbox plugin at the foot of the document, between jQuery and our `scripts.js`
    tag.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once all that''s out of the way, we''re ready to write our JavaScript. Open
    up `scripts.js` and write your document ready statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first thing we''d like to do is hide the login form. We''re going to do
    that using JavaScript rather than CSS because we do want the login form to be
    visible for the site visitors who don''t have JavaScript enabled. We want to hide
    the form immediately as soon as the page is loaded, so we''ll write our hiding
    code inside the `ready()` method for the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll notice that we created a variable called `form` and used it to store
    the jQuery selector for the form. We're going to have to refer to the login form
    several times in our code. We could write `$('#login-form')` each time we wanted
    to select the login form, but each time, jQuery would have to look through the
    DOM of the page to find it anew. If we store it in a variable, our code will run
    faster and be more efficient since jQuery will not have to find the login form
    each time we refer to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you refresh the page in the browser, you'll see that the login form has disappeared.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'But now we need a way for site visitors to be able to show it again to be able
    to log in. We''ll use jQuery to add a login link to the page, which will appear
    right where the form was:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Already, we''re referring to the form again — inserting the login link before
    the form. We already included some styles in the CSS to style the link and display
    it where we''d like. If you refresh the page in the browser, you''ll see the login
    form has been replaced by a login link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — creating a fancy login form](img/6709OS_08_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'But clicking the login link doesn''t do anything. Let''s fix that by adding
    in some Colorbox magic. We''ll select our login link and call the `colorbox()`
    method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the page in the browser and try clicking the link. Hmmm...not really
    what we had in mind, right? We have to tell Colorbox that we want to load up some
    content that's already on the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We already put the reference to the login form in the `href` attribute of the
    link, so we''ll use that to our advantage. We''ll pass a couple of key/value pairs
    to the `colorbox()` method to tell Colorbox that we want to load some content
    that''s already on the page and exactly which content we want to show:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the page in the browser and you'll see that the Colorbox opens, but
    it appears to be empty. That's because we hid our form. It's been loaded into
    the Colorbox, but it's hidden from view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll use another key/value pair to tell Colorbox to show the form when the
    Colorbox opens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`onOpen` is one of the keys provided by the Colorbox plugin. It allows us to
    write a function that will be run when the Colorbox opens. In this case, I''m
    going to find my form and show it. Now if you refresh the page in the browser,
    you''ll be able to see the form in the ColorBox as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — creating a fancy login form](img/6709OS_08_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'This looks fine enough, and we''ll touch this up with a bit of CSS in a moment
    to make it look even better. But what happens when you close the Colorbox? That
    pesky login form is visible again in the header. So we''ll pass another key/value
    pair to our `colorbox()` method to hide the form when the Colorbox closes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That will make sure our form is hidden when the Colorbox is closed so it doesn't
    show up in the header again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s make our login form look a bit friendlier. Open up `styles.css`
    and add some CSS that styles the login form inside the lightbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And we also want to make the login form box a bit wider, so we''re going to
    pass a `width` key to the `colorbox()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you refresh the page in the browser, you''ll see our Colorbox is indeed
    400 pixels wide and our login form has taken on the nice chunky appearance we
    wanted with our CSS, but there''s still a bit of a problem. Our form is too tall
    for the Colorbox:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — creating a fancy login form](img/6709OS_08_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The Colorbox script hasn't realized that our form has a different set of CSS
    once it's displayed inside the Colorbox — it's still expecting the form to be
    of the same height it was when it was displayed in the header. But that form is
    much smaller. If you put your mouse over the login form and scroll down, you'll
    see the rest of the login form is there — we just can't see it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We don''t want any scrolling in our Colorbox, so we''ll turn that off and we''ll
    tell the Colorbox to resize itself to its content instead by passing a couple
    more key/value pairs to the `colorbox()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The scrolling key allows us to turn off any scrolling inside the Colorbox, and
    the `onComplete` key is a callback function that's called as soon as content loads
    into the Colorbox. As soon as the content loads into the Colorbox, we're going
    to call a method that the Colorbox plugin has made available to us to resize the
    Colorbox to accommodate its content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, if you refresh the page in the browser, you'll see the Colorbox slide open
    to a larger height to accommodate the new CSS for our form. Perfect!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — creating a fancy login form](img/6709OS_08_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned how to take a simple header login form and change it to a login link
    that opens a login form in a Colorbox when clicked. We worked through any potential
    problems caused by this approach by passing in callback functions as values for
    keys specified in the Colorbox plugin documentation. We learned how to call functions
    to run when the Colorbox opens, when the content is loaded into the Colorbox,
    and when the Colorbox closes. We learned that we can force the Colorbox to resize
    to accommodate its current contents by calling the `$.colorbox.resize()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Video player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Colorbox is flexible enough to be used to display a video player as content.
    We'll link out to a YouTube video, then add some Colorbox magic to display the
    video in a Colorbox. Please note that this example makes use of Ajax, and will
    therefore only work if you upload your files to a server or if you create a server
    on your own computer.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — showing a video in a lightbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Colorbox to play a set of videos:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get started as we usually do, by setting up a basic HTML file and associated
    files and folders, just like we did in [Chapter 1](ch01.html "Chapter 1. Designer,
    Meet jQuery"), *Designer, Meet jQuery*. In the body of our HTML document, we''re
    going to include a link to a YouTube video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note a couple of things about my video link. First, I'm using the embed URL
    for the video rather than the link to YouTube's video page. For users without
    JavaScript enabled, this will take them to a stand-alone video player page on
    YouTube's site. For users with JavaScript enabled, it will ensure that only the
    video player is loaded into the Colorbox rather than the full YouTube video page.
    Second, I'm adding a parameter to the URL for the video, setting `autoplay` to
    1\. This is how you can make embedded YouTube videos automatically play when the
    site visitor views your page. It's generally a bad idea to have a video autoplay,
    but in this case, the user will have already clicked a link that says **Watch
    the video**, so it seems like a safe bet that they'll be expecting a video to
    play once they've clicked that link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, just as with the other Colorbox examples so far, you'll need to attach
    your chosen Colorbox skin CSS file in the head of your document, make sure the
    images are available, update the path to the images in the CSS if necessary, and
    finally attach the Colorbox plugin in the foot of the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''ll open up our `scripts.js` file and get set to write up our custom
    JavaScript. We''ll get started with the document ready statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll select the video link and call the `colorbox()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But if we refresh the page in a browser and attempt to view the video, we get
    an error. That's because we're attempting to load in the video via Ajax, and because
    of browser security restrictions, we can't make asynchronous requests to a different
    server. In this case, we're trying to make a call to [http://youtube.com](http://youtube.com),
    but that's not where our Colorbox page is hosted, so the browser blocks our request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Luckily, we can create an `iframe` and load our external content into the `iframe`.
    And also luckily, Colorbox provides a way for us to do so easily. We''ll just
    pass a key/value pair to the `colorbox()` method setting `iframe` to `true` like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now our video loads into the Colorbox, but the Colorbox has no idea how large
    our video can be, so we can't see it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll have to tell Colorbox how big we expect our video player to be. We''ll
    do this by passing in key/value pairs for the `innerWidth` and `innerHeight`.
    We''re using `innerWidth` and `innerHeight` rather than width and height in this
    case because we''re passing in how large we want the video player (or content)
    to be, rather than how large we want the Colorbox to be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also use the Colorbox to create a way for users to easily view several
    videos. Let''s go back into `index.html` and add a list of favorite videos to
    our page instead of just one link to a video. We''ll use a `rel` attribute set
    to `favorites` for each one and provide a `title` attribute so our videos will
    display a caption underneath:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The only update we have to make to our JavaScript in `scripts.js` is to update
    the selector. Instead of selecting one single link by ID, we''re going to select
    our set of favorites links by their `rel` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you view the page in the browser, you'll see that you have a caption under
    the video and next and previous buttons that allow you to navigate between the
    videos without closing the Colorbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The only thing that''s a bit awkward is that our pagination indicator says
    Image 1 of 3 when we''re showing videos, not images. Luckily, Colorbox provides
    a way for us to customize this text with the `current` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, our pagination indicator correctly reads Video 1 of 3\. Our site visitors
    can easily move from video to video without having to close the Colorbox and each
    video displays a caption:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — showing a video in a lightbox](img/6709OS_08_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned how to create both a stand-alone video player and a multiple video
    player inside a Colorbox. We learned how to pass in key/value pairs to tell the
    Colorbox to load in external content in an `iframe`, working around cross-domain
    Ajax restrictions. We also learned how to modify the pagination indicator text
    to fit our current content type. We used the `innerWidth` and `innerHeight` keys
    to set the video player's size.
  prefs: []
  type: TYPE_NORMAL
- en: One-page web gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next up, we'll take a look at how we can create a single-page web gallery to
    show off your favorite sites or all the incredible sites you've designed yourself.
    Note that this example makes use of Ajax, so you'll either have to upload your
    pages to a web server or create a web server on your own computer to see it in
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a one-page web gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create a one-page web gallery:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get started by setting up a basic HTML file and associated files and
    folders, just like we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet
    jQuery"), *Designer, Meet jQuery*. Inside the body of our HTML document, we''ll
    create a list of links to the sites we want to include in our design gallery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that I've added a `rel` attribute equal to `gallery` to each link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, just as with the other Colorbox examples, choose a style and attach the
    stylesheet in the header of the document, make all the necessary images available
    to your page, update the path to the images in the CSS if necessary, and attach
    the Colorbox plugin at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll open our `scripts.js` file and add our document ready statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll select all links with the `rel` attribute equal to `gallery` and
    call the `colorbox()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just as we did with the video example, we'll set the `iframe` key to `true`
    since we're loading in content from other domains. I'm also going to set the `width`
    and `height` of the ColorBox to `90%`, so that it takes up nearly the entire browser
    window. I'm also going to adjust the pagination indicator text to read `Web Site`
    instead of `Image:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you refresh the page in the browser, you can see that clicking one of
    the links opens a Colorbox and loads that website into the Colorbox. A site visitor
    can interact with the loaded website just as they would if they had loaded it
    into a separate browser window, browsing through pages, and so on. When finished
    with one site, they can click the next arrow to visit the next website in the
    list and then hit the Esc key on the keyboard or click the close button or anywhere
    outside the Colorbox to close the Colorbox when they're finished.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that it is possible for website owners to block your ability to load their
    sites into an `iframe`. If you have set up a local server using MAMP or WAMP,
    then you might notice that the Google example won't load into your page. It will,
    however, load if you upload your code to an external server. Be sure to test all
    the sites you want to use in your web gallery to ensure that they work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used much of what we learned creating a Colorbox video player to display
    external websites inside a Colorbox. This allows our site visitor to browse a
    collection of websites without ever leaving our page. We once again told Colorbox
    to load our content into an `iframe` to work around cross-domain Ajax restrictions.
    We customized the pagination indicator text, and set a width and height for our
    Colorbox.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've looked at several uses for the adaptable and flexible Colorbox plugin,
    which can be used to display any kind of content in a lightbox. It can be used
    to create browsable image galleries, give access to forms and video players without
    cluttering up the page with clunky UI elements, and even to create a browsable
    website gallery. The ColorBox plugin is completely styled with CSS, making it
    possible for the lightbox to have any appearance you can dream up. The plugin
    even includes vector image assets that can be used as a starting point for creating
    your own lightbox design. The behavior of the lightbox can be modified by passing
    a series of key/value pairs to the `colorbox()` method, making the Colorbox plugin
    suitable for any possible lightbox use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we''ll take a look at another common website task: creating slideshows.'
  prefs: []
  type: TYPE_NORMAL
