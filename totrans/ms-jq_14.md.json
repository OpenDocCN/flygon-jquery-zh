["```js\nnpm install --save-dev qunitjs\n\n```", "```js\nnpm install -g bower\n\n```", "```js\nbower install --save-dev qunit\n\n```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Testing jQuery With QUnit</title>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"css/qunit.css\" />\n     <link rel=\"stylesheet\" href=\"css/qunittest.css\" />\n     <script src=\"img/jquery.min.js\"></script>\n     <script src=\"img/qunit.js\"></script>\n     <script src=\"img/qunittest.js\"></script>\n      </head>\n      <body>\n        <form id=\"form1\">\n          <input type=\"text\" id=\"textLength\">\n          <span id=\"results\"></span>\n     <div id=\"qunit\"></div>\n     <div id=\"qunit-fixture\"></div>\n        </form>\n      </body>\n    </html>\n    ```", "```js\n    $(document).ready(function() {\n      var txt = $(\"input[id$=textLength]\");\n      var span = $(\"#results\");\n      $(txt).keyup(function() {\n        var length = $(txt).val().length;\n        $(span).text(length + \" characters long\");\n        $(span).css(\"background-color\", length >= 8 ? \"#FF0000\" : \"#00FF00\");\n      });\n    ```", "```js\n      $(txt).val(\"Hello World!\");\n      QUnit.test(\"Number of characters in text field is 8 or more\", function(assert) {\n        $(txt).trigger(\"keyup\");\n        assert.ok($(txt).val().length >= 8, \"There are \" + $(txt).val().length + \" characters.\");\n      });\n    });\n    ```", "```js\n      assert.ok($(txt).val().length >= 8, \"There are \" + $(txt).val().length + \" characters.\");\n    });\n\n     $(txt).val(\"Hello World!\");\n     QUnit.test(\"Number of characters in text field is 8 or less\", function(assert) {\n     $(txt).trigger(\"keyup\");\n     assert.ok($(txt).val().length <= 8, \"There are \" + $(txt).val().length + \" characters.\");\n      });\n    ```", "```js\n    npm install –g grunt-cli\n\n    ```", "```js\n    {\n      \"name\": \"projectName\",\n      \"version\": \"1.0.0\",\n      \"devDependencies\": {\n        \"grunt\": \"~0.4.1\",\n        \"grunt-contrib-QUnit\": \">=0.2.1\",\n        \"grunt-contrib-watch\": \">=0.3.1\"\n      }\n    }\n    ```", "```js\n    npm install\n\n    ```", "```js\n    module.exports = function(grunt) {\n      grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n\n        QUnit: {\n          all: ['tests/*.html']\n        },\n        watch: {\n          files: ['tests/js/*.js', 'tests/*.html'],\n          tasks: ['QUnit']\n        }\n      });\n\n      grunt.loadNpmTasks('grunt-contrib-watch');\n      grunt.loadNpmTasks('grunt-contrib-QUnit');\n      grunt.registerTask('default', ['QUnit, watch']);\n    };\n    ```", "```js\n    npm install –g phantomjs\n\n    ```", "```js\n    grunt watch\n\n    ```", "```js\n    assert.ok($(txt).val().length <= 8, \"There are \" + $(txt).val().length + \" characters.\");\n    ```", "```js\n    test(\"adds user in memory\", function()  {\n      var userMgr — makeUserMgr();\n      userMgr.addUser(\"user\", 'pass\");\n      equal (userMgr. —internalUsersCØ) . name , \"user\")\n      equal (userMgr. —internalUsersCØ) . pass , \"pass\")\n    });\n    ```", "```js\n    test( \"adds user in memory\", function() var userMgr = makeUserMgr(); userMgr.addUser(\"user\", \"pass\"); ok(userMgr. loginUser(\"user\" , \"pass\"));\n    });\n    ```"]