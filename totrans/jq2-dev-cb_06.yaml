- en: Chapter 6. User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating element CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a news ticker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sticky elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing smooth scrolling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic table of contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic drag-and-drop functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic animated tree menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an accordion content slider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tabbed content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a modal pop up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a draggable content pop up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery empowers developers with the ability to easily create complex user interface
    elements. Because of this, there are a vast amount of jQuery plugins that allow
    developers to quickly add such interfaces to their site. Additionally, jQuery's
    own UI framework houses many popular interface elements, such as accordions, tabular
    content, modals, and more. If you would like to know how to use jQuery UI for
    your own site, skip directly to [Chapter 9](ch09.html "Chapter 9. jQuery UI"),
    *jQuery UI*. This chapter will focus on developing some of these popular UI elements
    from scratch, providing for unlimited customizability and allowing you to gain
    an understanding of how these other plugins work.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating element CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery allows developers to access the CSS properties of DOM elements directly.
    This provides an easy way to alter the look and feel of your application based
    on data within your JavaScript. This recipe will show you how to manipulate DOM
    CSS in various elements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are going to need three files for this recipe. Using your editor of choice,
    create `recipe-1.html`, `recipe-1.js`, and `recipe-1.css` in the same directory
    as the latest version of the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of the three files you have just created, open each one for editing and perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-1.html`; be sure to change the source
    location of the JavaScript included for the jQuery library, pointing it to where
    the latest version of jQuery is downloaded on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS code to `recipe-1.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-1.js` to add functionality to the
    select dropdowns within the HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-1.html` in a web browser and you should see the following simple
    web page:![How to do it…](img/recipe-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the drop-down menus on the right-hand side to alter the CSS for the header
    and paragraph elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML creates a basic web page to provide elements such that their CSS can
    be manipulated by jQuery and a simple interface to initiate these changes. The
    CSS code in `recipe-1.css` adds basic styling to create our web page layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change an element''s CSS, a `change` event handler is attached to both select
    dropdowns using their respective class names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will allow us to execute some code when the user changes the values of
    either the title color (`title-colour`) or paragraph size (`p-size`) dropdowns.
    Using `$(this).val()`, it is possible to get the value of the selected option,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using either the `colour` or `size` variable, which hold the selected values
    of their respective dropdowns, we determine whether or not the default option
    has been selected using its value `#`. If it has been selected, we set the `colour`
    or `size` value to blank, allowing the user to reset the manipulated CSS to the
    default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'If an option other than the default has been chosen, the value will be used
    in conjunction with the appropriate CSS option in the jQuery `css()` function
    as highlighted in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating a news ticker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to create a simple news ticker with a stop/pause
    functionality. A news ticker is a great way to display a lot of information such
    as tweets, quotes, or general news items in a small space.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, you are going to need to create three files. Create `recipe-2.html`,
    `recipe-2.css`, and `recipe-2.js` in the same directory as the latest version
    of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following step-by-step instructions to create an animated news
    ticker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-2.html` to create a simple web page
    and content for our ticker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following simple CSS to `recipe-2.css` to add styles to our web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-2.js` to make our ticker active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-2.html` in a web browser will present you with a simple web
    page and an animated ticker that shows a different quote by Einstein every two
    seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because the HTML and CSS code are very simple, the only explanation needed is
    for the jQuery code. Note that the HTML web page holds an unordered list element
    with four Einstein quotes inside a division element called `content-frame`. The
    `content-frame` element has its `overflow` attribute set to `hidden` so that only
    one quote is visible at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the `recipe-2.js` file, two variables are declared: `tick` and
    `interval`. The `tick` variable is where the JavaScript `setInterval()` function
    will be declared. The JavaScript `setInterval()` function allows us to specify
    a function and an interval. The specified function will then be called again over
    the specified interval. This allows us to loop through the news ticker content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By declaring the `tick` variable at the top of the JavaScript file, we can
    stop the interval at a later point to add the pause functionality. The `interval`
    variable simply holds the number of milliseconds we want the `setInterval()` function
    to wait before it calls the specified function again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the jQuery on-load function, we assign the `tick` variable to the `setInterval()`
    function, specify that the function be called again, and then use the `interval`
    variable to set the interval duration, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the stop/start functionality, according to which the ticker will stop
    when the user hovers over it and start up again when they move their mouse away,
    we need to attach two event handlers to the `content-frame` division element as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `mouseover` event handler uses the JavaScript `clearInterval()` function
    and is passed the `tick` variable as an argument. This will stop the `setInterval()`
    function from calling the `ticker()` function again when the user hovers over
    the `content-frame` element. Within the callback function to the `mouseout` event,
    the `tick` variable is declared again with the same `setInterval()` function as
    before, reinitializing the news ticker and starting it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there is the `ticker()` function itself. This function takes the first
    list element and slides it upwards using the jQuery `slideUp()` function. This
    provides the effect of the next element moving into view. It then takes the element
    that has been hidden using the `slideUp()` function and moves it to the end of
    the ticker list using `appendTo()`. Finally, it slides this element back down
    using `slideDown()`, so it is ready for display when it eventually moves to the
    top of the list again. This is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to adopt the start and stop functionality any way you like, for
    example, using start and stop buttons or even a single pause button to make it
    more obvious that it is possible to pause the ticker. The benefit of the method
    used in this recipe is that links will often be displayed within the ticker content.
    When the user goes to click on a link within the ticker, the ticker will stop,
    allowing them to click on the link instead of the link moving away before they
    can initiate the click.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a dynamic table of contents*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sticky elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sticky elements are page elements that stick to a position within the user's
    browser, even as they scroll. Sticky elements are used to always keep content
    within the user's line of sight. This content could be navigation, important information,
    or even advertising. This recipe will show you how to create sticky elements and
    also use jQuery to activate them when the user scrolls to a certain point on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using your favorite editor, create three files named `recipe-3.html`, `recipe-3.css`,
    and `recipe-3.js`, ensuring that they are in the same directory as your jQuery
    library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For each of the newly created files, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-3.html`; it creates a long web page
    that is scrollable and a `div` element with some important content that needs
    to stay within the user''s view at all times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To style this page, add the following CSS code to `recipe-3.css`; there is
    also a `sticky` class within this code, which will be applied to the important
    elements by jQuery when users scroll down the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following jQuery code to `recipe-3.js`, which will activate
    the sticky element when the user tries to scroll past it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the top of `recipe-3.js`, there is a variable called `importantOrigin`,
    which will be used to store the original position of the important division element.
    Within the jQuery on-load block, `$(''.important'').offset()` is used to get the
    top and left positions of the important element and stores these values in the
    previously created `importantOrigin` variable. This is shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The jQuery `scroll()` function is used to execute the `sticky()` method every
    time the user scrolls on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sticky()` method gets the current vertical position of the page using
    `$(''body, html'').scrollTop()` and then uses this to compare against the important
    element''s top position. If the user has scrolled past the important element,
    the `sticky` CSS class is applied to the important element using the `addClass()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If the page''s current vertical position is lower than the top of the `sticky`
    element, the `sticky` class is removed with `removeClass()`, setting the important
    element back into its original state. Using `position: fixed;` in the CSS, it
    is possible to make an element stick to a certain point on the page. Using jQuery
    to conditionally apply this CSS, we can control when the element sticks, because
    it is typically not desired until the user scrolls past the element so that it
    is no longer visible on the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a popular jQuery plugin called `sticky.js`, which can be found at [http://stickyjs.com/](http://stickyjs.com/).
    This plugin uses the same principles that you have learned as part of this recipe
    and bundles all of the functionality into a plugin so that it is easy to reuse.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a dynamic table of contents*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing smooth scrolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anchor links to navigate to different sections of the page are useful to allow
    users to easily bypass the information in which they are not interested and go
    directly to that in which they are. However, when there is a lot of textual data
    on the screen, jumping between these different sections can often be confusing
    for the user. Using smooth scrolling and animating the screen to slowly move up
    or down to the selected section, it is easier for a user to visualize where they
    have navigated to without getting disorientated.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simply create the three standard recipe files, `recipe-4.html`, `recipe-4.css`,
    and `recipe-4.js`, and save them to the same directory as the latest version of
    the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following simple steps to add smooth scrolling to a website or
    web page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a long web page by adding the following HTML code to `recipe-4.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Style this page by adding the following CSS code to `recipe-4.css`, which is
    included in the preceding HTML page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-4.js` to catch anchor element clicks
    and provide the smooth-scrolling effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The jQuery code first attaches a `click` event handler to certain anchor elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will only attach a `click` event handler to anchors with
    a hash (`#`) in their `href` attribute. The `:not([href=#])` is also used so that
    event handlers will not be attached to anchors that have only a hash as their
    `href` attribute. Now we can specify code to be executed for the links on the
    page that navigate to other sections on the same page. Blank and external links
    will be ignored and operate as usual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `click` event handler `callback()` function, we can use `this.hash`
    to retrieve the hash value in the `href` attribute of the clicked anchor element.
    If the anchor links to `#two`, we would receive the string value `"#two"`. Using
    `this.hash.length`, we can ensure that the value is valid and that we can continue
    to provide the smooth scroll animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `if` statement of `this.hash.length`, we use the jQuery `animate()`
    function as follows to animate and scroll the user to the location of the anchor
    target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `scrollTop` parameter is the location to which the animation should scroll.
    We get this location by selecting the target element using `$(this.hash)` and
    then using the jQuery `offset()` function to get its top position.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we return `false` after the `if` statement of `this.hash.length` to
    prevent the default action of the click event. If you remove `return false`, you
    will get a flicker on the screen because the default action of the click event
    (which would send the user to the linked section) occurs just before the animation
    kicks in.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a dynamic table of contents*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic table of contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A table of contents is a common way to allow users to quickly get to the section
    of content they are looking for. With jQuery, it is possible to create a table
    of contents dynamically, based on the HTML header elements on the page. This is
    very useful for blog posts or other sites that have lots of different content
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-5.html`, `recipe-5.css`, and `recipe-5.js` as before and have
    all three open and ready for editing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the required files created, perform the following steps to create a dynamic
    table of contents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a basic web page using the following HTML code, adding it to `recipe-5.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following HTML code to `recipe-5.html` within the `body` tags you have
    just added; this will create a page with sectioned content and an ordered list
    element that can be populated with content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS to `recipe-5.css` to add basic styles to this page. This
    CSS code is once again very similar to that in the last two recipes of this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-5.js`, which will populate the ordered
    list based on the headed sections in the HTML page we have just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-5.html` in a web page will present you with the content to the
    left-hand side of the screen and the dynamically-generated contents list to the
    right-hand side as shown in the following screenshot:![How to do it…](img/recipe-5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML code provides a content pane with various sections headed by `h1`,
    `h2`, `h3`, and `h4` tags and an empty ordered list element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our jQuery code first selects the content section and then finds all of the
    header elements inside it using the jQuery `find()` function and specifying `h1,
    h2, h3, h4` as the only argument. This will create an array of the found elements
    and store them in the `_headers` array as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Using the jQuery `each()` function, it is then possible to iterate through all
    of the found header elements and construct the table of contents. The local variable
    `_header` is first declared and the current header element is stored in this variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to indent subsections in the table of contents, making it easier
    for the user to see the content structure, the code needs to determine what level
    the current header is at: `h1` being the top level and `h5` being the bottom.
    Using `_header.context.localName`, we can get the tag of the header element (for
    example, `h1`) and remove the "`h`" with the JavaScript `replace()`. Then, we
    can convert the remaining value to an integer using `parseInt()`. We are left
    with a value we can use to determine the level of the header element. This process
    is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create the list element, which we will insert into the ordered list.
    In order to link the items in the table of contents to the appropriate section
    of content, we need to check to see whether or not the header element has an ID
    that we can link to. If it does, we create a list element with a link; otherwise,
    we create a basic list element by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Finally, once the list item has been created, the `css()` function and the `level`
    variable are used to add the required padding for indentation and the created
    list item is appended to the content's ordered list.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You could combine this recipe with both the *Implementing smooth scrolling*
    and *Creating sticky elements* recipes to force the table of contents to follow
    the user down the page and also provide scrolling animation for a better user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating sticky elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Implementing smooth scrolling*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic drag-and-drop functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to create interesting and intuitive interfaces by adding drag-and-drop
    elements to your site. jQuery UI comes with a built-in plugin for drag-and-drop
    interfaces. This recipe will show you how to create a basic drag-and-drop functionality
    without the use of any plugins, giving you the freedom and understanding to expand
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML page called `recipe-6.html` with the `recipe-6.css` and
    `recipe-6.js` files in the same directory as the latest version of the jQuery
    library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following step-by-step instructions to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-6.html`, creating a basic HTML page
    with three `draggable` elements in a container `div`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS code to `recipe-6.css` to style the HTML page and `draggable`
    elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following jQuery code in `recipe-6.js` to apply the drag-and-drop
    functionality to the `draggable` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-6.html` in a web browser and click on one of the red boxes. This
    will apply the `dragging` CSS class to the element, allowing you to move it around
    the page within the frame division.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML page provides a container `div` element that acts as the container
    for the `draggable` elements. There are three additional `div` elements inside
    the `frame` element. These three elements have the `draggable` class, which jQuery
    will use to apply the drag-and-drop functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS code used in the recipe creates a border on the `frame` element and
    sets the height, width, and background color for the `draggable` elements. There
    is also a `dragging` class, which applies a drop shadow to the `draggable` elements
    when they are being moved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the jQuery code itself, a series of mouse events are used to create
    the drag-and-drop functionality. The jQuery `on()` function is used to apply the
    different event handlers to the `draggable` elements. The first event handler
    applied to the `draggable` elements is the `mousedown` event as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This simply adds the `dragging` class to the element that has just been clicked
    (`mousedown`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next event handler to be attached is for both the `mousemove` and `mouseout`
    events. This allows us to update the clicked element''s position based on the
    mouse''s position when the user moves the mouse pointer while still clicking on
    the selected element. We also use the same code for the `mouseout` event for when
    the user moves too quickly and brings the mouse pointer out of the selected `draggable`
    box. The box''s position will then be updated to the mouse''s position thanks
    to the same code being attached to the `mouseout` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback function for these two events is where the main functionality
    is added. This code looks complex, but it is easy to understand once we break
    it down. First and foremost, nothing will be done unless the clicked element has
    the `dragging` class. This is done using the following `if` statement that checks
    for the `dragging` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this `if` statement, we first get the clicked element''s parent''s position
    (the `frame` element) so we can work out the boundary for the `draggable` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The next block of code looks at the clicked element''s position and determines
    whether or not this is less than the `frame` element''s left position or greater
    than the container element''s right position. If it is either, the `dragging`
    element''s position is set to the boundary limit instead of the mouse pointer''s
    position, stopping the user from being able to drag the element outside of the
    left and right boundaries of the container element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: If the `draggable` element's position is not over the boundary, its position
    is updated to the mouse pointer's left position minus the width of the `dragging`
    element so that the mouse pointer is always in the center of the element while
    dragging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the same logic is applied for the top and bottom boundaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, now that the new top and left positions for the `draggable` element
    have been calculated, knowing that it is either the mouse pointer''s position
    minus the width/height of the `draggable` element divided by two or the boundary
    limits, the jQuery CSS function is used to apply these positions while also setting
    the CSS `position` attribute to `absolute`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And last of all, a final event is used—the `mouseup` event—which is fired when
    the user releases the click from the `dragging` element. When this happens, the
    `dragging` CSS class is removed from the dragged element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a draggable content pop up*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic animated tree menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tree menus are a great way to display a lot of information in a confined space
    and allow users to choose the information they wish to see. This recipe will show
    you how to dynamically create a tree menu based on a set of JSON objects with
    slide up and down effects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-7.html`, `recipe-7.js`, and `recipe-7.css` for this recipe, ensuring
    that they are saved in the same directory as the latest version of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an animated tree menu, ensure you complete all of the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-7.html` to create the basic web page
    required for this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following styles to `recipe-7.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-7.js`, which provides the data and
    functionality to create the dynamic tree menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-7.html` in a web browser and click on the highlighted list items
    to expand the list for items that have children, as depicted in the following
    screenshot:![How to do it…](img/recipe-7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML code contains only the basic elements for a valid HTML page and a `list-container`
    division element that the jQuery code will use to insert the list HTML once it
    has been created. The CSS code contains basic list styles as well as some styles
    to create the right and down arrows, as shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the JavaScript code is an array of objects that represents
    a family tree. Each person in the family tree can have children, and there is
    no limit to the depth of the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main functionality of the jQuery code is within the `createList()` function.
    This function takes two arguments: an array of objects (children) and the current
    list level. Within this function, some inline styles are calculated based on the
    value of `level`. If the current value of `level` is not `1`, meaning the current
    level is not the topmost level, the list is hidden by default. A left margin is
    also applied to the list based on the level, so that with each level lower, the
    list is moved further to the right to create the typical tree view you see in
    applications. A `list` variable is created and the HTML for an unordered list
    element is added to it. Next, each of the objects provided are looped through
    and a list item is created for each one. The length of the object''s `children`
    property is checked to determine whether or not the current object has any children
    itself. If it has children, a link and right arrow are added to the list. Then,
    the `createList()` function is called recursively with the updated level and the
    current object''s own children. This function will return the HTML for an unordered
    list populated with the object''s own children. This will happen for each of the
    objects within the tree variable until the list has been fully created. Then,
    using `$(''.list-container'').html(list);`, the list is inserted into the DOM
    and will become visible on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because all list items except for the top-level items are hidden, a `click`
    event handler needs to be attached to each of the list items that have children,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: A single event that will listen for clicks on any element with the `show-children`
    class is attached to the document. When one of these items has been clicked, the
    `slideToggle()` function is used on the next unordered list element (the children
    list) to either slide it up or down. The `toggleClass()` function is also used
    on the `arrow` element to make the arrow point down when the children list is
    open.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses a static JavaScript array, but it could easily be adapted to
    load a set of JSON objects from a web server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating an accordion content slider*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating tabbed content*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an accordion content slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An accordion allows the user to easily skip through content. There are many
    jQuery plugins that provide the accordion functionality. However, this recipe
    will show you how to create a simple and attractive jQuery accordion content slider
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-8.html`, `recipe-8.css`, and `recipe-8.js` in the same directory
    as the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With your newly created files open, complete the following step-by-step instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-8.html` to create a basic web page with
    the accordion and content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS code to `recipe-8.css` to add styles to the accordion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-8.js` to ignite the accordion content
    slider into action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-8.html` in a web browser and you will be provided with the interactive
    accordion content slider shown in the following screenshot:![How to do it…](img/recipe-8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML code used in this recipe creates a basic web page that contains the
    main accordion markup. There is a main accordion division element that contains
    several sections. Each section contains an anchor tag with the class `header`
    and a content division element that holds the accordion's content. The jQuery
    code uses the header anchor element to hide and show the content sections based
    on the anchor element that was clicked by the user.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS code is very simple and adds basic styles to the accordion. Like in
    the previous recipe, we are using CSS right and down arrows to indicate whether
    a section is open or closed. We also use CSS3 gradients to add a gradient background
    to the accordion headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks to the nature of jQuery, we are able to create the entire accordion
    with only 18 lines of JavaScript. The first part of the jQuery code hides all
    of the accordion content sections except for the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, a `click` event handler is attached to the document to listen for clicks
    on any of the accordion content headers, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the callback function to this event, we select all of the accordion
    content sections and get the one that belongs to the currently clicked header
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'When an accordion section is selected, we only want that one to be displayed.
    To do this, all of the content sections in the following code are looped through
    to hide them, apart from the selected section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Using the jQuery `slideUp()` function, we can hide the elements with the slide
    effect. The arrow in the header is also changed to the right arrow, indicating
    that the content has not been expanded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the selected content section is expanded and the down arrow added
    to indicate that the content has been expanded, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a dynamic animated tree menu*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating tabbed content*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tabbed content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to an accordion, tabbed content is another great way to display a lot
    of information on a single page, allowing users to skip through to the sections
    that are important to them. Like in the previous recipe, there are many jQuery
    plugins that provide this functionality. This recipe shows you how to create this
    functionality on your own from scratch, providing you with a deeper understanding
    of the inner workings of these types of user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the usual files required for a recipe, `recipe-9.html`, `recipe-9.css`,
    and `recipe-9.js`, in the same directory as the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Complete all of the following step-by-step instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a basic web page in `recipe-9.html` using the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `body` tags of the HTML page you just created, add the following HTML
    code to create the tabbed content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `recipe-9.css` and add the following CSS code to style the tabbed content
    and display the first set of content on page load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following jQuery in `recipe-9.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-9.html` in a web browser and click on the section tabs to switch
    between the content sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a quick and simple recipe, but it has a powerful outcome. The HTML
    code in this recipe creates the tab section, which contains navigation and content.
    Each of the content division elements has an ID that corresponds to the links
    in the navigation. For example, to link to the `section1` content, there needs
    to be a corresponding link within the navigation linking to `#content1` as follows:
    `<a href=''#content1''>TITLE HERE</a>`. This allows jQuery to know which section
    of content to make visible when a tab is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: The CSS in this recipe is very simple and needs no further explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'With only nine lines of JavaScript, this is a very simple recipe indeed. The
    jQuery code attaches a click event handler to the document body, listening for
    clicks on the tab navigation. When one of these tabs is clicked, the content section
    ID is collected from the anchor hash as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the active class is removed from all of the tab navigation items and
    added to the clicked item. This class is used to show which tab is currently active
    by changing the background color using CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, all of the content sections are hidden, and then, using the recently
    acquired content ID of the selected tab, the chosen content is made visible using
    the `fadeIn()` function, applying an animation as the content appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the fade-in animation provided by jQuery to show the selected
    content. By looking back at [Chapter 4](ch04.html "Chapter 4. Adding Attractive
    Visuals with jQuery Effects"), *Adding Attractive Visuals with jQuery Effects*,
    you will be able to use any of the effects and animations described in that chapter
    to show and hide the content in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a modal pop up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A modal is a pop up within a web page that overlays over all other content and
    focuses the reader's attention. A modal is often opened based on user interaction,
    such as clicking a button. This recipe will show you how to create a simple modal
    that is opened at the pressing of a button and can be closed from within the modal.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, create `recipe-10.html`, `recipe-10.css`, and `recipe-10.js` before
    you start this recipe, ensuring that the latest version of jQuery is available
    in the same directory as these files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create the modal pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML to `recipe-10.html` to create a basic web page and the
    code that constructs the modal pop up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS code to `recipe-10.css` to style the modal and allow
    it to cover all other content on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-10.js` to open the modal, center it,
    and allow the user to close it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-10.html` in a web browser and click on the **Open Modal** button.
    You should be presented with the modal pop up shown in the following screenshot:![How
    to do it…](img/recipe-10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML creates the basic web page and code to create the modal. The modal
    itself consists of a main modal container, a header, a body, and a footer. The
    footer contains the actions, which in this case is the **OK** button, the header
    holds the title and the close button, and the body contains the modal content.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS applies the absolute position style to the modal, allowing it to move
    freely throughout the page without being hindered by other content. To create
    the modal backdrop, its position is set to `absolute` and its left, right, top,
    and bottom positions are set to `0`, allowing it to expand and cover the entire
    page. A `z-index` value is set on the modal and its backdrop elements, ensuring
    that they always sit above other content and that the modal is above the backdrop.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery code applies click event handlers to the modal open button and any
    element that has the `close-modal` class. The `fadeIn()` and `fadeOut()` functions
    provided by jQuery are used to show the modal. The `fast` argument is passed to
    both of these functions to speed up the animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the jQuery code is used to calculate the modal''s left position,
    allowing it to always sit at the center of the screen. The `modalPosition()` function
    is called on page load and when the browser window is resized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This ensures that the modal will remain in the center of the browser window,
    even if the user changes the width of the window.
  prefs: []
  type: TYPE_NORMAL
- en: The `modalPosition()` function uses the modal's width and the browser window's
    width to calculate the modal's left position. The function then uses the jQuery
    `css()` function to set this value to the modal.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Twitter Bootstrap is a very popular HTML framework that comes with a brilliant
    modal implementation that is ready for use out of the box. Now that you know how
    modals work, you could benefit from the complete solution that Twitter Bootstrap
    offers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a draggable content pop up*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a draggable content pop up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A draggable content pop up is similar to a modal window. However, it is movable
    by the user and does not come with a backdrop to focus the user's attention, allowing
    them to view other content at the same time. This recipe will adapt the modal
    code used in the preceding recipe and the jQuery code from the *Creating a basic
    drag-and-drop functionality* recipe that you saw earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though we will be re-using code from previous chapters, ensure that you
    have `recipe-11.html`, `recipe-11.css`, and `recipe-11.js` created and ready for
    use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-11.html` to create a modal and a basic
    web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS code to `recipe-11.css` to style the modal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following jQuery code into `recipe-11.js` to allow the modal to
    be opened, closed, and dragged:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-11.html` in a web browser and click on the **Open Modal** button
    as in the previous recipe. You will be presented with the same modal pop up without
    the backdrop, allowing you to clearly see the rest of the page content. You will
    also be able to drag the modal around the page by clicking and dragging the mouse
    pointer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipes that have been adapted to create the `draggable` content
    modal go into great detail to explain how the modal and the `draggable` elements
    work, so that will not be repeated in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference with the HTML from the previous modal recipe is that there
    is no modal backdrop and the modal element has the additional class `draggable`,
    which is used by jQuery to apply the drag functionality to elements.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS remains very much the same, except that the code for the backdrop has
    been removed and a drop shadow has been added to the modal using the CSS `box-shadow`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery uses the same code as the previous modal recipe with the window resize
    event handler removed. This event handler was removed because the modal can be
    moved by the user, so there is no need to keep the modal toward the center of
    the page. The `modalPosition()` function is only called on page load so that the
    modal is at the center of the page when it is first opened.
  prefs: []
  type: TYPE_NORMAL
- en: The code used from the basic drag-and-drop recipe is very similar, except that
    instead of using the `draggable` element's parent as the boundary, the browser
    window is used. This removes some complexity because we know that the window's
    left and right positions are always `0`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a basic drag-and-drop functionality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a modal pop up*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
