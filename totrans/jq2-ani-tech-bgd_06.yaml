- en: Chapter 6. Extended Animations with jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*jQuery UI is the official user interface library for jQuery and adds a suite
    of interactive widgets such as tabs and accordions, a series of interaction helpers
    such as drag and drop, and a comprehensive set of effects that extend those provided
    natively by jQuery.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the course of this chapter, we''ll be looking at the additional effects
    added by jQuery UI. Topics we''ll cover include:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining and setting up jQuery UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new effects added by jQuery UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `effect()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the `show()`, `hide()`, and `toggle()` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using easing with jQuery UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating an element's color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animated class transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jQuery UI adds several new animation methods, as well as modifying several
    jQuery methods. The methods that we''ll be looking at in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addClass()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`effect()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hide()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switchClass()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toggle()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining and setting up jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery UI is very easy to obtain and set up. There is an online tool that will
    build a custom download package for us containing just the parts of jQuery UI
    that we'll need. Due to the modular nature of jQuery UI it makes sense to minimize
    the code payload we use on any given web project, and so the ability to include
    only the modules of code we intend to use helps us to minimize any impact on the
    visitor our code may have.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery UI download builder can be found at [http://jqueryui.com/download](http://jqueryui.com/download).
    The page is split into two sections with the components of the library listed
    towards the top and the theme details at the bottom. The download builder has
    a certain amount of intelligence, and will ensure that any dependencies are automatically
    selected when we choose the components we require.
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining and setting up jQuery UI](img/9642_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Download Builder** page shown in the previous screenshot gives us everything
    we need to run any subset of the library components.
  prefs: []
  type: TYPE_NORMAL
- en: All we'll be using in this chapter are the effects, so when we download a package
    we should only select the components found in the **Effects** subsection towards
    the bottom of the page. We don't need to include a theme, and we don't even need
    to include the library core. The effects can be used completely independent of
    the rest of the library; all we need is the **Effects Core** file and the individual
    effects we require. Make sure all of them are selected, and download the package.
  prefs: []
  type: TYPE_NORMAL
- en: The download builder allows you to only download the pieces you need, because
    jQuery UI is basically an add-on. Breaking apart each piece, allows you to select
    only the pieces you need, which greatly cuts down on the file size of the plugin
    when customized.
  prefs: []
  type: TYPE_NORMAL
- en: The package will give us everything we need to use the components that we've
    selected, including a copy of the latest stable release of jQuery, so when using
    jQuery UI, jQuery itself does not need to be downloaded separately.
  prefs: []
  type: TYPE_NORMAL
- en: All of the JavaScript for each selected component is combined and compressed
    into a single file by the download builder, and any functional CSS or theme files
    will be combined into a single stylesheet. We don't need any of the theme files
    for working with the effects, but ensure the `.js` file from the archive provided
    by the download builder goes into our `js` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new template file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The examples in the remainder of this chapter will be short, mostly image-based
    examples that illustrate each effect in turn, so it makes sense to use a slightly
    different template file for them. Create a new template file by adding a reference
    to the jQuery UI source file directly after the jQuery one just before the closing
    `</body>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The new effects added by jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing, jQuery UI gives us 14 new, predefined animation effects
    to use in our pages; these are listed, together with a brief description of their
    usage, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Animations | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `blind` | The target element is shown or hidden by rolling it down or up
    like a window blind. |'
  prefs: []
  type: TYPE_TB
- en: '| `bounce` | The target element is bounced horizontally or vertically for a
    specified number of times. |'
  prefs: []
  type: TYPE_TB
- en: '| `clip` | The target element is shown or hidden by moving opposing edges in
    towards the center of the element, or out to its full width or height. |'
  prefs: []
  type: TYPE_TB
- en: '| `drop` | The element appears to drop onto or off of the page in order to
    show or hide it respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| `explode` | The explode effect causes the target element to separate into
    a specified number of pieces before fading away, or to fade into view in several
    pieces before coming together to form the complete element. |'
  prefs: []
  type: TYPE_TB
- en: '| `fold` | The element appears to fold closed or open. |'
  prefs: []
  type: TYPE_TB
- en: '| `highlight` | The `background-color` property of the target element is set
    (to yellow by default, although this is configurable), and then fades away after
    a short interval. |'
  prefs: []
  type: TYPE_TB
- en: '| `puff` | The target element increases in size slightly and then fades away.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pulsate` | The target element''s opacity is adjusted a specified number
    of times, making the element appear to flicker on and off. |'
  prefs: []
  type: TYPE_TB
- en: '| `scale` | The dimensions of the target element are adjusted to increase or
    decrease its size. |'
  prefs: []
  type: TYPE_TB
- en: '| `shake` | The target element is shaken a specified number of times. This
    effect is similar to the bounce effect with the key difference being that the
    distance of the shake remains the same on each iteration of the animation. |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | The dimensions of the target element are adjusted to increase or
    decrease its size. This effect is almost identical to `scale`. |'
  prefs: []
  type: TYPE_TB
- en: '| `slide` | The target element is made to slide in or out of view, horizontally
    or vertically. |'
  prefs: []
  type: TYPE_TB
- en: '| `transfer` | The outline of the specified element is transferred to another
    element on the page. |'
  prefs: []
  type: TYPE_TB
- en: Using the effect API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jQuery UI introduces the `effect()` method, which can be used to trigger any
    of the effects listed in the previous table. The `effect()` method''s usage pattern
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( effect [,options] [,duration] [,complete] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the effect that we would like to use is always the first argument
    of the `effect()` method. It's supplied in the string format.
  prefs: []
  type: TYPE_NORMAL
- en: Each effect has custom configuration options that can be set to control how
    the effect displays. These options are set in a configuration object which is
    passed to the `effect()` method as the second argument, following the name of
    the effect.
  prefs: []
  type: TYPE_NORMAL
- en: We can also supply a duration for the effect as an argument. Just like standard
    jQuery animations, we can supply either an integer representing the duration of
    the effect in milliseconds, or one of the strings `slow` or `fast`.
  prefs: []
  type: TYPE_NORMAL
- en: If no configuration is required, the duration may be passed to the `effect()`
    method as the second argument. If no duration is supplied, the default duration
    of `400` milliseconds will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, a callback function may be provided as the final argument. The supplied
    function will be executed once for each selected element when the effect ends.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few examples of how the `effect()` method can be used.
  prefs: []
  type: TYPE_NORMAL
- en: The bounce effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bounce` effect is similar to, but much more controllable than, the `easeOutBounce`
    easing function. It can be used with either the effect API or show/hide logic
    depending on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( "bounce" [,configuration] [,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following configuration options are available for the bounce effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"up"` | The direction of bounce. The other possible option
    is the string `down` |'
  prefs: []
  type: TYPE_TB
- en: '| `distance` | `20` | The initial distance of bounce (successive bounces reduce
    in distance) in pixels |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"effect"` | Whether to run the effect normally or use the show/hide
    logic, other values accepted may be the strings `show`, `hide`, or `toggle` |'
  prefs: []
  type: TYPE_TB
- en: '| `times` | `5` | The number of bounces |'
  prefs: []
  type: TYPE_TB
- en: Time for action – using the bounce effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example we''ll see how the jQuery UI effect can be combined to create
    a bouncing ball that travels across the page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following simple elements in the `<body>` of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="travel">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="ball"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'All we need is a simple container `<div>` and an inner `<div>`. In the empty
    function at the end of the `<body>`, add the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#ball").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#travel").animate({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'left: "+=300px"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, 1500).find("div").effect( "bounce", { times: 4,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'distance: 100 }, 1500 );'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the file as `bounce.html`. We also need a few simple styles. Add the following
    CSS to a new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#travel {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:100px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#ball {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:150px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:150px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cursor:pointer;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/ball.jpg) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this as `bounce.css` in the `css` folder. When we run the page and click
    on the ball, we should find that it bounces along the page, gradually coming to
    a halt:![Time for action – using the bounce effect](img/9642_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous composition shows the ball traveling across the page, bouncing
    up and down as it goes from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the ball is clicked, we first use jQuery's `animate()` method to animate
    the `left` style property of the container, `#travel`, by 300 pixels, over a duration
    of 1.5 seconds. We slow this animation down to improve the appearance of the overall
    animation, but it is not strictly required. We then navigate down to the inner
    `<div>` element and use the `effect()` method, specifying the `bounce` effect.
  prefs: []
  type: TYPE_NORMAL
- en: We need to use both elements, `#travel` and `#ball`, because if we use the `animate()`
    and `effect()` methods on the same element, the bounce effect will go into the
    element's animation queue and the two animations will execute one after the other
    instead of running simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: The highlight effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `highlight` effect is a simple but effective way to draw the visitor's attention
    to new items that have been added to the page, and is used for this purpose in
    many of today's leading web-based interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( "highlight" [,configuration] [,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are only two configuration options for the `highlight` effect; these
    are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Options | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | `"#ffff99"` | Sets the `background-color` property of the element
    being highlighted |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"show"` | Sets whether the effect will be hidden or shown when
    used with the `effect()` method, other possible values include `hide`, `toggle`,
    or `effect` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – highlighting elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example we'll create a simple to-do list, with a series of default items
    that can be checked off. We can also allow new items to be added to the list and
    will apply the `highlight` effect to new items as they are added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to the `<body>` element of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="todo">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <h2>Todo List</h2>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <ul>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <li><label><input type="checkbox">Item 1</label></li>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <li><label><input type="checkbox">Item 2</label></li>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <li><label><input type="checkbox">Item 3</label></li>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </ul>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <input type="text" id="new">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <button id="add">Add</button>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the behavior for our to-do list using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#add").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var newItem = $("#new"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: text = newItem.val();
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if (text) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var li = $("<li>"),
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: label = $("<label>").html("<input type=\"checkbox\">" +text).appendTo(li);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: li.appendTo("#todo ul").effect("highlight", 2000);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: newItem.val("");
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // prevent the form from submitting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return false;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this page as `highlight.html`. We also need some CSS for this example.
    In a new file in your text editor, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#todo {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:208px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: font:normal 13px sans-serif;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#todo ul {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: padding:0;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: margin-bottom:30px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#todo li { list-style-type:none; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#todo label {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:block;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border-bottom:1px dotted #000;'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: li input {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: top:2px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input { margin-right:10px; }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this page as `highlight.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we run the page in a browser, we can add a new item and it will be highlighted
    briefly as the new item is added to the list:![Time for action – highlighting
    elements](img/9642_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot we see the fade effect before it fades away from
    the newly added item.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We add a click handler to the `<button>` element at the bottom of the list,
    which drives the functionality of the rest of the behavior. When the `<button>`
    element is clicked, we cache the selector for the `<input>` field and obtain the
    text that was entered into it.
  prefs: []
  type: TYPE_NORMAL
- en: If the variable holding the text is not empty, we then create new `<label>`
    and `<input>` elements. We add the text to the `<label>` element, as well, and
    then append the new item to the list. Finally, we apply the `highlight` effect
    and empty the `<input>` field.
  prefs: []
  type: TYPE_NORMAL
- en: The pulsate effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pulsate` effect fades the element in and out of view a specified number
    of times so that the target element appears to pulsate. Like most of the effects
    we have looked at so far, it is easy to use and requires little or no configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( "pulsate", [,configuration] [,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `pulsate` effect also has just two configurable options; these are shown
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"show"` | Sets whether the target element is shown or hidden when
    used with the `effect()` method, other possible values include `hide`, `toggle`,
    and `effect` |'
  prefs: []
  type: TYPE_TB
- en: '| `times` | `5` | Sets the number of times the target element is pulsated |'
  prefs: []
  type: TYPE_TB
- en: Time for action – making an element pulsate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we'll show a simple time sheet in which rows can be deleted
    by clicking a link. If a link is clicked, the corresponding row will be pulsated
    before it is removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following markup in the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <table>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <th>Job Number</th>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <th>Start Time</th>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <th>End Time</th>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <th colspan="2">Total</th>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>05432</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>8:00</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>8:43</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>43 minutes</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a class="delete" href="#" title="Delete this item">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>05684</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>8:43</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>10:21</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>1 hour 38 minutes</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a class="delete" href="#" title="Delete this item">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>05684</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>10:21</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>13:30</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>3 hour 9 minutes</td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a class="delete" href="#" title="Delete this item">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </td>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </table>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the code to apply the effect to the closure at the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(".delete").click(function(e) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var row = $(this).closest("tr");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: row.closest("tr").children().css("backgroundColor","red").effect("pulsate",
    function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: row.remove();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this file as `pulsate.html`. Only a couple of styles are required for
    this example. These should go into a new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: table {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: border-spacing:0;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: font:normal 13px sans-serif;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: th, td {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: text-align:left;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: padding-right:20px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file in the `css` folder as `pulsate.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking the delete link in any row will apply the `pulsate` effect and then
    remove the table row:![Time for action – making an element pulsate](img/9642_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshot shows a single `pulsate` animation as it fades out.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a **Delete** link is clicked on, our handler function first sets the `background-color`
    property of the `<tr>` element that the link is within. This is not mandatory
    for the effect, but it does help bring it to life.
  prefs: []
  type: TYPE_NORMAL
- en: We then apply the `pulsate` effect to all of the `<td>` elements within the
    row using the `effect()` method. We need to apply the effect to the `<td>` elements
    instead of the `<tr>` element so that the effect works as intended in IE.
  prefs: []
  type: TYPE_NORMAL
- en: When the effect ends, our inline callback function will be executed, which removes
    the `<tr>` element. Obviously the `<tr>` element can only be removed once, and
    once it has been removed, subsequent attempts to remove it will just fail silently.
  prefs: []
  type: TYPE_NORMAL
- en: The shake effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shake` effect shakes the element that it is applied back and forth a specified
    number of times.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( "shake", [,configuration] [,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `shake` effect exposes three configuration options that allow us to customize
    its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration options are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"left"` | Sets the direction that the element moves in |'
  prefs: []
  type: TYPE_TB
- en: '| `distance` | `20` | Sets the number of pixels the element travels when it
    is shaken |'
  prefs: []
  type: TYPE_TB
- en: '| `times` | `3` | Sets the number of times the element shakes |'
  prefs: []
  type: TYPE_TB
- en: Time for action – shaking an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The open source CMS WordPress uses the `shake` effect when incorrect login details
    are entered in the sign-in form for its backend administration area. In this example
    we can see how easy it is to implement this behavior using the `shake` effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following markup to the template file as the basis of the login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <form>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <h2>Login</h2>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <label>Username:<input id="name" type="text"></label>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <label>Password:<input id="pass" type="text"></label>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <input type="submit" id="submit" value="Login">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </form>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now add the following code to the empty closure at the bottom of the template
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#submit").click(function(e) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("input").each(function(i, val) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (!$(this).val()) {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: $(this).css("border", "1px solid red").effect("shake", {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'distance: 5 }, 100);'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this file as `shake.html`. We also need a basic stylesheet for this example.
    Add the following CSS to a new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: form {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:145px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: padding:20px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin:auto;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border:1px solid #000;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: font:normal 13px sans-serif;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: h2 {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: font-size:14px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin-top:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:block;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin-bottom:10px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border:1px solid #000;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `shake.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we run the page in a browser and click the **Login** input button without
    completing either of the `<input>` fields, both fields will have their borders
    set to red and will shake from side to side:![Time for action – shaking an element](img/9642_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot, we see the text fields being shaken when they are
    left empty and the **Login** button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the **Login** button is clicked we simply check to see if each `<input>`
    has a value, and if not, we apply a red border and then call the `effect()` method
    specifying `shake` as the effect. We use a configuration object to reduce the
    distance the element moves, as well as specifying a relatively short duration.
  prefs: []
  type: TYPE_NORMAL
- en: The size effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `size` effect is used to resize an element, making it grow or shrink depending
    on its configuration. Unlike most of the other effects, the `size` effect must
    be configured for it to be used successfully.
  prefs: []
  type: TYPE_NORMAL
- en: The `size` effect is also one of the only effects that has the base core file
    as well as another effect as a dependency. Most components rely only on the core
    file. As we downloaded the entire effect suite from the jQuery UI download builder,
    we don't need to worry about including the additional effect. It's already in
    the single file that the download builder created when we downloaded it at the
    start of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( "size", [,configuration] [,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `size` effect gives us four configurable options, which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `from` | `none` | Sets the size of the target element at the beginning of
    the animation. This option accepts an object with the `height` and `width` keys
    which are used to set the starting size of the target element. This option is
    not mandatory |'
  prefs: []
  type: TYPE_TB
- en: '| `to` | `none` | Sets the size of the target element at the end of the animation.
    This option accepts an object with the `height` and `width` keys which are used
    to set the ending size of the target element. This option must be supplied |'
  prefs: []
  type: TYPE_TB
- en: '| `origin` | `[''middle'',''center'']` | Sets the vanishing point for hiding
    animations, or the point from which it grows when used with show logic |'
  prefs: []
  type: TYPE_TB
- en: '| `scale` | `"both"` | This option sets whether the whole `box` of the element
    (including border and padding CSS values) is scaled, just the `content`, or as
    in the default, `both` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – resizing elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A popular use of growing and shrinking elements is the Fisheye menu, where elements
    grow when the mouse pointer hovers over them, and shrink back down when the pointer
    moves off of them. This effect is also used by the icons on the dock in Apple's
    OSX.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `size` effect, we can implement our own basic Fisheye menu with just
    a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following markup to the `<body>` of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="dock">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <a href="#" class="icon" id="finder">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/finder.png"></a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a href="#" class="icon" id="mail">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/mail.png"></a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a href="#" class="icon" id="safari">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/safari.png"></a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a href="#" class="icon" id="firefox">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/firefox_small.png"></a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <a href="#" class="icon" id="itunes">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/itunes.png"></a>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following JavaScript to the third `<script>` element at the bottom
    of the `<body>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(".icon", "#dock").hover(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(this).stop().animate({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'top: -31'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}).find("img").stop().effect("size", {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'scale: "box", to: { width: 64, height: 64 }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(this).stop().animate({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'top: -15'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}).find("img").stop().effect("size", {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'scale: "box", to: { width: 48, height: 48 }'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this file as `size.html`. We also need some styling. In a new file add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#dock {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:380px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:90px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:fixed;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bottom:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/dock.png) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .icon {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:-15px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:44px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .icon img { border:none; }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#mail { left:108px; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#safari { left:170px; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#firefox { left:229px; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#itunes { left:289px; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `size.css` in the `css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we run the file in a browser, we should see that the individual items in
    the menu grow and shrink as the mouse pointer moves over them:![Time for action
    – resizing elements](img/9642_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot we see the menu as the pointer hovers over one of
    the items in the menu.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We attach the `mouseenter` and `mouseleave` event handlers to each item within
    the dock using jQuery's `hover()` method, which accepts two functions, the first
    being executed on the `mouseenter` event, the second being executed on `mouseleave`.
  prefs: []
  type: TYPE_NORMAL
- en: In the first function we use the `stop()` method to manage the queue and then
    animate the element's position by changing its `top` CSS value. Using `stop()`
    here prevents an unsightly jarring of the element's position on screen.
  prefs: []
  type: TYPE_NORMAL
- en: We then navigate down the image inside the link and call the `stop()` method
    on this element, as well, before applying the `size` effect. We provide integer
    values for the `width` and `height` keys in a configuration object and as these
    values are larger than the dimensions of the image, the image will be increased
    in size.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that when we use the `stop()` method with the image, it is to prevent a
    build-up of effects if the mouse pointer is repeatedly moved on and off one of
    the links. The second function is really the reverse of the first function, which
    simply resizes the element back to its original position and size.
  prefs: []
  type: TYPE_NORMAL
- en: The transfer effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `transfer` effect simply transfers the outline of one element to another
    element. Like the `size` effect that we looked at a moment ago, the `transfer`
    effect will not work if it is not configured.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).effect( "transfer", [,configuration] [,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `transfer` effect has only two configuration options, although only one
    of them needs to be set for the effect to work. The configuration options are
    listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `className` | `none` | The value of this option, if set, is added to the
    transfer element when the effect runs |'
  prefs: []
  type: TYPE_TB
- en: '| `to` | `none` | A jQuery selector that specifies the target element that
    the transfer element is sent to |'
  prefs: []
  type: TYPE_TB
- en: Time for action – transferring the outline of one element to another
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example we'll recreate a popular application installation dialog from
    OSX, and use the `transfer` effect to help show visitors where to drag the icon
    (the icon won't actually be draggable; all we're doing is looking at the `transfer`
    effect).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following elements to the `<body>` element of the template file to
    create the `install` dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="install">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="firefox"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="apps"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>To install the application, drag its icon over to the apps
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: folder icon.</p>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <button id="show">Show me</button>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following script to the empty function at the bottom of the template
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#show").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#firefox").effect("transfer", {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'to: "#apps",'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'className: "ui-effect-transfer"'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, 1000);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the page as `transfer.html`. For the stylesheet add the following code
    to a new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: font:normal 14px sans-serif;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#install {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:417px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:339px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/install.jpg) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#firefox {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:124px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:121px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:34px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:132px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/firefox.png) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#apps {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:54px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:52px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: right:58px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:172px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/apps.png) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.ui-effect-transfer { border:2px solid #7bee76; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `transfer.css` in the `css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the `<button>` element is clicked on, an outline is transferred from the
    Firefox icon to the App folder icon to direct the visitor:![Time for action –
    transferring the outline of one element to another](img/9642_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The transfer element is resized as it moves from the starting element across
    to the target element. The animation is approximately 50 percent complete in the
    previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the underlying HTML we have a container `<div>` element, which is given the
    background image of the application install dialog box. Within this we have a
    `<div>` element, which is given the Firefox icon background, and a second `<div>`
    element, which is given the App folder icon. Both of the inner `<div>` elements
    are given `id` attributes for styling purposes and for easy selection with jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: In the script we add a click-handler function to the `<button>` element, which
    applies the effect every time the `<button>` element is clicked. The handler function
    calls the transfer effect on the `#firefox` element, which sets the icon as the
    starting element.
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration object, we set the `to` option to a selector for the `apps`
    element, and the `className` option to the `ui-effect-transfer` string. This string
    is applied to the element as a class name and is used to add a green border to
    the transfer element while it is visible.
  prefs: []
  type: TYPE_NORMAL
- en: Each time the `<button>` element is clicked on, the transfer element will be
    shown and will animate from the starting element (the Firefox icon) to the ending
    element (the Apps folder icon).
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – using the effect API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. How many new effects does jQuery UI give us?
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '18'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '9'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '14'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. How is the effect we wish to use specified?
  prefs: []
  type: TYPE_NORMAL
- en: By calling the effect as a function, for example, `bounce()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name of the effect is passed in string format to the `effect()` method as
    the first argument, for example, `effect("bounce")`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The name of the effect is provided as the value of the `effect` key in an object
    passed to the `animate()` method, for example, `animate({ effect: "bounce" })`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name of the effect is passed as a string to an event helper, for example,
    `click("bounce")`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using effects with the show and hide logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the jQuery UI effects can also be used in conjunction with jQuery's
    `show()`, `hide()`, and `toggle()` methods when showing or hiding logic is required.
    In fact, some of the effects are better suited to this method of execution.
  prefs: []
  type: TYPE_NORMAL
- en: The blind effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `blind` effect is the perfect example of an effect that is usually best
    used with the show/hide logic as opposed to the standard effect API. Although
    the `blind` effect will work with the standard effect API, what will happen is
    that the effect will run according to its default mode, but then the element will
    be put back into its original state. This is true for all effects that have a
    `mode` configuration option.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "blind", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `blind` effect has the following configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"vertical"` | Sets the axis along which the target element
    is shown or hidden |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"hide"` | Sets whether the element is shown or hidden when used
    with the `effect()` method. Other possible values include `show`, `toggle`, and
    `effect` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – using the blind effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I mentioned earlier that the effect is reminiscent of a window blind rolling
    up or down, so let''s base our next example on that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `<body>` element of the template file add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="window">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="blind"></div>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement the effect with the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#window").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#blind").toggle("blind");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this file as `blind.html`. The stylesheet for this example is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#window {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:464px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:429px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cursor:pointer;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/window.jpg) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#blind {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:none;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:332px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:245px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:64px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:113px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/blind.png) no-repeat 0 100%;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this as `blind.css` in the `css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we run the page in a browser, the blind should alternately roll down and
    up each time the window is clicked:![Time for action – using the blind effect](img/9642_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshot shows the blind in its fully-open state.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set a click handler on the outer container which calls the `toggle()` method
    on the inner element. In the CSS, we set the inner element to be hidden initially,
    so the first time the container element is clicked, the inner element will be
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: The clip effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `clip` effect causes the element it is called upon to reduce in size vertically
    or horizontally until it disappears.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "clip", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The configuration options we have at our disposal when using the `clip` effect
    allow us to control the direction in which the animation proceeds, and whether
    the element is shown or hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"vertical"` | Sets the axis along which the element animates
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"hide"` | Configures whether the element is hidden or shown. Other
    possible values are `show`, `toggle`, and `effect` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – clipping an element in and out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This effect is billed as being similar to what happens to the picture when an
    old television set is turned off, so let's work that into our example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following elements to the `<body>` element of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="tv">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="bg"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="static"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, use the following simple script at the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#tv").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#static").effect("clip");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this file as `clip.html`. The stylesheet for this example is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#tv {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:300px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:269px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cursor:pointer;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/tv.png) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#bg {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:220px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:180px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:42px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:30px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: z-index:-2;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background-color:#000;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#static {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:216px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:178px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:44px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:31px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: z-index:-1;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:url(../img/static.gif) no-repeat 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file in the `css` folder as `clip.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the page is run, we should be able to click anywhere on the television
    and see the effect run:![Time for action – clipping an element in and out](img/9642_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshot shows the static element as it is being clipped.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underlying page has a collection of elements on it with the outer container
    being styled to look like the television and a couple of inner elements, one of
    which is a simple background which sits behind the static element. Both inner
    containers use CSS `z-index` to sit behind the outer container.
  prefs: []
  type: TYPE_NORMAL
- en: When any part of the television is clicked, the static element has the effect
    applied to it without any additional configuration, and because the default mode
    of the effect is `hide`, the element will be hidden automatically when the effect
    ends. To see the reverse of the effect, we could hide the static by default and
    set the mode to `show`, or we could set the `mode` to `toggle` and have the static
    alternately show and hide.
  prefs: []
  type: TYPE_NORMAL
- en: The drop effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `drop` effect is used to show an element while sliding it open, or hide
    it while sliding it closed. This effect works on both the `position` and `opacity`
    of the element it is applied to.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "drop", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `drop` effect allows us to control the direction in which the element drops,
    and whether it is shown or hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"left"` | Sets the direction that the element drops in or
    out of the page. The other option is the string `right` |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"hide"` | Sets whether the element is shown or hidden when using
    the `effect()` method. Other possible values include `show`, `toggle`, and `effect`
    |'
  prefs: []
  type: TYPE_TB
- en: Time for action – using the effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The social networking site Twitter introduced a novel effect whereby the system
    reports actions to the visitor by displaying a message that drops down at the
    top of the page. We can easily replicate this behavior using the `drop` effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following markup to the `<body>` element of our template page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="confirmation">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>Your request has been completed!</p>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, at the bottom of the page add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#confirmation").effect("drop", {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mode: "show",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'direction: "up"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var timer = function() {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '$("#confirmation").effect("drop", { mode: "hide",'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'direction: "up"});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: setTimeout(timer, 3000);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the page as `drop.html`. We only need a few styles for this example. Create
    the following very basic stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body { background-color:#3cf; }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#confirmation {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:none;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:100%;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:60px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: z-index:999;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background-color:#fff;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: text-align:center;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: font:normal 18px sans-serif;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#confirmation p {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:18px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the CSS as `drop.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the page loads, the message should initially be displayed before fading
    away after a short interval:![Time for action – using the effect](img/9642_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshot shows the message slowly being hidden. It will appear
    to slide up and fade out at the same time when being hidden after the timer interval
    has passed.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underlying markup of the message itself is extremely simple; we just need
    a container and the actual message. In our example the message is hardcoded into
    the page, but we could easily set this dynamically depending on the action being
    reported.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS is equally as simple, supplying a background color for the page to better
    highlight the message, and providing some basic styles for the container and the
    message itself. The most important rule (in this implementation) is that the container
    is initially hidden from view.
  prefs: []
  type: TYPE_NORMAL
- en: Our script shows the message as soon as the page has loaded, but normally it
    would be triggered by the completion of some system action. We use the `effect()`
    method to initiate the effect and configure the `mode` to `show` and the `direction`
    to `up` (the element will still appear to drop downwards because it is positioned
    absolutely) using a configuration object passed as the second argument to the
    `effect()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Within the callback function passed to the `effect` method, we create an inline
    function stored in the `timer` variable. Within this function we just hide the
    confirmation message, using the `effect()` method and setting the `mode` configuration
    option to `hide` and the `direction` option to `up` once again.
  prefs: []
  type: TYPE_NORMAL
- en: After this function definition, we use JavaScript's `setTimeout` function to
    execute the `timer` function after 3 seconds have elapsed. We use a closure to
    call our `timer` function in keeping with the current best practice.
  prefs: []
  type: TYPE_NORMAL
- en: The explode effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `explode` effect provides a great visual show by exploding the selected
    element into a specified number of pieces before fading them away. This effect
    can be used with both the effect API, as well as the `show`, `hide`, or `toggle`
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "explode", [,configuration][,duration]
    );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using the `explode` effect we can control how many pieces the element
    is exploded into, and whether the element is shown or hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"hide"` | Sets whether the element is shown or hidden when used
    with the `effect()` method. Other values are `show`, `effect`, and `toggle` |'
  prefs: []
  type: TYPE_TB
- en: '| `pieces` | `9` | Sets the number of pieces the element is exploded into |'
  prefs: []
  type: TYPE_TB
- en: Time for action – exploding an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example we will make an image explode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just add the following simple image to the `<body>` element of the template
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/grenade.jpg" alt="Grenade">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then add the following equally simple code to the empty function at the bottom
    of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("img").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(this).effect("explode");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this page as `explode.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This example is so simple we don't even need a stylesheet. Once we click on
    the grenade, it is exploded into the default number of pieces:![Time for action
    – exploding an element](img/9642_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The exploded element fades away as the individual pieces of the element move
    apart.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the example, all we need to do is attach a click handler directly to the
    image which applies the `explode` effect using the `effect()` method. No configuration
    in this instance is required because the default `mode` of the effect is `hide`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we can also run this effect in reverse by setting the `mode` option
    to `show`, or by using the `show()` logic instead. In this scenario, we will see
    the target element constructed from a series of pieces that fade in and fly together—an
    explosion in reverse.
  prefs: []
  type: TYPE_NORMAL
- en: The fold effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `fold` effect simulates something being folded in half along one axis and
    then folded in half along the other axis. Of course, the element isn't actually
    folded in the 3D sense; first, one side of the element moves up a specified amount,
    and then another side is moved in and the element disappears.
  prefs: []
  type: TYPE_NORMAL
- en: By default the effect uses the `hide` mode so it will automatically be hidden
    at the end of the animation. The element being folded is not scaled; it is clipped
    instead, so images and text will not squash up as the effect runs.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "fold", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `fold` effect exposes three configurable options, which are shown in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `horizFirst` | `false` | Sets whether the element is clipped along the horizontal
    axis first or not |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"hide"` | Sets whether the element is shown or hidden when used
    with the `effect()` method. Other values may include `show`, `effect`, or `toggle`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | `15` | This sets the distance of the first fold in pixels and can
    take either an integer, or a string specifying a value, such as a percentage |'
  prefs: []
  type: TYPE_TB
- en: Time for action – folding an element away
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we'll apply the fold effect to a simple image of a piece of
    paper.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we need is an image; add the following code to the `<body>` element of
    the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/paper.jpg" alt="A piece of paper">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, add the following simple script to the bottom of the page, in the empty
    function as with previous examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("img").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$(this).effect("fold", { size: "50%" }, 1000);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `fold.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is another example that we don't need a stylesheet for. When the image
    is clicked, it should fold up and disappear:![Time for action – folding an element
    away](img/9642_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshots, we see the image first as it starts out, then when
    the effect has hidden the bottom half of the image, and finally, as the top half
    of the image is being hidden. Notice that the target element is clipped and not
    resized.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We simply set a click handler on the `<img>` element, which will apply the `fold`
    effect. We specify the `size` option as `50%` so that the amount of fold along
    each axis is equal, and slow the effect down slightly by specifying a longer than
    default duration of `1000` milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: The puff effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `puff` effect expands the element it is applied to by a specified amount
    while fading it away to nothing, or fades it in and then shrinks it slightly,
    depending on how it is used.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "puff", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `puff` effect gives us control over the size that the element is increased
    to, and whether it is shown or hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"hide"` | Sets whether the element is displayed or hidden when
    used with the `effect()` method. Other possible values include `show`, `effect`,
    and `toggle` |'
  prefs: []
  type: TYPE_TB
- en: '| `percent` | `150` | Sets the size the element is scaled to in percent |'
  prefs: []
  type: TYPE_TB
- en: Time for action – making an element disappear in a puff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we'll have a dialog box displayed in the center of the browser
    window and apply the `puff` effect to it when either the **OK** or **Cancel**
    buttons are clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `<body>` element of our template file, add the following elements for
    the dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="confirm">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/help.png" alt="Help Icon">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>Are you sure you want to do that?</p>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <button>Ok</button><button>Cancel</button>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the accompanying script to the empty function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#confirm").css({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'left: $(window).width() / 2 - $("#confirm").width() / 2,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'top: $(window).height() / 2 - $("#confirm").height() / 2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#confirm, button").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#confirm").effect("puff");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this page as `puff.html`. Add the following styles for the dialog box
    to a new file in your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#confirm {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:block;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:400px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:120px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border:1px solid #ccc;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:#EEE;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: font:normal 13px sans-serif;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#confirm img {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin:20px 20px 0 20px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: float:left;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#confirm p { margin:40px 0 0 0; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#confirm button {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:68px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin:20px 10px 0 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: float:right;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this new file as `puff.css` in the `css` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we run the page in a browser, we should find that the dialog is initially
    centered in the window, and that clicking either of the `<button>` elements closes
    it using the `puff` effect:![Time for action – making an element disappear in
    a puff](img/9642_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshot shows the dialog expanding while it is fading away.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first part of our script centers the dialog in the window both vertically
    and horizontally. One point to note is that we cannot use `margin:auto` to center
    the dialog because it will lose these margins when the effect is applied.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the script simply adds click handlers to each of the `<button>`
    elements which apply the `puff` effect when they are clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: The slide effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `slide` effect is very similar to the `drop` effect. The only difference
    is that with the `slide` effect, the opacity of the target element is not adjusted
    at all. It's also very similar to the slide family of effects exposed by jQuery
    itself, although with the jQuery UI `slide` effect, we're not restricted to the
    vertical axis—we can slide horizontally, too.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "slide", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `slide` effect has three configuration options which let us specify the
    direction and distance of the slide, and whether it is shown or hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"left"` | Sets the direction the animation proceeds in |'
  prefs: []
  type: TYPE_TB
- en: '| `distance` | The width of the target element, including padding | Sets the
    distance that the target element slides to |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `"show"` | Sets whether the element is displayed or hidden when
    used with the `effect()` method. Other acceptable values are `hide`, `effect`,
    and `toggle` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – sliding elements in and out of view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying captions when a visitor hovers over an image is an interactive and
    interesting way of displaying additional information about the image without making
    your design appear cluttered. With the `slide` effect, we can easily animate the
    showing and hiding of the caption, which is what we'll do in this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `<body>` element of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="image">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/mantis.jpg" alt="Praying Mantis">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<div>Praying Mantis: Mantis religiosa</div>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, at the bottom of the page, in the empty function, add the following short
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#image").hover(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(this).find("div").stop(true, true).show("slide");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(this).find("div").stop(true, true).hide("slide");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this as `slide.html`. Next, create the following stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#image {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: float:left;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#image img { margin-bottom:-5px; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#image div {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:none;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:100%;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: padding:10px 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: left:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bottom:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: top:auto!important;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: text-align:center;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: font-style:italic;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background-color:#000;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: color:#fff;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `slide.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we view the page we should find that the caption is displayed as soon as
    we move the mouse over the image, and then removed when we move the mouse off
    of it:![Time for action – sliding elements in and out of view](img/9642_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshots we see the caption sliding out from the left edge
    of the container.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The image and caption are held in a container so that the caption can be positioned
    accurately. We use jQuery's `hover()` method, which allows us to attach event
    handlers for both the `mouseover` and `mouseout` events, to show the caption by
    sliding it in, or hide it by sliding it out.
  prefs: []
  type: TYPE_NORMAL
- en: We don't need any additional configuration in this simple example, but we do
    need to manage the queue effectively to stop a build-up of animations if the mouse
    pointer is moved on and off the image repeatedly, which we handle with the `stop()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: The scale effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `scale` effect is very similar to the `size` effect that we looked at earlier,
    and as we saw, several effects actually require this effect as a dependency. The
    main difference between this effect and the `size` effect is that with `scale`,
    we can only specify a percentage that the target element should be scaled to,
    not supply exact pixel sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(selector).hide|show|toggle|effect( "scale", [,configuration][,duration] );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `scale` effect has more configuration options than any other effect added
    by jQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration options are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | `"both"` | Sets which axis the element is scaled along. Other
    options include `vertical` and `horizontal` |'
  prefs: []
  type: TYPE_TB
- en: '| `from` | none | Sets the starting dimensions of the element |'
  prefs: []
  type: TYPE_TB
- en: '| `origin` | `[''middle'', ''center'']` | Sets the vanishing point of the element
    if it is being hidden, or the point from which it grows if it is being shown |'
  prefs: []
  type: TYPE_TB
- en: '| `percent` | `0` | Sets the percentage by which the element will grow or shrink
    |'
  prefs: []
  type: TYPE_TB
- en: '| `scale` | `"both"` | This option sets whether the whole `box` of the element
    (including border and padding CSS values) is scaled, just the `content`, or as
    in the default, `both` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – scaling an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's common practice on an image-heavy site to show a set of thumbnail images
    which link to a full-sized image that is displayed when the image is clicked,
    either inline in a modal pop up, or in a separate window. In this example we'll
    create a thumbnail image that scales to a full-sized version when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following few elements to the `<body>` element of the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="container">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/europa.jpg" alt="Europa">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The script we need is a little longer, but is still pretty simple. In the empty
    function at the end of the page, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("img").click(function() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var img = $(this);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if(!img.hasClass("full")) {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: img.addClass("full").effect("scale",
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ percent: 400, scale: "box",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'origin: [''top'',''left''] });'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: img.removeClass("full").effect("scale",
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ percent: 25, scale: "box",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'origin: [''top'',''left''] });'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the page as `scale.html`. In the stylesheet for this example, we''ll need
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#container {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: float:left;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cursor:pointer;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#container img {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:150px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: height:150px;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `scale.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we run the page we should find that clicking on the image causes it to
    be scaled up to 400 percent of its initial size:![Time for action – scaling an
    element](img/9642_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshots illustrate the effect in action. Clicking on the image
    again will scale the image back to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the page our image is held in a simple `<div>` container. The image is scaled
    down from its original size using CSS, so when we scale the image up we will actually
    be returning it to full size, so it won't look blocky or fuzzy at all.
  prefs: []
  type: TYPE_NORMAL
- en: In the script we first set a click handler on the image and then cache a reference
    to it so that we don't have to keep creating jQuery objects referring to this.
    If the image doesn't have a class name of `full`, we know the image has not been
    scaled up already, so we add the `full` class and then scale it up by 400 percent
    using the `percent` option.
  prefs: []
  type: TYPE_NORMAL
- en: Once the image has been scaled, we then create a new anchor element which will
    be appended to the container element and used as a close button. We set the link's
    inner text and the `href` attribute, and then assign a click handler to it. Within
    this handler we prevent the browser following the link and then cache the selector
    once more, which this time points to the anchor.
  prefs: []
  type: TYPE_NORMAL
- en: We then reduce the image to a quarter of its size, retuning it back to its original
    dimensions. Once this is done we remove the close link.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – using show/hide logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. How are supported arguments passed to an effect?
  prefs: []
  type: TYPE_NORMAL
- en: In string format as the second argument, for example, `show("blind", "vertical")`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As values in a configuration object passed directly to the `animate()` method,
    for example, `animate({ effect: "blind", configuration: { direction: "vertical"
    })`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As values in a configuration object passed as the second argument, for example,
    `show("blind", { direction: "vertical" })`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By setting the `effect.config` global property, for example, `$.effect.config
    = { direction: "vertical" })`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What else can be passed to the method?
  prefs: []
  type: TYPE_NORMAL
- en: An integer or string representing the duration, and a callback function or function
    reference
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Boolean that controls whether the animation should repeat indefinitely
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Boolean indicating whether further effects should be queued or executed in
    parallel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero – experimenting with the effect API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I would strongly recommend that you experiment with the effects that we have
    looked at in this section to see which ones work well with the `effect()` method
    and which ones work best with the show/hide logic, and so you can see exactly
    what happens when the ones that don't work so well are used. This should improve
    your ability to quickly decide exactly when and where each method is appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Easing functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Easing can be used with all of the jQuery UI effects with the exception of `explode`,
    although it can look a little strange in a few of the effects, such as `bounce`
    or `pulsate`. Easing can also be used if jQuery UI is present with standard jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Each fading method can have an easing type set by passing an argument into the
    animation method being used. The sliding animations are the same and can also
    accept an easing type as an argument. Let's take a moment to familiarize ourselves
    with what easing is exactly and how it can be used with jQuery animations.
  prefs: []
  type: TYPE_NORMAL
- en: Easing is a technique where the speed and/or the direction of animation are
    changed while the animation is running. Easing can make the animation start off
    slow and gradually speed up, start up fast and gradually slow down, and a whole
    host of other effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'jQuery has two modes of easing built in: `linear` and `swing`, with `swing`
    being the default for all types of animations. Sometimes, using the `linear` easing
    can help make a continuous animation run smoother, but the difference between
    `swing` and `linear` is subtle at best.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Animated demos of all of the easing types can be viewed by going to the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://api.jqueryui.com/easings](http://api.jqueryui.com/easings).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The easing types of jQuery UI add-ins are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `easeInQuad` | `easeOutQuad` | `easeInOutQuad` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInCubic` | `easeOutCubic` | `easeInOutCubic` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInQuart` | `easeOutQuart` | `easeInOutQuart` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInQuint` | `easeOutQuint` | `easeInOutQuint` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInExpo` | `easeOutExpo` | `easeInOutExpo` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInSine` | `easeOutSine` | `easeInOutSine` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInCirc` | `easeOutCirc` | `easeInOutCirc` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInElastic` | `easeOutElastic` | `easeInOutElastic` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInBack` | `easeOutBack` | `easeInOutBack` |'
  prefs: []
  type: TYPE_TB
- en: '| `easeInBounce` | `easeOutBounce` | `easeInOutBounce` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – adding easing to effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use easing, all we need to do is include the easing function name as a configuration
    option. For example, to add easing to the `blind.html` example that we looked
    at earlier, we could change the JavaScript so that it appeared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $("#window").click(function() {
  prefs: []
  type: TYPE_NORMAL
- en: '$("#blind").toggle("blind", { easing: "easeOutBounce" });'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the configuration option, `easing`, with the name of the easing function
    as a string supplied as the value of the option. Any of the easing functions can
    be used by referencing their name in this way.
  prefs: []
  type: TYPE_NORMAL
- en: Using an object literal to add easing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also change the format of the arguments we pass into the predefined animation
    methods in order to use easing. Prior to the easing argument being added to the
    animation methods (`fadeIn()`, `slideDown()`, and so on) in version 1.4.3 of jQuery,
    this was the defacto means of using easing with animation methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of providing string or numerical arguments (or a callback function),
    we can provide an object literal where each key refers to the duration, the easing
    type, and optionally a callback to call when the animation is complete. The usage
    then becomes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(elements).toggle("blind", {
  prefs: []
  type: TYPE_NORMAL
- en: 'duration: [duration],'
  prefs: []
  type: TYPE_NORMAL
- en: 'easing: [easing],'
  prefs: []
  type: TYPE_NORMAL
- en: 'complete: [callback]'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – using easing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try out some of the other easing methods on some of our earlier examples. We'll
    be using easing wherever appropriate throughout the remainder of the book, but
    other than a cursory explanation these won't be focused on in any great detail.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – using easing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. How many easing types are there in total?
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '32'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '17'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '48'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What can we pass into an `effect()` method in the alternative format for
    using easing?
  prefs: []
  type: TYPE_NORMAL
- en: An object with optional keys specifying the duration, easing type, and a function
    to call on complete
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A string specifying the easing type
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An array where the first item is the duration, the second is the easing type,
    and the third is a function to call on complete
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An integer specifying the duration of easing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Animating between different colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as the complete range of easing functions, the `effects` core file also
    gives us the ability to attractively and smoothly animate between different colors.
    Several CSS properties can be animated, including the `color`, `background-color`,
    `border-color`, and `outlinecolor`.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery UI extends jQuery's `animate()` method to achieve color animations, so
    the syntax to implement it is the same as using `animate()`. For any other purpose,
    we just need to target one of the above CSS properties and supply a valid color
    value (hexadecimal, RGB/RGBa, HSL, and so on). Let's look at a basic example.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – animating between colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we'll use color animations to show that a form field has been
    left empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a fresh copy of the template file, use the following elements in the `<body>`
    of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <input><button id="search">Search</button>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To invoke the color changes when the `<button>` is clicked, we can use the
    following JavaScript in the empty function near the bottom of the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#search").click(function (e) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var input = $(this).prev();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (input.val() == "") {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input.animate({
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'backgroundColor: "#f78080",'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'borderColor: "#a72b2e"}, 1200);'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '};'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save this page as `color-animations.html`. We literally only need a couple
    of styles for this example. We could probably get away with defining them in a
    `<style>` block in the `<head>` element of the page. We just use the following
    CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:200px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border:2px solid #27659f;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When we run the page, we see that the text field changes color if the `<button>`
    element is clicked on while it is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CSS, while extremely small, is required in this example because the `<input>`
    field will lose any attractive styling provided by modern browsers when the colors
    are animated. Setting the CSS properties we are animating helps prevent this ugly
    switch.
  prefs: []
  type: TYPE_NORMAL
- en: In the script we simply cache a selector that points to the `<input>` field,
    and then test whether the field is empty. If it is, we call the `animate()` method,
    specifying the aspects of the target element we'd like to animate.
  prefs: []
  type: TYPE_NORMAL
- en: Class transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As well as extending jQuery''s `animate()` method in order to provide color
    animations, jQuery UI also extends some of jQuery''s element manipulation methods.
    The following methods are extended to provide class transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addClass()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeClass()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toggleClass()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jQuery UI also exposes a new method for transitioning between two classes:
    the `switchClass()` method, which accepts the current class and new class, as
    well as duration, easing, and callback arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – transitioning between classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can rework our previous example so that it uses some of the class transition
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the class name `default` to the `<input>` element and then change the JavaScript
    so that it appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#search").click(function(e) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var input = $(this).prev();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (input.val() == "") {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input.switchClass("default", "error", 1200);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else if (input.val() && input.hasClass("error")) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input.removeClass("error", 1200);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the new page as `class-animation.html`. We''ll need to make some changes
    to the stylesheet as well. Create a new stylesheet and add the following rules
    to it (or change the styles in the `<head>` element of the page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input { width:200px; }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'input, .default { border:2px solid #27659f; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .error {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border:2px solid #a72b2e;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background-color:#f78080;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the new file as `class-animation.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the page in a browser and again, click the `<button>` element without entering
    anything into the text field. The `<input>` field should transition to the `error`
    class and appear the same as it did in the last example. This time, however, enter
    some text in the `<input>` field and click the `<button>` element again. The error
    should then transition back to default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This time, if the `<input>` field has no value, we just call the `switchClass()`
    method, specifying the current class of default, the new class of `error`, and
    a duration of `1.2` seconds. Note that you must supply both the current and new
    classes for the example to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next branch of the conditional, we check that the `<input>` field has
    both a value and a class name of `error`. If it does, we call the `removeClass()`
    method specifying just the class to remove and a duration. The duration is required
    in order to trigger the transition.
  prefs: []
  type: TYPE_NORMAL
- en: In the CSS we provide the default styling using the class name `default` as
    well as generally for all of the `<input>` fields. We need to do this because
    otherwise the element loses its styles while the `error` class is in the process
    of being removed, causing it to revert to a standard, unstyled `<input>` field.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Performance*: When using jQuery, it''s generally best that we change the class
    name of an element rather than manipulating an element''s `style` attribute directly.
    Because of this, it''s natural to assume that using `switchClass()` would be more
    efficient than using `animate()`.'
  prefs: []
  type: TYPE_NORMAL
- en: This, however, is not the case, as Firebug's profile tool will show. In the
    previous example, if the second branch of the conditional is removed and the page
    and both `color-animation.html` and `class-animation.html` are profiled, it is
    `color-animation.html` that wins by a margin of around 20 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – easing, color, and class animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. How are easing functions specified?
  prefs: []
  type: TYPE_NORMAL
- en: In string format as the third argument to the `effect()` method, for example,
    `effect("blind", {}, "easeOutBounce")`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As Boolean in a callback function, for example, `effect("blind", function()
    { easeOutBounce = true })`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Easing cannot be used
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In string format as the value of the easing configuration option, for example,
    `effect("blind", { easing: "easeOutBounce" })`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which method is extended to produce color animations?
  prefs: []
  type: TYPE_NORMAL
- en: The `effect()` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `show()` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `animate()` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `switchClass()` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we looked at the complete range of effects that are added by
    the jQuery UI library. We looked at how they can be used with the `effect()` method,
    or the `show()`, `hide()`, and `toggle()` methods when necessary. We saw the configuration
    arguments that each effect takes, and their default values when used out of the
    box.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered how jQuery UI extends the `animation()`, `addClass()`, and `removeClass()`
    methods, and the `switchClass()` method that it adds in order to add the ability
    to animate between colors and classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key points to take from this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery UI together with jQuery can be downloaded using the jQuery UI download
    builder, which builds a custom package, complete with a theme if required for
    you to download.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery UI adds a total of 14 new, predefined effects to our animation toolkit.
    The effects are easy to use, but highly configurable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `effect()` method is the basic means of specifying an effect, its configuration
    options, a duration, and a callback function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the effects work much better with the `show()`, `hide()`, or `toggle()`
    methods, and are equally as easy to use with this aspect of the API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easing functions are built directly into jQuery UI and can be used by specifying
    them as values for the `easing` configuration option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery UI also gives us the ability to transition an element's color or class
    name by extending some of jQuery's methods and adding the new `switchClass()`
    method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll switch back to jQuery and look at custom animations,
    including custom transitions, a custom-made slideshow, animating an element's
    dimensions, and how to create a jQuery animation plugin.
  prefs: []
  type: TYPE_NORMAL
