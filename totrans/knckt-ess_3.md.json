["```js\nko.bindingHandlers.yourBindingName = {\n  init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n    // This will be called when the binding is first applied to an element\n    // Set up any initial state, event handlers, etc. here\n  },\n  update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n    // This will be called once when the binding is first applied to an element,\n    // and again whenever any observables/computeds that are accessed change\n    // Update the DOM element based on the supplied values here.\n  }\n};\n```", "```js\n<script type=\"text/javascript\" src=\"img/koExternalTemplateEngine_all.min.js\"></script>\n<script type=\"text/javascript\" src=\"img/koBindings.js\"></script>\n```", "```js\nko.bindingHandlers.toggle = {\n  init: function (element, valueAccessor) {\n    var value = valueAccessor();\n    ko.applyBindingsToNode(element, {\n      click: function () {\n          value(!value());\n      }\n    });\n  }\n};\n```", "```js\n<button class=\"btn btn-primary btn-sm\" data-bind=\"click:showCartDetails, css:{disabled:cart().length  < 1}\">Show Cart Details\n</button>\n```", "```js\n<button class=\"btn btn-primary btn-sm\" data-bind=\"toggle:visibleCart, css:{disabled:cart().length  < 1}\">\n  <span data-bind=\"text: visibleCart()?'Hide':'Show'\">\n  </span> Cart Details\n</button>\n```", "```js\n<button type=\"button\" class=\"close pull-right\" data-bind=\"toggle:visibleCart\"><span>&times;</span></button>\n```", "```js\n    hideCartDetails();\n    ```", "```js\n    visibleCart(false);\n    ```", "```js\nko.bindingHandlers.currency = {\n  symbol: ko.observable('$'),\n  update: function(element, valueAccessor, allBindingsAccessor){\n    return ko.bindingHandlers.text.update(element,function(){\n      var value = +(ko.unwrap(valueAccessor()) || 0),\n        symbol = ko.unwrap(allBindingsAccessor().symbol !== undefined? allBindingsAccessor().symbol: ko.bindingHandlers.currency.symbol);\n      return symbol + value.toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, \"$1,\");\n    });\n  }\n};\n```", "```js\n<td data-bind=\"currency:price, symbol:'â‚¬'\"></td>\n```", "```js\nko.bindingHandlers.toJSON = {\n  update: function(element, valueAccessor){\n    return ko.bindingHandlers.text.update(element,function(){\n      return ko.toJSON(valueAccessor(), null, 2);\n    });\n  }\n};\n```", "```js\n<pre class=\"well well-lg\" data-bind=\"toJSON: $root\"></pre>\n```", "```js\nko.bindingHandlers.hidden = {\n  update: function (element, valueAccessor) {\n    var value = ! ko.unwrap(valueAccessor());\n    ko.bindingHandlers.visible.update(element, function () { \n      return value; \n    });\n  }\n};\n```", "```js\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/iCheck/skins/all.css\"><!-- set it just below bootstap -->\n<script type=\"text/javascript\" src=\"img/icheck.js\">\n</script><!-- set it just below jquery -->\n```", "```js\nko.bindingHandlers.icheck = {\n  init: function (element, valueAccessor, allBindingsAccessor) {\n    var checkedBinding = allBindingsAccessor().checked;\n    $(element).iCheck({\n      checkboxClass: 'icheckbox_minimal-blue',\n      increaseArea: '10%'\n    });\n    $(element).on('ifChanged', function (event) {\n      checkedBinding(event.target.checked);\n    });\n  },\n  update: function (element,valueAccessor, allBindings) {\n    var checkedBinding = allBindingsAccessor().checked;\n    var status = checked?'check':'uncheck';\n    $(element).iCheck(status);\n  }\n};\n```", "```js\n<input type=\"checkbox\" data-bind=\"icheck, checked:showSearchBar\"/> Show Search options\n```", "```js\n<div class=\"input-group\" data-bind=\"visible:showSearchBar\">\n  <span class=\"input-group-addon\">\n    <i class=\"glyphicon glyphicon-search\"></i> Search\n  </span>\n  <input type=\"text\" class=\"form-control\" data-bind=\"textInput:searchTerm\">\n</div>\n```", "```js\nvar showSearchBar = ko.observable(true);\n```", "```js\nko.components.register('component-name', {\n  viewModel: function(params) {\n    // Data: values you want to initilaize\n    this.chosenValue = params.value;\n    this.localVariable = ko.observable(true);\n    // Behaviors: functions\n    this.externalBehaviour = params.externalFunction;\n    this.behaviour = function () { ... }\n  },\n  template:\n    '<div>All html you want</div>'\n});\n```", "```js\nko.components.register('add-to-cart-button', {\n  viewModel: function(params) {\n    this.item = params.item;\n    this.cart = params.cart;\n\n    this.addToCart = function() {\n      var data = this.item;\n      var tmpCart = this.cart();\n      var n = tmpCart.length;\n      var item = null;\n\n      while(n--) {\n        if (tmpCart[n].product.id() === data.id()) {\n          item = tmpCart[n];\n        }\n      }\n\n      if (item) {\n        item.addUnit();\n      } else {\n        item = new CartProduct(data,1);\n        tmpCart.push(item);\n        item.product.decreaseStock(1);\n      }\n\n      this.cart(tmpCart);\n    };\n  },\n  template:\n    '<button class=\"btn btn-primary\" data-bind=\"click:addToCart\">\n       <i class=\"glyphicon glyphicon-plus-sign\"></i> Add\n    </button>'\n});\n```", "```js\n<tbody data-bind=\"{foreach:catalog}\">\n  <tr data-bind=\"style:{color:stock() < 5?'red':'black'}\">\n    <td data-bind=\"{text:name}\"></td>\n    <td data-bind=\"{currency:price, symbol:''}\"></td>\n    <td data-bind=\"{text:stock}\"></td>\n    <td>\n      <add-to-cart-button params= \"{cart: $parent.cart, item: $data}\">\n      </add-to-cart-button>\n    </td>\n  </tr>\n</tbody>\n```", "```js\nko.bindingHandlers.allowBindings = {\n  init: function(elem, valueAccessor) {\n    return { controlsDescendantBindings: true };\n  }\n};\n```", "```js\n<div data-bind=\"allowBindings: true\">\n  <!-- This will display 'New content' -->\n  <div data-bind=\"text: 'New content'\">Original content</div>\n</div>\n<div data-bind=\"allowBindings: false\">\n  <!-- This will display 'Original content' -->\n  <div data-bind=\"text: 'New content'\">Original content</div>\n</div>\n```", "```js\nko.bindingHandlers.withProperties = {\n  init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n    var myVM = { parentValues: valueAccessor, myVar: 'myValue'};\n    var innerBindingContext = bindingContext.extend(myVM);\n    ko.applyBindingsToDescendants(innerBindingContext, element);\n    return { controlsDescendantBindings: true };\n  }\n};\n```", "```js\nvar childBindingContext = bindingContext.createChildContext(\n  bindingContext.$rawData,\n  null, //alias of descendant item ($data magic variable)\n  function(context) {\n    //manage your context variables\n    ko.utils.extend(context, valueAccessor());\n  });\nko.applyBindingsToDescendants(childBindingContext, element);\nreturn { controlsDescendantBindings: true }; //Important to not bind twice\n```", "```js\n<div data-bind=\"withProperties: { displayMode: 'twoColumn' }\">\n  The outer display mode is <span data-bind=\"text: displayMode\"></span>.\n  <div data-bind=\"withProperties: { displayMode: 'doubleWidth' }\">\n    The inner display mode is <span data-bind=\"text: displayMode\"></span>, but I haven't forgotten that the outer display mode is <span data-bind=\"text: $parentContext.displayMode\"></span>.\n  </div>\n</div>\n```", "```js\nko.virtualElements.allowedBindings.myBinding = true;\nko.bindingHandlers.myBinding = {\n  init: function () { ... },\n  update: function () { ... }\n};\n```", "```js\n<!-- ko myBinding:param -->\n<div></div>\n<!-- /ko\n```", "```js\nko.bindingHandlers.yourBindingHandler.preprocess = function(value) {\n  ...\n};\n```", "```js\nko.bindingProvider.instance.preprocessNode = function(node) { \n  ...\n};\n```"]