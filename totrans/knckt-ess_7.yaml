- en: Chapter 7. Durandal – The KnockoutJS Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through six chapters, we have built a complete frontend application with the
    basic libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have used some libraries to achieve our objective:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bootstrap 3**: To have a solid, responsive, and cross-browser base style
    in CSS3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jQuery**: To manipulate the DOM and communicate with the server side through
    AJAX'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mockjax**: To fake AJAX communication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MockJSON**: To create fake data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KnockoutJS**: To bind data and synchronize JavaScript data and views easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have also applied some design patterns to improve the quality of our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The reveal pattern**: To show the public interface of our objects and hide
    the private properties and methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The module pattern**: To isolate our code and make it portable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The dependency injection pattern**: To improve cohesion and decrease coupling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we introduced a library that helps us to manage dependencies in our
    project, RequireJS.
  prefs: []
  type: TYPE_NORMAL
- en: In small projects you can work with just these libraries. When the project grows,
    however, handling dependencies becomes harder. The more libraries and styles you
    need, the more difficult it is to maintain all of them. Also, it becomes harder
    to maintain the view-model, which begins to have too many lines of code. Splitting
    the view-model results in writing more events to communicate them, and events
    make code harder to debug.
  prefs: []
  type: TYPE_NORMAL
- en: To solve all these problems, Rob Eisenberg ([http://eisenbergeffect.bluespire.com/](http://eisenbergeffect.bluespire.com/))
    and his team created **Durandal** ([http://durandaljs.com/](http://durandaljs.com/)).
    Durandal is a framework that joins all the libraries and good practices you will
    learn henceforth.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you are going to acquire knowledge of the basics to start working
    with the Durandal framework. You are not going to work on your cart project in
    this chapter. This will continue in the next chapter. This chapter is about understanding
    how Durandal works and how it connects all the pieces to create web applications
    fast and easily.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to mention that Durandal has been one of the simplest and fastest
    frameworks for building applications. When another good framework called AngularJS
    ([https://angularjs.org/](https://angularjs.org/)) announced its version 2.0,
    Eisenberg abandoned Durandal and became part of the AngularJS team. It was a big
    blow for the Durandal and KnockoutJS community. But recently, Eisenberg left the
    AngularJS 2.0 project and announced new versions of Durandal. So we can say that
    we are working with one of the best frameworks for developing modern, cross-browser,
    and fully-compatible web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Durandal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Durandal, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://durandaljs.com/downloads.html](http://durandaljs.com/downloads.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the latest version of the starter kit: [http://durandaljs.com/version/latest/HTML%20StarterKit.zip](http://durandaljs.com/version/latest/HTML%20StarterKit.zip).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip it in your project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `durandal-cart`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Mongoose server to the project or use the server you feel comfortable
    with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The starter kit will give you a very good starting point to understand how Durandal
    works. In the following projects we can start directly with the standalone Durandal
    library, but here we are going to analyze the parts of this framework carefully.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dig further into Durandal, download the `HTML Samples.zip` file ([http://durandaljs.com/version/latest/HTML%20Samples.zip](http://durandaljs.com/version/latest/HTML%20Samples.zip)),
    but it is up to you to test these interesting samples. The following are the contents
    of the starter kit:'
  prefs: []
  type: TYPE_NORMAL
- en: The starter kit contains three folders and an HTML `index` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `app` folder contains the application itself. This contains two folders:
    `viewmodels` and `views`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `viewmodels` folder has all the view-models the application needs—usually
    one view-model per page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `views` folder contains the HTML bound to each view-model—usually one view
    per view-model. However, you can compose views (you will see that this is the
    actual power of Durandal).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lib` folder contains the Durandal framework and all the libraries that
    the framework depends on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `durandal/js` folder you will find a folder called `plugins`. You
    can extend Durandal using plugins. You can also extend KnockoutJS using components
    and `bindingHandlers`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is another folder called `transitions`. Inside it you can add animations
    that can be fired when a transition between two pages is complete. By default,
    there is just one (`entrance.js`), but you can download more from the Internet
    or build your own ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `index.html` file will be the entry point to the JavaScript application.![Installing
    Durandal](img/7074OS_07_01.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Durandal's folder structure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Durandal patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before learning more about Durandal, let's learn about some patterns and concepts
    about the framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Durandal is a **Single Page Application** (**SPA**) framework. This means that:'
  prefs: []
  type: TYPE_NORMAL
- en: All web applications run on a single page (index page)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no full-page refreshing; just the parts that change are updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing is not a server responsibility any more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX is the basis of the communication with the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Durandal follows the Model-View-ViewModel (MVVM) pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, it is called the MV* pattern because we can substitute the * with
    anything we use: View-model (MVVM), Controller (MVC), or Presenter (MVP). By convention,
    Durandal uses view-models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MVVM pattern separates the view from the state (logic) of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view comprises the HTML files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view-models comprise JavaScript files bound to views.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Durandal is focused on views and view-models. Models are not part of the framework.
    We should decide how they are built.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The framework uses the **Asynchronous Module Definition** (**AMD**) pattern
    to manage dependencies. It possesses the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses RequireJS for this purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should define one module per file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the module will be the name of the file without the extension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The index.html file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `index.html` file is the entry point to the app. It should have a container
    with the ID, `applicationHost`. The application will run inside this container,
    and views will be interchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can define a `splash` element using the `splash` class. It shows when the
    application has completely loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, set the entry point of the Durandal application with RequireJS, as
    we set in the previous chapter. Set the `main.js` file as the entry point to the
    JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The main.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `main.js` file contains the RequireJS configuration. Here we can see which
    libraries use Durandal to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`: This is a RequireJS extension to load files that are not JavaScript
    files. Durandal uses `text` to load templates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`durandal`: This is the core of the framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugins`: In this folder, we can find parts of the framework that are not
    required in all applications. These pieces of code can be loaded according to
    project needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitions`: This contains the different animations we can play between page
    transitions. By default, we have just the entry animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`knockout`: This is the library used to bind views and view-models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap`: This is the design library related to the `bootstrap.css` library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jQuery`: This is the DOM manipulation library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You already have experience with RequireJS, since you converted files from
    your application to follow the AMD specification. This is how the `main.js` file
    containing the RequireJS configuration should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then define the `main` module. Define dependencies in the same way you used
    RequireJS in your cart project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This module is where the application is configured. In the starter kit project,
    there is a default configuration that helps you understand what you can do at
    this point:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the debug (or not):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the application title. The application title will be concatenated with the
    page title by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activate and configure plugins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you start the application, you can choose to follow Durandal's conventions.
    If you choose to follow them by default, Durandal will relate view-models with
    views by looking for views in the `views` folder. They should have the same name
    the view-model has. This means that if you have a view-model called `viewmodel/catalog.js`,
    its associated view will be called `views/catalog.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '![The main.js file](img/7074OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the file structure created by following Durandal conventions and is
    good for small and medium projects
  prefs: []
  type: TYPE_NORMAL
- en: This convention is good for small and medium projects. In big projects, it is
    recommended not to use Durandal conventions. If we choose not to use these conventions,
    Durandal will look for the view in the same folder that the view-model is in.
    For example, if the view-model is called `catalog/table.js`, the view should be
    named `catalog/table.html`. This allows us to group views and view-models by feature.
  prefs: []
  type: TYPE_NORMAL
- en: '![The main.js file](img/7074OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By not using Durandal conventions, we group our files by feature, which is good
    for big and scalable projects
  prefs: []
  type: TYPE_NORMAL
- en: Finally, indicate to the framework which view-model will start the application.
    By default, the shell view-model does this.
  prefs: []
  type: TYPE_NORMAL
- en: The shell view-model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Shell** is the entry point module. It is the module that wraps the other
    modules. It is loaded just once and has the DOM elements that persist all the
    time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a view-model, define a simple JavaScript object using the AMD pattern,
    as done in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define dependencies, that is, the router and the Durandal app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Expose the `router` method. The `router` method will give us an object that
    allows us to show the navigation bar easily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Expose the `search` method. This is an optional method. It's part of the starter
    kit application. It manages the global search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Expose the `activate` method. This is an important method in Durandal view-models.
    The `activate` method is fired when the view-model is ready. Here, you can request
    data to bind it to the view. We will see more about Durandal life-cycle methods
    soon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The shell view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **shell view** contains the navigation bar: the search bar and an element
    with an attached class called `page-host`. This element will be bound to the router,
    as in the following code. You can configure an animation to make the transition
    between pages cooler.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Durandal life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is important we understand clearly how a Durandal application works. This
    is a schema of how your application starts:'
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` page uses RequireJS to request the `main.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `main.js` file configures require and defines the main module, which is
    responsible for the application configuration, and launches the shell module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The shell module handles the global context of the application. It manages components
    that will be persistent along the different life cycles. In the starter kit application,
    it manages the search bar. But it can also manage the log in and log out functionality,
    for example. The shell module is what configures all routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the router configures the navigation along all the pages the application
    has.![Durandal life cycle](img/7074OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Durandal initialization life cycle
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The activation life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **activation** **life cycle** controls the activation and the deactivation
    of the page. Durandal allows us to use predefined methods to access different
    parts of the cycle. Let''s take a look at the Durandal methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`canDeactivate`: This should return true, false, or as a redirect object. It
    is fired when you try to abandon a page. If the result of the method is true,
    you will be able to leave the page. If it is false, the routing process will be
    interrupted. If you return a redirect object, you will be redirected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canActivate`: When you arrive at a new page, you can evaluate if you are able
    to see this page. For example, you can check if you are logged in to your if you
    have enough admin rights to see the page. If you return `canActivate` true, you
    will be able to see the page. If it returns false, the routing process will be
    interrupted. You can also redirect the user to another page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deactivate`: If `canDeactivate` returns true and you can activate the next
    view, the `deactivate` method is fired. Here is a good place to clear timeouts
    and events, if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activate`: If `canActivate` returns true and you can deactivate the last view,
    the `activate` method is fired. Here is the place where you should load all your
    data, bind your elements, and initialize events.![The activation life cycle](img/7074OS_07_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activation life cycle
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are other methods we can use in our life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getView`: With this you can build an observable to define the path of the
    view that the view-model has bound.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`viewUrl`: This returns a string that represents the path of the view attached
    to the view-model. The difference between `viewUrl` and `getView` is that the
    former is a string and the latter is an observable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binding`: This is called before the binding between view and view-model begins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bindingComplete`: This is called immediately after the binding is completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attached`: This is called when the composition engine attaches the view to
    the DOM. You can use this hook to manipulate elements using jQuery selectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compositionComplete`: This is the last hook fired by the composition engine.
    Here you can measure DOM elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`detached`: This hook is fired when the view is detached from the DOM. We can
    perform clean up work here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more about the composition life cycle at [http://durandaljs.com/documentation/Interacting-with-the-DOM.html](http://durandaljs.com/documentation/Interacting-with-the-DOM.html).
  prefs: []
  type: TYPE_NORMAL
- en: The promise pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Durandal uses promises to manage asynchronous behaviors. A clear example is
    the `app.start()` method which is in the `main.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: A promise is an object that contains a value that can be used in the future,
    when the prerequisites to obtain this value are accomplished. In this case, the
    `then` method will not be fired until the result `app.start()` method is obtained.
  prefs: []
  type: TYPE_NORMAL
- en: 'Internally, Durandal uses jQuery''s promise implementation in order to minimize
    third-party dependencies. However, other libraries you use may require Q, or you
    may need more advanced asynchronous programming capabilities than jQuery can provide.
    In these cases, you will want to plug Q''s promise mechanism into Durandal so
    that you can have a single consistent promise implementation throughout. To integrate
    the Q library, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `Q` library to the RequireJS config.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this code in the `main.js` file, just before the `app.start()` instruction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are using the HTTP Durandal plugin, this approach will not be enough
    if you want to use Q promises. You need to wrap the jQuery promise into a Q promise,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about the Q library at [http://durandaljs.com/documentation/Q.html](http://durandaljs.com/documentation/Q.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the basic interface of jQuery promises that we have available in Durandal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`done(successFn)`: This will be fired if the promise is resolved successfully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fail(failFn)`: This will be fired if the promise is rejected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`always()`: This will be fired in both cases, success and failure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`then(succesFn,failFn)`: This is an alias to join `done` and `fail` methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`when(valueOrFunction)`: This will create a promise with the value or function
    passed as a parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To know more about jQuery promises refer to the official documentation at [http://api.jquery.com/promise/](http://api.jquery.com/promise/).
  prefs: []
  type: TYPE_NORMAL
- en: Compositions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Composition** is the most powerful part of Durandal. While modules help to
    split the application into small parts, compositions allows us to join them all
    again. There are two types of composition, object composition and visual composition.'
  prefs: []
  type: TYPE_NORMAL
- en: To apply visual composition, you need to use the compose binding. You can combine
    KnockoutJS observables with the compose binding to achieve dynamic compositions.
    Compose binding gives you a complete configuration interface to enhance the flexibility
    and reusability of your components.
  prefs: []
  type: TYPE_NORMAL
- en: Object composition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can achieve **object composition** by using just RequireJS and the AMD
    pattern. The simplest case is that you have two modules: A and B. The B module
    requires the functionality of A, so you request module A in module B using RequireJS,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Visual composition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Visual composition** allows you to break down your view into small pieces
    and reconnect (or compose) them, making them reusable. This is a central and unique
    function in Durandal and is managed by the Composition module. The most common
    manner of composing views is using the compose binding handler.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how the shell view is composed:'
  prefs: []
  type: TYPE_NORMAL
- en: RequireJS is used to find the shell module. By convention, it knows that it
    is in the `shell.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The view locator locates the appropriate view for shell: `shell.html`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The view engine creates a view from the markup in `shell.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The shell module and the shell view are data-bound together using KnockoutJS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bound shell view is inserted into the `applicationHost` div.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The "entrance" transition is used to animate the view.![Visual composition](img/7074OS_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Composition life cycle
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now take a look how you can do some visual composition. You can move the navigation
    to its own view and compose the shell using the navigation view, by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `shell.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cut the `<nav></nav>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste it in a new file called `navigation.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `<div>` in the `shell.html` file and bind the compose element, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also create a view-model called `navigation.js` linked to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You also have the option to convert the `compose` variable into an observable
    that will be generated in the view-model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a brief run-down about how the compose binding works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If it''s a string value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it has a view extension, locate the view and inject it into the DOM, binding
    against the current context.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is a module ID, locate the module, locate its view, and bind and inject
    them into the DOM.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's an object, locate its view and bind and inject them into the DOM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's a function, call the function with the new modifier, get its return
    value, find the view for the return value, and bind and inject them into the DOM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to customize the composition, you can pass the view and the model
    data directly to the composer binding, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This allows you to combine different views with the same data, setting model
    or view as observables.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also compose views with Knockout comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can increase the setting values of the compose binding:'
  prefs: []
  type: TYPE_NORMAL
- en: '`transition`: You can indicate a transition when the composition changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cacheviews`: This will not remove views from the DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activate`: This defines the activate function for this composition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`perserveContext`: If you set this to `false` you will detach the parent context.
    This is useful when there is no model associated with the view. It improves performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activationData`: This refers to the data attached to the `activate` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mode`: This could be `inline` or `templated`. Inline is the mode by default.
    The `templated` mode is used with the `data-part` attribute and is often used
    with widgets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onError`: You can bind an error handler function to fail gracefully when a
    composition fails as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can find a complete explanation of composition in the Durandal documentation
    at [http://durandaljs.com/documentation/Using-Composition.html](http://durandaljs.com/documentation/Using-Composition.html).
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Durandal provides a router plugin to make navigation quick and easy. The router
    works in cooperation with the history plugin to handle the navigation state in
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the router plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the plugin in the `main.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure it in the `shell.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Following is an example of how the router of our shopping cart application
    could be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the `shell.js` file. The router is passed as an element of the
    view-model. This allows you to update your navigation based on what the current
    route is. Durandal provides a friendly interface to build a navigation menu from
    a `router` object. Map routes in the shell activate hook and then, using the router
    fluent API, build the navigation model.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, return the `router.activate()` method which contains a promise from
    the shell activate hook. Returning a promise means that the composition engine
    will wait until the router is ready before displaying the shell.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at route mapping in more detail. A route has different patterns.
    Minimally, you should provide a route and a `moduleId` value. When the URL hash
    changes, the router will detect that and use the route pattern to find the correct
    route. Then it will load the module with the `moduleId` value. The router will
    activate and compose the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some optional parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nav`: When you call the `buildNavigationModel` method, it will create an observable
    array called `navigationModel` only with the routes that have this property set
    to `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This is used to set the document title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hash`: With this, you can provide a custom hash to use for data-binding to
    an anchor tag. The router will generate a hash if none is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are four different types of routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default route** is set as an empty string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Static routes** have no parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Parametrized routes** are routes with parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A parameter is defined with a colon:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Optional parameters are wrapped between parentheses:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Splat routes** are used to build child routes. We can define them using an
    asterisk:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Unknown routes** are managed by the method: `mapUnknownRoutes(module,view)`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you look in the `navigation.html` file you will be able to see how the router
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the `foreach` binding against the `navigationModel` property router
    is built with the `buildNavigationModel` method. Each element of this array has
    an `isActive` flag, which is set to `true` when the route is active. Finally,
    there is a property called `isNavigating` that allows you to alert the user that
    navigation between pages is happening as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If you go back to the `shell.html` page, you will see that you attach a router
    binding to the `page-host` element. This binding displays the active route inside
    `page-host` container. This is just another demonstration of the power of Durandal
    composition.
  prefs: []
  type: TYPE_NORMAL
- en: Route parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Route parameters are set in the route using a colon. These parameters can be
    passed to the `canActivate` and `activate` methods of each module. If the route
    has a query string, it is passed as the last argument.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some ways to trigger navigation that have been enlisted here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use an anchor tag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `router.navigate(hash)` method. This will trigger navigation to the
    associated module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to add a new history entry but not invoke the module, just set
    the second parameter to `false`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you just want to replace the history entry, pass a JSON object with the
    `replace` value `true` and `trigger` value `false`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Child routers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In big applications, you must be able to handle maybe tens or hundreds of routes.
    Your application can just have one main router, but there is the possibility of
    it having multiple child routers. This provides Durandal a way to handle deep-linking
    scenarios and encapsulate routes by feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, the parent will map a route with a splat (*). The child router will
    work relative to that route. Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Require the application router.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the `createChildRouter()`. This will create a new router.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `makeRelative` API. Configure the base `moduleId` and the `fromParent`
    property. This property makes the routes relative to the parent's routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: First, it catches the `product/:id*`action pattern. This will cause navigation
    to `product.js`. The application router will detect the presence of the child
    router and it delegate control to the child.
  prefs: []
  type: TYPE_NORMAL
- en: When a child router works with parameters, activate the `dynamicHash` property
    inside the `makeRelative` method.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Events** are used to communicate between modules. The event API is integrated
    into the `app` module and is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '**on**: To subscribe the view-model to an event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**off**: To unsubscribe the view-model from an event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**trigger**: To trigger an event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can pass all event names to listen to all type of events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Read more about events at [http://durandaljs.com/documentation/Leveraging-Publish-Subscribe.html](http://durandaljs.com/documentation/Leveraging-Publish-Subscribe.html).
  prefs: []
  type: TYPE_NORMAL
- en: Widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Widgets** are another important part in the composition of Durandal. They
    are like view-models, with one exception. View-models can be singletons, and we
    usually prefer that they be singletons because they represent a unique page on
    the site. On the other hand, widgets are mainly coded with a constructor, so they
    can be instantiated as many times as we need. Therefore, when we build a widget
    we don''t return an object as it occurs in view-models. Instead, we return a constructor
    and Durandal instantiates the widget.'
  prefs: []
  type: TYPE_NORMAL
- en: Save widgets in `app/widgets/{widget_name}`. The widget should have a `viewmodel.js`
    file and a `view.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to develop a widget called `accordion` to demonstrate how widgets
    work. This widget will be based in the jQuery collapse plugin that comes with
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create a plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `bootstrap` library to the project. To achieve this, add it to the
    dependencies of the main module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the plugin. Register the widget plugin in the `main.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a directory called widget inside the `app` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a subdirectory named `accordion`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a file named `viewmodel.js` inside the `accordion` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a file named `view.html` inside the `accordion` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't like Durandal's conventions, you can read more about widget configuration
    at [http://durandaljs.com/documentation/api#module/widget](http://durandaljs.com/documentation/api#module/widget).
  prefs: []
  type: TYPE_NORMAL
- en: Writing the widget view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write the view, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `app/widgets/expander/view.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write this code following the bootstrap3 collapse template ([http://getbootstrap.com/javascript/#collapse](http://getbootstrap.com/javascript/#collapse)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By writing the view first you can identify which variables you need to create
    in the view-model to complete the view. In this case, you will need an array of
    items that stores accordion elements. It will contain an ID for each collapsible
    element that will auto-generate inside the widget, the header text and the body.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the widget view-model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write the widget view-model, open the `viewmode.js` file in the `accordion`
    widget folder and write this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you return a constructor for the widget, not a view-model itself
    as you do with pages.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, to manage the life cycle you just need to define the `activate`
    method to assign values and generate IDs. Remember that if you want to add some
    DOM modification with code, the attached method would be a good place to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the widget
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To register the widget, you just need to register it in the main module (`main.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Building a page with Durandal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have learned all the basics of the Durandal framework, let's create
    a new page that will contain our widget and some basic data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a new page in Durandal, always follow the same steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the route in the shell view-model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the `views/accordion.html` file. Notice that inside the accordion binding
    you can define the `data-part` templates. Here, you are using the power of composition
    that Durandal gives you. By adding an `add` button, you are giving the widget
    the possibility of adding new elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the `viewmodels/accordion.js` file. You have set `projects` as an observable
    array and initialized it in the `activate` method. The view-model is provided
    with an `add` function that triggers an event called `accordion:add`. This sends
    a message with the new tab values. The widget should listen to this event and
    create an action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the event in the `widgets/accordion/viewmodel.js` file, updating the
    `activate` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the detached life cycle method to turn off `add event` once the widget
    is not on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Launch the application and test the widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to Durandal. Using a framework that has
    all the pieces perfectly connected, instead of a bunch of libraries, helps you
    to avoid rewriting the same code again and again. It means that thanks to Durandal,
    you can follow one of the basic principles of developers (Don't Repeat Yourself
    – DRY) easily.
  prefs: []
  type: TYPE_NORMAL
- en: You learned useful concepts, such as how to install and bring up a Durandal
    project. You also learned about how the life cycle of a Durandal application works.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most powerful features of Durandal is the composition. You can compose
    interfaces very easy and it is almost transparent for the developer.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how Durandal manages promises. By default, it uses jQuery promises
    but you saw that it is very easy to use other libraries like Q.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you developed a widget and integrated it into a view-model. While view-models
    are singletons, widgets are elements that you can instantiate several times. They
    are a powerful part of the Durandal composition.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will migrate step by step from our KnockoutJS cart into
    a Durandal Single Page Application.
  prefs: []
  type: TYPE_NORMAL
