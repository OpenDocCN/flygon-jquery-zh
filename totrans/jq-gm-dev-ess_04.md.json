["```js\n// detach box\nvar box = $(\"#box\").detach();\n\nvar aSubElement = box.find(\"#aSubElement\")\n// and so on\n\n// attach it back\nbox.appendTo(boxParent);\n```", "```js\n// current API\nvar xCoordinate = gf.x(\"mySprite\");\n\n// proposed API\nvar xCoordinate = gf.x($(\"#mySprite\"));\n```", "```js\ngf.x = function(divId,position) {\n    if(position) {\n        $(\"#\"+divId).css(\"left\", position);\n        $(\"#\"+divId).data(\"gf\").x = position;\n    } else {\n        return $(\"#\"+divId).data(\"gf\").x; \n    }\n}\n```", "```js\ngf.x = function(div,position) {\n    if(position) {\n        div.css(\"left\", position);\n        div.data(\"gf\").x = position;\n    } else {\n        return div.data(\"gf\").x; \n    }\n}\n```", "```js\nvar enemies   = gf.addGroup(container,\"enemies\");\nvar enemy1    = gf.addSprite(group,\"enemy1\",{...});\nvar enemy2    = gf.addSprite(group,\"enemy2\",{...});\n\nvar player    = gf.addSprite(group,\"player\",{...});\n\nvar level     = gf.addGroup(container,\"level\");\nvar ground    = gf.addSprite(group,\"ground\",{...});\nvar obstacle1 = gf.addSprite(group,\"obstacle1\",{...});\nvar obstacle2 = gf.addSprite(group,\"obstacle2\",{...});\n```", "```js\ngf.groupFragment = $(\"<div style='position: absolute; overflow: visible;'></div>\");\ngf.addGroup = function(parent, divId, options){\n    var options = $.extend({\n        x: 0,\n        y: 0,\n    }, options);\n    var group = gf.groupFragment.clone().css({\n            left:   options.x,\n            top:    options.y}).attr(\"id\",divId).data(\"gf\",options);\n    parent.append(group);\n    return group;\n}\n```", "```js\ngf.spriteFragment = $(\"<div class='gf_sprite' style='position: absolute; overflow: hidden;'></div>\");\ngf.groupFragment = $(\"<div class='gf_group' style='position: absolute; overflow: visible;'></div>\");\n```", "```js\n$(\"#someElement\").children(\".gf_sprite\");\n\n```", "```js\ntransform: rotate(angle)\n```", "```js\ntransform: rotate(-10deg);\n```", "```js\ntransform: rotate(-10deg) scale(2,-2);\n```", "```js\ngf.transform (myDiv, {rotate: -10, scale: 2, flipV: true});\n```", "```js\ngf.transform (myDiv, {rotate: -10});\n// do some other things\ngf.transform (myDiv, {scale: 2, flipV: true});\n```", "```js\ngf.addSprite = function(parent, divId, options){\n    var options = $.extend({\n        x: 0,\n        y: 0,\n        width: 64,\n        height: 64,\n        flipH: false,\n      flipV: false,\n      rotate: 0,\n      scale: 1\n    }, options);\n//...\n```", "```js\ngf.transform = function(div, options){\n   var gf = div.data(\"gf\");\n   if(options.flipH !== undefined){\n      gf.flipH = options.flipH;\n   }\n   if(options.flipV !== undefined){\n      gf.flipV = options.flipV;\n   }\n   if(options.rotate !== undefined){\n      gf.rotate = options.rotate;\n   }\n   if(options.scale !== undefined){\n      gf.scale = options.scale;\n   }\n   var factorH = gf.flipH ? -1 : 1;\n   var factorV = gf.flipV ? -1 : 1;\n   div.css(\"transform\", \"rotate(\"+gf.rotate+\"deg) scale(\"+(gf.scale*factorH)+\",\"+(gf.scale*factorV)+\")\");\n}\n```", "```js\ngf.tilemapFragment = $(\"<div class='gf_tilemap' style='position: absolute'></div>\");\ngf.addTilemap = function(parent, divId, options){\n    var options = $.extend({\n        x: 0,\n        y: 0,\n        tileWidth: 64,\n        tileHeight: 64,\n        width: 0,\n        height: 0,\n        map: [],\n        animations: []\n    }, options);\n\n    //create line and row fragment:\n    var tilemap = gf.tilemapFragment.clone().attr(\"id\",divId).data(\"gf\",options);\n    for (var i=0; i < options.height; i++){\n        for(var j=0; j < options.width; j++) {\n            var animationIndex = options.map[i][j];\n\n            if(animationIndex > 0){\n                var tileOptions = {\n                    x: options.x + j*options.tileWidth,\n                    y: options.y + i*options.tileHeight,\n                    width: options.tileWidth,\n                    height: options.tileHeight\n                }\n                var tile = gf.spriteFragment.clone().css({\n                    left:   tileOptions.x,\n                    top:    tileOptions.y,\n                    width:  tileOptions.width,\n                    height: tileOptions.height}\n                ).addClass(\"gf_line_\"+i).addClass(\"gf_column_\"+j).data(\"gf\", tileOptions);\n\n                gf.setAnimation(tile, options.animations[animationIndex-1]);\n\n                tilemap.append(tile);\n            }\n        }\n    }\n    parent.append(tilemap);\n    return tilemap;\n}\n```", "```js\ngf.intersect = function(a1,a2,b1,b2){\n    var i1 = Math.min(Math.max(b1, a1), b2);\n    var i2 = Math.max(Math.min(b2, a2), b1);\n    return [i1, i2];\n}\n```", "```js\ngf.tilemapBox = function(tilemapOptions, boxOptions){\n    var tmX  = tilemapOptions.x;\n    var tmXW = tilemapOptions.x + tilemapOptions.width * tilemapOptions.tileWidth;\n    var tmY  = tilemapOptions.y;\n    var tmYH = tilemapOptions.y + tilemapOptions.height * tilemapOptions.tileHeight;\n\n    var bX  = boxOptions.x;\n    var bXW = boxOptions.x + boxOptions.width;\n    var bY  = boxOptions.y;\n    var bYH = boxOptions.y + boxOptions.height;\n\n    var x = gf.intersect(tmX,tmXW, bX, bXW);\n    var y = gf.intersect(tmY, tmYH, bY, bYH);\n\n    return {\n        x1: Math.floor((x[0] - tilemapOptions.x) / tilemapOptions.tileWidth),\n        y1: Math.floor((y[0] - tilemapOptions.y) / tilemapOptions.tileHeight),\n        x2: Math.ceil((x[1] - tilemapOptions.x) / tilemapOptions.tileWidth),\n        y2: Math.ceil((y[1] - tilemapOptions.y) / tilemapOptions.tileHeight)\n    }\n}\n```", "```js\ngf.tilemapCollide = function(tilemap, box){\n    var options = tilemap.data(\"gf\");\n    var collisionBox = gf.tilemapBox(options, box);\n    var divs = []\n\n    for (var i = collisionBox.y1; i < collisionBox.y2; i++){\n        for (var j = collisionBox.x1; j < collisionBox.x2; j++){\n            var index = options.map[i][j];\n            if( index > 0){\n                divs.push(tilemap.find(\".gf_line_\"+i+\".gf_column_\"+j));\n            }\n        }\n    }\n    return divs;\n}\n```", "```js\ngf.spriteCollide = function(sprite1, sprite2){\n   var option1 = sprite1.data(\"gf\");\n   var option2 = sprite2.data(\"gf\");\n\n   var x = gf.intersect(\n      option1.x,\n      option1.x + option1.width,\n      option2.x,\n      option2.x + option2.width);\n   var y = gf.intersect(\n      option1.y,\n      option1.y + option1.height,\n      option2.y,\n      option2.y + option2.height);\n\n   if (x[0] == x[1] || y[0] == y[1]){\n      return false;\n   } else {\n      return true;\n   }\n}\n```", "```js\nvar playerAnim = {\n    stand: new gf.animation({\n        url: \"player.png\",\n        offset: 75\n    }),\n    walk:  new gf.animation({\n        url:    \"player.png\",\n        offset: 150,\n        width:  75, \n        numberOfFrames: 10,\n        rate: 90\n    }),\n    jump:  new gf.animation({\n        url: \"player.png\",\n        offset: 900\n    })\n};\n\nvar slimeAnim = {\n   stand: new gf.animation({\n        url: \"slime.png\"\n    }),\n    walk: new gf.animation({\n        url: \"slime.png\",\n        width:  43, \n        numberOfFrames: 2,\n        rate: 90\n    }),\n    dead: new gf.animation({\n        url: \"slime.png\",\n        offset: 86\n    })\n};\n\nvar flyAnim = {\n   stand: new gf.animation({\n        url: \"fly.png\"\n    }),\n   ...\n}\nvar tiles = [\n    new gf.animation({\n        url: \"tiles.png\"\n    }),\n    new gf.animation({\n        url: \"tiles.png\",\n        offset: 70\n    }),\n    ...\n];\n```", "```js\nvar player = new (function(){\n        var acceleration = 9;\n        var speed = 20;\n        var status = \"stand\";\n        var horizontalMove = 0;\n\n        this.update = function (delta) {\n            //...\n        };\n\n        this.left = function (){\n            //...\n        };\n\n        this.right = function (){\n            //...\n        };\n\n        this.jump  = function (){\n            //...\n        };\n\n        this.idle  = function (){\n            //...\n        };\n});\n```", "```js\nvar delta = 30;\nspeed = Math.min(100,Math.max(-100,speed + acceleration * delta / 100.0)); \nvar newY = gf.y(this.div) + speed * delta / 100.0;\nvar newX = gf.x(this.div) + horizontalMove;\nvar newW = gf.width(this.div);\nvar newH = gf.height(this.div);\n```", "```js\nvar collisions = gf.tilemapCollide(tilemap, {x: newX, y: newY, width: newW, height: newH});\nvar i = 0;\nwhile (i < collisions.length > 0) {\n    var collision = collisions[i];\n    i++;\n    var collisionBox = {\n        x1: gf.x(collision),\n        y1: gf.y(collision),\n        x2: gf.x(collision) + gf.width(collision),\n        y2: gf.y(collision) + gf.height(collision)\n    };\n\n    var x = gf.intersect(newX, newX + newW, collisionBox.x1,collisionBox.x2);\n    var y = gf.intersect(newY, newY + newH, collisionBox.y1,collisionBox.y2);\n\n    var diffx = (x[0] === newX)? x[0]-x[1] : x[1]-x[0];\n    var diffy = (y[0] === newY)? y[0]-y[1] : y[1]-y[0];\n    if (Math.abs(diffx) > Math.abs(diffy)){\n        // displace along the y axis\n         newY -= diffy;\n         speed = 0;\n         if(status==\"jump\" && diffy > 0){\n             status=\"stand\";\n             gf.setAnimation(this.div, playerAnim.stand);\n         }\n    } else {\n        // displace along the x axis\n        newX -= diffx;\n    }\n    //collisions = gf.tilemapCollide(tilemap, {x: newX, y: newY, width: newW, height: newH});\n}\ngf.x(this.div, newX);\ngf.y(this.div, newY);\nhorizontalMove = 0;\n```", "```js\nthis.left = function (){\n            switch (status) {\n                case \"stand\":\n                    gf.setAnimation(this.div, playerAnim.walk, true);\n                    status = \"walk\";\n                    horizontalMove -= 7;\n                    break;\n                case \"jump\":\n                    horizontalMove -= 5;\n                    break;\n                case \"walk\":\n                    horizontalMove -= 7;\n                    break;\n            }\n            gf.transform(this.div, {flipH: true});\n};\n```", "```js\nthis.jump  = function (){\n    switch (status) {\n        case \"stand\":\n        case \"walk\":\n            status = \"jump\";\n            speed = -60;\n            gf.setAnimation(this.div, playerAnim.jump);\n            break;\n    }\n};\n\nthis.idle  = function (){\n    switch (status) {\n        case \"walk\":\n            status = \"stand\";\n            gf.setAnimation(this.div, playerAnim.stand);\n            break;\n    }\n};\n```", "```js\nvar gameLoop = function() {\n\n    var idle = true;\n    if(gf.keyboard[37]){ //left arrow\n        player.left();\n        idle = false;\n    }\n    if(gf.keyboard[38]){ //up arrow\n        player.jump();\n        idle = false;\n    }\n    if(gf.keyboard[39]){ //right arrow\n        player.right();\n        idle = false;\n    }\n    if(idle){\n        player.idle();\n    }\n\n    player.update();\n    var margin = 200;\n    var playerPos = gf.x(player.div);\n    if(playerPos > 200) {\n        gf.x(group, 200 - playerPos);\n    }\n}\n```", "```js\nvar margin = 200;\nvar playerPos = gf.x(player.div);\nif(playerPos > 200) {\n    gf.x(group, 200 - playerPos);\n    $(\"#backgroundFront\").css(\"background-position\",\"\"+(200 * 0.66 - playerPos * 0.66)+\"px 0px\");\n    $(\"#backgroundBack\").css(\"background-position\",\"\"+(200 * 0.33 - playerPos * 0.33)+\"px 0px\");\n}\n```", "```js\nvar Slime = function() {\n\n   this.init = function(div, x1, x2, anim) {\n      this.div = div;\n      this.x1 = x1;\n      this.x2 = x2;\n      this.anim = anim;\n      this.direction = 1;\n      this.speed     = 5;\n      this.dead      = false;\n\n      gf.transform(div, {flipH: true});\n      gf.setAnimation(div, anim.walk);\n   };\n\n   this.update = function(){\n      if(this.dead){\n         this.dies();\n      } else {\n         var position = gf.x(this.div);\n         if (position < this.x1){\n            this.direction = 1;\n            gf.transform(this.div, {flipH: true});\n         }\n         if (position > this.x2){\n            this.direction = -1;\n            gf.transform(this.div, {flipH: false});\n         }\n         gf.x(this.div, gf.x(this.div) + this.direction * this.speed);\n      }\n   }\n   this.kill = function(){\n      this.dead = true;\n      gf.setAnimation(this.div, this.anim.dead);\n   }\n   this.dies = function(){}\n};\n```", "```js\nvar Fly = function() {}\nFly.prototype = new Slime();\nFly.prototype.dies = function(){\n   gf.y(this.div, gf.y(this.div) + 5);\n}\n```", "```js\nplayer.update();\nfor (var i = 0; i < enemies.length; i++){\n   enemies[i].update();\n   if (gf.spriteCollide(player.div, enemies[i].div)){\n      enemies[i].kill();\n   }\n}\n```"]