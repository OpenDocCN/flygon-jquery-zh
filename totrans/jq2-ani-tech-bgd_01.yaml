- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Welcome to the jQuery 2.0 Animation Techniques Beginner''s Guide. Over the
    course of the book we''ll look at each and every method that produces or controls
    animations available in the jQuery JavaScript library. We''ll see how the methods
    are used, the arguments they are able to accept, and the different behavior they
    produce. We''ll also look at how to use a range of accompanying resources, including
    selected jQuery plugins and the jQuery UI library.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this introductory chapter, we''ll look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of animation on the Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why animating your UIs is important
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation methods provided by jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template file used by each of the examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic animation example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation on the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 1989, CompuServe released GIF89a, an enhanced version of the popular GIF
    image format, which allowed a sequence of frames to be stored as a single image
    and played by supporting software.
  prefs: []
  type: TYPE_NORMAL
- en: The GIF format was already popular on what passed for the Internet in those
    days (remember, the World Wide Web didn't even exist until 1991) due to its small
    file size, lossless compression, and wide support. The enhanced version which
    allowed animations that anyone could create themselves, provided they had supporting
    software, quickly became popular.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to animated GIFs, browser vendors added support for proprietary
    HTML elements that handled animation natively, such as the `<blink>` and `<marquee>`
    elements, which added different animated effects to text.
  prefs: []
  type: TYPE_NORMAL
- en: Neither of these elements was particularly attractive or successful, and the
    W3C, as well as leading industry accessibility and usability experts advised against
    their use in most cases. Different browsers at that time supported one or the
    other of these elements, but not both. Both elements were added by their respective
    vendors as part of the original browser wars.
  prefs: []
  type: TYPE_NORMAL
- en: In the late 1990s, popular browsers added support for a technique known as **Dynamic
    HTML** (**DHTML**), which allowed scripting languages to modify the contents of
    a page after the page had loaded. DHTML wasn't any single technology, but rather
    a collection of techniques (JavaScript, CSS, DOM, and so on) that worked together
    to enable a basic level of interactivity and/or animation.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, DHTML made it possible to create quite advanced animations, but restrictions
    in the early implementations of the required technologies, as well as hugely varying
    browser support made DHTML tricky at best.
  prefs: []
  type: TYPE_NORMAL
- en: This era also saw the release and the rise of Flash (and Shockwave, a competing
    technology that was eventually subsumed by Macromedia—which was later acquired
    by Adobe in 2005), a vector and raster graphics format that allowed audio and
    video streaming, frame-by-frame animation, and a host of other features. Flash
    quickly became popular, and at the time of writing is still the number one format
    for web-based video, browser-based gaming, and advertising.
  prefs: []
  type: TYPE_NORMAL
- en: Gradual standardization of the DOM across (most) browsers, as well as the rise
    of JavaScript libraries such as jQuery, which abstracted away the differences
    that remained between browsers, have opened up animation to a much wider range
    of people than ever before. The term DHTML isn't often used these days because
    of its connotations with poor support between browsers, but the underlying principles
    and techniques that drive many interactive and animated sites remain similar.
  prefs: []
  type: TYPE_NORMAL
- en: Today, in addition to the animations made plausible and accessible by JavaScript
    libraries, we have much newer and much more exciting possibilities with CSS3 and
    native HTML elements such as the `<canvas>` element, which provides complete pixel-level
    control over an area of the page. We'll be looking at some CSS3 animation techniques,
    as well as the `<canvas>` element in more detail towards the end of the book.
    Flash-based animation is on the decline for the first time this century, and new
    technologies are poised on the horizon.
  prefs: []
  type: TYPE_NORMAL
- en: The power of animated UIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern operating systems use animations constantly to engage their users and
    to create a more compelling computing experience. When used in the right way,
    animations provide assistance to the users of the system, to lead and guide them
    through different tasks, provide context or feedback, and reinforce positive actions.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this is the way that applications are minimized in Windows
    7 or OS X—the application appears to squish down into the icon on the taskbar/dock,
    which shows the user where to go when they want to return to the application.
    It's the simple details like this that can be most effective.
  prefs: []
  type: TYPE_NORMAL
- en: Good animations can lend an air of sleek professionalism to an interface and
    make it appear more advanced or more modern. Apple's iPhone (or iPad) is a perfect
    example—the seamless use of subtle animations and transitions within the operating
    system and its applications allow the user to connect with the device in a profoundly
    satisfying and immersive way. Anything that appears or disappears is faded smoothly
    in or out, and menus and content panels slide in or out from the top or the sides.
    Sudden events can unsettle or distract users, but a well-timed animation can help
    to make them aware that something is happening or something is about to happen.
  prefs: []
  type: TYPE_NORMAL
- en: Be warned though, badly executed, clumsy, or overly pointless animations can
    do the opposite, making your interface appear basic, poorly designed, or inferior.
    No animation can be better than poor animation. Even if your application works
    perfectly, superfluous animations can leave your users feeling frustrated and
    cause them to forgo your application or website.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop computers and a rapidly growing number of mobile and handheld devices
    are easily powerful enough to handle quite complex animations, and with integrated
    hardware acceleration and more refined CSS3 and HTML5 making its way into the
    latest browsers, the possibilities of what can be achieved on the Web are increasing
    exponentially.
  prefs: []
  type: TYPE_NORMAL
- en: When to use animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Animations can make a great impression and enhance the user experience in the
    following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: When showing or hiding windows, pop ups, and content panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When something is moved to a different area of the window or page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When something has changed state on the page as a result of the action of the
    user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To lead the user to a specific call to action or bring their attention to something
    important
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When not to use animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Too many animations in unnecessary places can be damaging. Try and avoid animations,
    or at least give them serious consideration, in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: When an action needs to be repeated very frequently by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where the devices known to use the system are likely to be incapable of displaying
    the animation adequately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On time-sensitive actions or processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bear in mind that these are guidelines only, not laws which must be obeyed at
    all costs, and they are certainly not definitive. There are few situations where
    animations should never, ever be used and few situations where they must always
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: Use your judgment to determine whether an animation is suitable for your application
    or page and its intended audience. If possible, give your users the chance to
    enable or disable animations based on their own personal preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Animation checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before implementing an animation in our pages or applications, consider the
    following checklist of questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the animation appropriate for your target users?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the animation practical?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the animation add value or enhance the user experience?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will the animation run at appropriate speeds on the devices that are most likely
    to be used?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you can answer yes to all of the above questions, the animation will probably
    be a positive feature. If you answered no to any of these questions, you probably
    need to stop and think about what you are trying to achieve by adding the animation,
    and whether or not it could be better achieved in some other manner.
  prefs: []
  type: TYPE_NORMAL
- en: Animating with jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'jQuery ([http://jquery.com](http://jquery.com)) provides a range of animation
    methods natively, without the use of additional effect libraries or plugins. There
    are, however, many plugins contributed from the online community, including jQuery
    UI ([http://jqueryui.com](http://jqueryui.com)), the official UI library for jQuery,
    which extends jQuery''s animation capabilities. Natively, jQuery provides methods
    that add sliding and fading behavior with minimal configuration and which work
    cross-browser. It also exposes methods related to managing the animation queue,
    and provides a means for creating custom animations that work on almost all numerical
    CSS styles. Over the course of this book, we''ll look at every animation method
    that the library contains in detail. These methods are listed here with descriptions
    of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `animate()` | It performs a custom animation of a set of CSS properties.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `clearQueue()` | It removes from the queue all items that have not yet been
    run. |'
  prefs: []
  type: TYPE_TB
- en: '| `delay()` | It sets a timer to delay execution of subsequent items in the
    queue. |'
  prefs: []
  type: TYPE_TB
- en: '| `dequeue()` | It executes the next function on the queue for the matched
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `fadeIn()` | It displays the matched elements by fading them to opaque. |'
  prefs: []
  type: TYPE_TB
- en: '| `fadeOut()` | It hides the matched elements by fading them to transparent.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `fadeTo()` | It adjusts the opacity of the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `fadeToggle()` | It displays or hides the matched elements by animating their
    opacity. |'
  prefs: []
  type: TYPE_TB
- en: '| `finish()` | It stops the currently-running animation, removes all of the
    queued animations, and completes all of the animations for the matched elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hide()` | It hides the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `queue()` | It shows the queue of functions to be executed on the matched
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `show()` | It displays the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `slideDown()` | It displays the matched elements with a sliding motion. |'
  prefs: []
  type: TYPE_TB
- en: '| `slideToggle()` | It displays or hides the matched elements with a sliding
    motion. |'
  prefs: []
  type: TYPE_TB
- en: '| `slideUp()` | It hides the matched elements with a sliding motion. |'
  prefs: []
  type: TYPE_TB
- en: '| `stop()` | It stops the currently-running animation on the matched elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `toggle()` | It displays or hides the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: 'It''s important to note that there are two properties that can change the Global
    jQuery Object. These are listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `jQuery.fx.interval` | It is the rate (in milliseconds) at which animations
    fire. |'
  prefs: []
  type: TYPE_TB
- en: '| `jQuery.fx.off` | It globally disables all animations. |'
  prefs: []
  type: TYPE_TB
- en: All in all, it gives us a powerful and robust environment to easily add almost
    any type of animation that we can conceive.
  prefs: []
  type: TYPE_NORMAL
- en: Animation is also a popular theme for plugins, with many available plugins that
    bring different types of animations to our fingertips for instant implementation
    with minimal configuration. We'll look at several plugins later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, that's the template file that we'll be referring to and using in the code
    examples throughout the book. Let's also take a moment to look at the folder structure
    that the example files use. Create a project folder and call it `jquery-animation`
    or any similar name. Within this, create three new folders and call them `css`,
    `img`, and `js`.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML pages we create will go into the `jquery-animation` folder alongside
    the subfolders. All of the CSS files we create will go into the `css` folder,
    and all of the images that we use in the examples will go into the `img` folder.
    The jQuery library and any additional script files we use or create will go into
    the `js` folder. This is also the directory structure you'll find if you download
    and unpack the accompanying code archive containing all of the examples.
  prefs: []
  type: TYPE_NORMAL
- en: The template file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each of the example files we''ll create throughout the course of this book
    will rely on a common set of elements. Rather than repeatedly showing these same
    elements in every single code section and examples in the book, we''ll take a
    look at them just once here:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <meta charset="utf-8">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title></title>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <link rel="stylesheet" href="css/.css">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </head>
  prefs: []
  type: TYPE_NORMAL
- en: <body>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="img/jquery.js"></script>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <script>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $(function(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </script>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </body>
  prefs: []
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://packtpub.com](http://packtpub.com). If you purchased
    this book elsewhere, you can visit [http://packtpub.com/support](http://packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Save a copy of this file into the `jquery-animation` folder we just created
    and call it `template.html`. This is the base file that we'll use for every single
    example, so when we start working through the examples and I say *add the following
    markup to the* `<body>` *of the template file*, it means insert it directly between
    the opening `<body>` tag and the first `<script>` tag in the template file we
    just created in the preceding code. Whenever we add any JavaScript to the template
    file, it will be added within the anonymous function in the second `<script>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at what the template file contains. We start out with the
    HTML5 doctype declaration, as we'll be using plenty of HTML5 elements in our examples.
    We also set the `lang` attribute of the `<html>` element to `en` and the `<meta>`
    tag's `charset` attribute to `utf-8`, neither of which are strictly required,
    but are nevertheless best practice.
  prefs: []
  type: TYPE_NORMAL
- en: Next comes an empty `<title>` element, to which we can add the name of each
    example and a `<link>` element with an incomplete `href`, ready for us to add
    the name of the stylesheet that each example will use.
  prefs: []
  type: TYPE_NORMAL
- en: Since the versions prior to **Internet Explorer 9** (**IE9**) don't support
    any HTML5 elements, we need to use Remy Sharp's `html5shiv` script to make this
    browser use HTML5 correctly. We can link to the online version of this file for
    convenience using a conditional comment that targets all of the versions of IE
    lower than version 9\. Feel free to download `html5.js` and store it locally if
    you plan on playing with the examples in IE while disconnected from the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of the examples throughout the book, it would probably be
    wise to upgrade to the latest stable release versions of the most common browsers,
    which at the time of writing are *Firefox 24*, *Chrome 30*, *Safari 6*, and *Opera
    17* (although expect these to change quite rapidly).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to note that jQuery 2.0 doesn't support *oldIE*, meaning IE8
    and below. For this reason, we won't be covering any browser compatibility fixes
    for those versions of IE.
  prefs: []
  type: TYPE_NORMAL
- en: If your project needs to be compatible with IE8 or older, you'll need to use
    **jQuery 1.10** or below. Furthermore, if your project uses HTML5 elements and
    needs to be compatible with IE8 or below, you'll need to use `html5shiv` ([https://code.google.com/p/html5shiv](https://code.google.com/p/html5shiv)).
  prefs: []
  type: TYPE_NORMAL
- en: IE9 does support a lot of HTML5 and CSS3, so using the `html5shiv` file in general
    will only be required as long as IE8 holds its top spot as the world's most used
    browser. At the time of writing, Internet Explorer 8 had a market share of 21
    percent worldwide according to NetMarketShare ([http://netmarketshare.com](http://netmarketshare.com)).
    With 19 percent, IE10 comes in second and Chrome 29, FireFox 23 and IE9 are following
    shortly behind. The `<body>` tag of the page is empty, except for some `<script>`
    tags. We'll obviously use jQuery in every example, so the first tag links to that.
    The current version of jQuery is 2.0 at the time of writing (but like the browser
    versions, this is likely to change pretty quickly).
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout the book, we''ll be using a local version of jQuery, so that we
    won''t have to rely on being connected to the Internet or worry about Internet
    slowness. However, in most cases, in production, it''s recommended to link to
    one of the 4 CDNs (Content Delivery Network) for jQuery. These can be found below:'
  prefs: []
  type: TYPE_NORMAL
- en: '| CDN hosted by | URL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| jQuery | [http://code.jquery.com](http://code.jquery.com) |'
  prefs: []
  type: TYPE_TB
- en: '| Google | [https://developers.google.com/speed/libraries/devguide?csw=1#jquery](https://developers.google.com/speed/libraries/devguide?csw=1#jquery)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Microsoft | [http://asp.net/ajaxlibrary/cdn.ashx#jQuery_Releases_on_the_CDN_0](http://asp.net/ajaxlibrary/cdn.ashx#jQuery_Releases_on_the_CDN_0)
    |'
  prefs: []
  type: TYPE_TB
- en: '| CDNJS | [http://cdnjs.com/libraries/jquery](http://cdnjs.com/libraries/jquery)
    |'
  prefs: []
  type: TYPE_TB
- en: In the second `<script>` tag we have an empty function, into which all of the
    example JavaScript code we write will go. We pass the jQuery object into our anonymous
    function and alias it to the `$` character. Although not strictly necessary (except
    in the example where we create a jQuery plugin), this is another good habit to
    get into.
  prefs: []
  type: TYPE_NORMAL
- en: A basic animation example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at a basic example of the kind of animation that can help reassure
    our visitors that something is happening. If the user performs an action, and
    the result is not displayed immediately, providing feedback to the user that their
    action is in the process of being executed is a helpful use of animation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next screenshot we can see the loading indicator centered beneath the
    **Initiate the action** button. It features three separate loading bars which
    sequentially light up to show that something is happening. Each bar is styled
    slightly differently.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating an animated loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example we'll create a simple animated loading indicator that we can
    start when a particular process is initiated and stop once the process has completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the template file that we just looked at and add the following `<button>`
    element to `<body>` (this should go before the `<script>` elements):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <button id="go">Initiate the action</button>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, in the empty function in the second `<script>` element at the bottom
    of the page, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var loader = $("<div></div>", {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'id: "loader"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}).css("display", "none");'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var bar = $("<span></span>").css("opacity", 0.2);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var loadingInterval = null;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for (var x = 0; x < 3; x++) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bar.clone().addClass("bar-" + x).appendTo(loader);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: loader.insertAfter("#go");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: function runLoader() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var firstBar = loader.children(":first"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: secondBar = loader.children().eq(1),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: thirdBar = loader.children(":last");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: firstBar.fadeTo("fast", 1, function () {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: firstBar.fadeTo("fast", 0.2, function () {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: secondBar.fadeTo("fast", 1, function () {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: secondBar.fadeTo("fast", 0.2, function () {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: thirdBar.fadeTo("fast", 1, function () {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: thirdBar.fadeTo("fast", 0.2);
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '};'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#go").click(function () {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (!$("#loader").is(":visible") ) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: loader.show();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: loadingInterval = setInterval(function () {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: runLoader();
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, 1200);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: loader.hide();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: clearInterval(loadingInterval);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the file as `loading.html` in the main project folder (`jquery-animation`).
    Finally, we''ll need to add a few basic styles to the example. Create a new file
    in your text editor and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#loader { margin:10px 0 0 36px; }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#loader span {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:block;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:6px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: float:left;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin-right:6px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border:1px solid #336633;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background-color:#ccffcc;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#loader .bar-0 {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:15px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bottom:-20px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#loader .bar-1 {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:25px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bottom:-10px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#loader .bar-2 {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:35px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: margin-right:0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file in the `css` folder as `loading.css` and update the HTML file
    to call this stylesheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, your code should look like the following screenshot once we click
    on the button:![Time for action – creating an animated loader](img/9642OS_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<button>` hardcoded onto the page is used to show and hide the loading
    animation. This is done purely for the purpose of this example. In an actual implementation,
    we'd show the loading animation at the start of a load operation, when new content
    is being added to the page for example, and then hide it again once the operation
    is complete.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we did inside the outer function is set some variables. We created
    a new `<div>` element as a container for the loader, using an **object literal**
    as the second argument in the anonymous function to give it an `id` of `loader`.
    We then set its style to `display:none` with jQuery's `css()` method so that it
    is not immediately visible.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An *object* literal is a list of paired values separated by commas and wrapped
    in curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: We also created a new `<span>` element, which will be used as a template to
    create the three individual loading bars. We set its opacity to `0.2` (20% opaque)
    using the `css()` method. jQuery normalizes this style for us so that it works
    correctly in Internet Explorer. The last variable, `loadingInterval`, will be
    used to store `id` of an **interval** so that we can clear the interval when we
    need to. We set this to null initially, as the interval has not yet been set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An *interval* is a numerical value set (in milliseconds) to pause or delay an
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Once our variables have been defined and initialized, we then execute a short
    `for` loop, with just three iterations. Within this loop, we clone the span element
    we created, give it a class name (so that each bar can be styled separately),
    and then append it to the container. Once the three loading bars have been added
    to the container, we insert the loader after the `<button>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define a function called `runLoader`. This is the function that will
    be repeatedly called by the interval. The function doesn't run until the button
    is clicked. Within this function, we cache the selector for each of the three
    individual bars and then run a series of nested functions.
  prefs: []
  type: TYPE_NORMAL
- en: We first increased the first-loading bar to full opacity using the `fadeTo()`
    jQuery animation method. This method takes a string indicating the speed of the
    animation as its first argument (in milliseconds, or using strings `"fast"` or
    `"slow"`), the opacity that the element should be faded to as its second argument
    (values range from 0-1, including decimals such as 0.50), and a callback function
    as the third argument. The callback function is executed as soon as the animation
    ends.
  prefs: []
  type: TYPE_NORMAL
- en: In the callback function, we then fade the first loading bar back to its original
    opacity of `0.2`. We supply another callback function to this method call, and
    within this callback function we animate the second loading bar to full opacity
    and then back to its original opacity. The same process is repeated for the third
    loading bar.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the jQuery `click()` method to add two functions which will
    be executed alternately each time the button is clicked. We'll use an `if` statement
    to check whether our `#loader` element is visible on the page by using `.is(":visible")`
    and adding an exclamation point (`!`) so that it returns true if the `#loader`
    element is not visible. If it isn't visible, we'll show the loader and then set
    the interval that repeatedly calls the `runLoader()` function. If the element
    is already visible, we hide the loader and clear the interval.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – extending the loading animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I mentioned that we could use the loading animation when making requests and
    waiting for a response. Try using it with jQuery's AJAX methods, showing the loader
    just before making the request, and hiding it again once the response has been
    processed. The JSONP example, which retrieves images of cats, on the jQuery website
    ([http://api.jquery.com/jQuery.getJSON](http://api.jquery.com/jQuery.getJSON)),
    makes a great test case. Depending on the speed of your connection, the loader
    may not be visible for very long.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – basic animation with jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Thinking about what we discussed earlier regarding when and when not to
    use animations, when would be an appropriate time to use this animation?
  prefs: []
  type: TYPE_NORMAL
- en: When there is a browser-intensive operation taking place
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When there is a delay between something being requested from the server and
    the request returning from the server, but where the processing required by the
    browser is minimal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As an alternative to a Flash animation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When animated GIF images are not supported
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What arguments are used with jQuery's `fadeTo()` method?
  prefs: []
  type: TYPE_NORMAL
- en: An integer representing the ending opacity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An object containing configuration options for the animation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A string or integer representing the speed or duration of the animation as the
    first argument, the ending opacity of the target element, and optionally a callback
    function to be executed when the animation ends
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No arguments are required
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this introductory chapter, we looked at a brief history of animation on the
    Web including how it began, early HTML elements and browser support, the rise
    of Flash, and the direction it's heading in the not-too-distant future.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at how animations can be used in a user interface to enhance
    the user experience. We saw some guidelines as to when animation should and shouldn't
    be used and looked at some of the things we should consider when implementing
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: We concluded the chapter with a basic example of using a loading animation.
    In this example, we used the `fadeTo()` jQuery method to change the opacity of
    elements on the page and a simple interval to play the animation. We didn't cover
    the method in full detail but we saw one example of how it can be used. We'll
    look at this method in more detail in the next chapter, which covers all of the
    fading animations provided by jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be focusing on animating images. We'll be creating
    a basic image rotator, and then extending the functionality of that script to
    build more functionality on top. We'll be left with a very lightweight image rotator
    that we can use on future development projects.
  prefs: []
  type: TYPE_NORMAL
