- en: Chapter 9. jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating stylish and functional buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dialog boxes for user information and input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing progress bars within your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding date picker interfaces to input boxes quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an autocomplete search feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery UI is a user interface library that is built on top of the jQuery JavaScript
    library. jQuery UI provides many interactive plugins, effects, and interface elements
    that the developer can use within their interfaces. This chapter will demonstrate
    jQuery UI's most common elements such as buttons and date pickers and show you
    how to add them to your website or web application quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start this chapter, ensure that you have visited [http://jqueryui.com/](http://jqueryui.com/)
    and downloaded the jQuery UI library. Download the library via the **Download
    Builder** on their website; make sure all the default options remain selected.
    The version of jQuery UI that is used in this chapter is v1.10.3, but most recipes
    will work with newer versions. Their website also provides a wealth of documentation
    and examples to get you started with jQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: To start with the recipes in this chapter, create an easily accessible folder
    named `chapter9` and place the jQuery library inside it. Create a subfolder named
    `jquery-ui`, and place the `css` and `js` folders from the jQuery UI library inside
    this subfolder.
  prefs: []
  type: TYPE_NORMAL
- en: Creating stylish and functional buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is relatively easy to create stylish buttons quickly with CSS3, but adding
    additional functionality often requires more investment in terms of time. jQuery
    UI provides a button API that can be used to create a wide range of button controls,
    which can be easily added to UIs and interacted with inside JavaScript code. This
    recipe shows you how to create common button controls so that you can re-use the
    code at your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside the `chapter9` folder that was created earlier, create `recipe-1.html`
    and `recipe-1.js`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a range of different button controls using the jQuery UI library,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-1.html` in order to add various button
    elements, ensuring that you update the references to the jQuery and jQuery UI
    libraries where required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-1.js` in order to apply UI styling
    and functionality to the button elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-1.html` in a web browser and you will be presented with various
    button elements styled with the default jQuery UI theme.![How to do it…](img/08960S_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML provides a range of different button elements that can be used by the
    jQuery UI button API. By looking at this web page, you will be able to see how
    the following elements work and re-use the code at your convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: Default buttons that include `a`, `input`, and `button` elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default buttons with options such as custom labels, icons, and disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons sets that allow for checkbox and radio button functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events on buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To initialize the jQuery UI button API, select a button or a set of button
    elements in the typical jQuery way and use the `button()` function, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will apply the jQuery UI CSS and additional functionality to the selected
    buttons. The `button()` function also takes a range of options in order to allow
    you to individually manipulate the button elements. This is shown in the `Button
    options` section in `recipe-1.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By grouping buttons within the HTML code and using the `buttonset()` function,
    you can create a set of buttons that work together to form a checkbox or radio
    button functionality, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can still interact with the HTML button elements using normal jQuery to
    attach events and perform actions. With this recipe, the button labeled **Enable/Disable**
    has a click event handler attached, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This uses the `button('option')` functionality provided by jQuery UI to check
    the disabled state of the button and then set it to `true` or `false` based on
    its current state. With `recipe-1.html` open in a web browser, clicking on this
    button will visually enable and disable the button labeled **Button 4**. Note
    that in the above example, the `click()` function can be chained after the `button()`
    function for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more button types available as part of the jQuery UI library. Head
    over to the documentation provided on their website ([http://jqueryui.com/button/](http://jqueryui.com/button/))
    for simple examples and more detail.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating dialog boxes for user information and input*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dialog boxes for user information and input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. User Interface"), *User Interface*, you
    were shown how to create your own modal pop ups. jQuery UI provides an easy-to-use
    API that helps you to quickly add modals or dialogs to your application. This
    recipe will look at the default behavior of jQuery UI's dialogs and show you how
    to use them. Once again, this recipe is designed so that you can easily find the
    code you need and re-use it at your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `chapter9` folder, create `recipe-2.html` and `recipe-2.js` and have
    them open and ready for editing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand how to quickly add dialogs or modals to your application, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML to `recipe-2.html` in order to create the button and
    dialog elements for use within the JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following JavaScript code to `recipe-2.js` in order to initialize the
    dialog elements and buttons that open them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-2.html` in a web browser and you will be presented with the default
    dialog already open. Use the buttons within the button set to open a variety of
    other dialog types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the previous recipe, the HTML code creates the elements that the jQuery
    UI library will use to apply the required functionality and styling. There are
    four dialog elements in the page and three buttons that open the additional dialogs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JavaScript code initializes each of the dialog elements, in turn providing
    different options and settings. The first dialog element, `#default-dialog`, is
    initialized with no options by simply using the following jQuery UI code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will turn the `#default-dialog` HTML element into a jQuery UI dialog and
    display it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second dialog is initialized with the `autoOpen` option set to `false`,
    so it will not be automatically opened when the user first visits the page. To
    open this dialog, the user must click on the button labeled **Open Second Dialog
    with Animation**. The second dialog has some animation options provided, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will ensure that the fade animation is used when the dialog is opened and
    the explode animation is used when the dialog is closed. Read the jQuery UI dialog
    documentation ([http://api.jqueryui.com/dialog/](http://api.jqueryui.com/dialog/))
    to discover the available animations that you can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third dialog is a modal dialog. By simply adding the `modal: true` option
    to the `dialog()` function when the modal is opened, a backdrop that obscures
    the view from the rest of the page is added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth dialog in this recipe is a confirmation dialog. Using the buttons
    option, you can specify a number of buttons and callback to hold the button actions,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The resize option is also set to `false` to override the default behavior of
    allowing the user to be able to change the size of the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By reading the documentation ([http://api.jqueryui.com/dialog/](http://api.jqueryui.com/dialog/)),
    you will find more dialog types at your disposal. The form dialog is particularly
    useful to quickly retrieve user input with built-in validation functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating stylish and functional buttons*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing progress bars within your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Progress bars allow users to have detailed information regarding a process that
    your application is performing. Progress bars are the ideal solution to update
    the user on the progress of a task that they have requested, which could take
    a long time to complete. This action could be a file upload or some other lengthy
    server-side process. This recipe will show you how to use the jQuery UI progress
    bar API to easily add progress bars to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-3.html`, `recipe-3.js`, and `recipe-3.css` in the `chapter9`
    folder you created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn how to add a progress bar into your application quickly, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-3.html` in order to create a web page
    with the required progress bar HTML elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS code to `recipe-3.css` in order to provide some basic
    styles to the progress bar label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following JavaScript code to `recipe-3.js` to initialize the progress
    bar and provide functionality to the start progress button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-3.html` in a web browser and click on the **Start Progress** button.
    The progress bar will jump to life and begin to show you the progress until it
    has reached 100 percent.![How to do it…](img/08960S_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML page creates two elements that jQuery UI will use to create the progress
    bar and the label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The default label text is added into the label element, which will be displayed
    when the user first visits the web page. A **Start Progress** button has also
    been added to the web page so that the user can initiate the load action.
  prefs: []
  type: TYPE_NORMAL
- en: The load action in this recipe is simply a fake process. You could easily reuse
    this code in conjunction with an `XmlHttpRequest` for image uploads, such as the
    code that was used in the *Coding an image cropper plugin from scratch* recipe
    in [Chapter 8](ch08.html "Chapter 8. Understanding Plugin Development"), *Understanding
    Plugin Development*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize the progress bar in the `progress-bar` element that was added
    to the HTML page, the `progressbar()` function is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: An object with two properties is provided to this function to set up the change
    and complete the event callback functions. This allows us to perform actions when
    the progress value has changed and when the progress has been completed. In this
    recipe, we simply update the progress label to inform the user of the complete
    percent value. Ensure that you read the documentation ([http://jqueryui.com/progressbar/](http://jqueryui.com/progressbar/))
    so that you are aware of all the options available.
  prefs: []
  type: TYPE_NORMAL
- en: By using `progressBar.progressbar("value")`, it is possible to retrieve the
    progress value from the progress bar element. This value can then be used to update
    the progress label text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `doStuff()` function, which is called when the user clicks on the **Start
    Progress** button, acts as the progress. It uses `setTimeout()` to recall itself
    every 100 milliseconds and then increments the progress bar value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Coding an image cropper plugin from scratch* recipe in [Chapter 8](ch08.html
    "Chapter 8. Understanding Plugin Development"), *Understanding Plugin Development*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding date picker interfaces to input boxes quickly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Date pickers provide the user with an easy-to-use interface to allow them to
    quickly select the date they require. jQuery UI provides a date picker that can
    be quickly added to input fields. The date picker provides many configuration
    options such as date formatting and restrictions, making it easier for the developer
    to limit the user's input accordingly. This recipe will show you how to add the
    date picker to two input fields, change the date format of the date pickers, and
    also apply date limits to each of the fields.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the previous recipe, create `recipe-4.html`, `recipe-4.js`, and `recipe-4.css`
    within the `chapter9` folder you created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform each of the following steps to create a simple interface with two date
    pickers and configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following HTML code into `recipe-4.html` to create the basic web
    page and UI with date picker elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS to `recipe-4.css` in order to provide a basic style and
    positioning to the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery code to `recipe-4.js` in order to set up the date
    picker elements and provide functionality to the additional elements within `recipe-4.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-4.html` within a web browser and you will be presented with a simple
    interface with two inputs and two drop-down menus. The two inputs labeled `start`
    and `end` will provide you with a date picker interface when you click inside
    the input fields. You can then use the date picker to select a date to be inserted
    in the associated input. By using the two dropdowns, you can change the behavior
    of the dates and the date pickers. The format options will change the date format
    to either English or American. The restriction dropdown will allow you to select
    the maximum number of years that the end date picker will allow the user to select
    past the selected start date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML and CSS provides us with a simple interface that can be used with jQuery
    UI to demonstrate some of the date picker capabilities. At the top of `recipe-4.js`,
    there are some variables holding references to the different HTML elements that
    will be used by jQuery and a variable holding the English date format.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a date picker to an input element, the jQuery UI `datepicker()` function
    is used with the required options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dateFormat` option sets the format for the selected date picker. The `minDate`
    option sets the minimum date that the date picker will allow the user to select;
    `new Date()` is used to set this restriction to the current date. The function
    specified for `onClose` will be executed when the date picker has been closed.
    Within this function, the `minDate` option is set for the end input. This will
    ensure that the user will not be able to choose an end date that is before the
    selected start date. The `restrictDates()` function is also being called from
    here. The `restrictDates()` function is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This function applies a restriction to the end date picker so that the user
    cannot select an end date which is *n* years greater than the selected start date.
    Here, *n* is the value specified by the **Restrict** drop-down menu. Just as `minDate`
    is set, the `maxDate` is set using the selected start date plus the amount of
    specified years. This function is also called using the `change()` function when
    the user changes the drop-down selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user chooses to change the date format, the following code is used
    to update the format for each of the date picker elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There are many options available as part of the date picker API. Read the documentation
    ([http://api.jqueryui.com/datepicker/](http://api.jqueryui.com/datepicker/)) to
    learn what other options are available.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an autocomplete search feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to suggest search terms to a user as they are
    typing into a search input. This is a very popular feature and can be very helpful
    to the user as it provides them with some insight into what search results will
    be available before they have even made the search. jQuery UI provides the autocomplete
    functionality that can be quickly added to any input element.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-5.html`, `recipe-5.js`, and `recipe-5.css` in the `chapter9`
    folder, where you have saved the other recipe files.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe utilizes a quality API provided by Trakt.tv ([http://trakt.tv/api-docs/](http://trakt.tv/api-docs/)).
    You will need to register (for free) and obtain an API key before you can begin
    this recipe. Once you have registered, you can find your API key on the following
    page: [http://trakt.tv/api-docs/authentication](http://trakt.tv/api-docs/authentication).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the point of writing this recipe, there is a known bug within Google Chrome,
    where if you are trying to call an external source using AJAX in jQuery from your
    local machine (that is, accessing `recipe-5.html` using `file://` instead of `http(s)://`),
    you may receive an `Access-Control-Allow-Origin` error. If you do experience this
    problem, either serve your recipe files through a web server or use an alternate
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how the autocomplete feature can be used in a real-world situation,
    this recipe will use the API specified above to create a related TV show search.
    It will allow the user to search for a TV show (with suggestions from autocomplete),
    and once the user has selected one, shows related to the selected one will be
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the autosearch feature, perform the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-5.html` in order to create the basic
    web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the following CSS in `recipe-5.css` to turn the HTML code into an attractive
    looking web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following jQuery to `recipe-5.js` in order to initialize the autocomplete
    functionality on the search input element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the source function you have just added, insert the following code to
    make a call to the Trakt.tv API based on the user''s input to provide the autocomplete
    functionality with data to display. Ensure that you replace `[API KEY HERE]` with
    your Trakt.tv API key, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To populate the main results list based on the user''s autocomplete section,
    add the following jQuery code to the select function you have just added. Once
    again, remember to replace `[API KEY HERE]` with your API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-5.html` in a web browser and search for your favorite TV show:![How
    to do it…](img/08960S_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery UI autocomplete function wraps up all the complexity so that the
    developer only needs to think about providing it with the data and the action
    after selection, if any.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML page in this recipe creates a web page that provides an input the
    user can search within. This input is then selected within the jQuery code, and
    the `autocomplete()` function is used to initialize the autocomplete functionality
    on the selected element, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `source` property on the object provided to the `autocomplete()` function
    is the data that is used in the dropdown displayed to the user. The `source` property
    can either be an array, string, or function. When `source` is a string, it expects
    the value to be a resource URL providing the data in the expected format. Because
    we are using an external API that will not provide the data in the expected format,
    we use the third option and do some additional processing within the function.
    The `minLength` property allows us to control how many characters the user must
    input before the autocomplete functionality kicks into action.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the data needs to be retrieved from Trackt.tv. To do this, the familiar
    jQuery `$.ajax()` function is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `source()` function takes two arguments: `input` (object) and `response`
    (function). Using `input.term`, we can get the value that the user entered into
    the search input text box and insert it into the API URL to search for TV shows.
    The limit query string variable is set to `10` so that only 10 results will be
    returned.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that on both the AJAX requests within this recipe, the `dataType` attribute
    has been set to `jsonp`. This is to prevent any cross-domain issues when working
    with the API. Read more about jQuery's JSONP at [http://www.jquery4u.com/json/jsonp-examples/](http://www.jquery4u.com/json/jsonp-examples/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the request is successful, we can loop through all the results and create
    an array in the format that the autocomplete functionality expects, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `response()` function is called, which was the second argument to the `source()`
    function; this will send the results to the autocomplete feature for display.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next piece of functionality in these recipes occurs when the user selects
    an option from the autocomplete suggest list. The `select` property on the object
    provided to the `autocomplete()` function takes a callback function that is executed
    when the user makes a selection. Using the `ui` argument, it is then possible
    to retrieve data from the object that represents the user''s selection. In this
    case, we require the ID so that we can pass it back to the Trackt.tv API and retrieve
    a list of related TV shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This variable is used as a part of another `$.ajax()` request. On the success
    of this request, the results are looped through and a list item is inserted into
    the result list for each of the related TV shows. A link to a Trakt.tv web page
    with more information about each of the shows is also added, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an autosuggest feature* recipe in [Chapter 3](ch03.html "Chapter 3. Loading
    and Manipulating Dynamic Content with AJAX and JSON"), *Loading and Manipulating
    Dynamic Content with AJAX and JSON*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
