- en: Chapter 11. Enhancing jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll learn how to enhance jQuery Mobile, how to make your
    mobile applications really stand out from the pack by creating themes and icons
    to improve the look and functionality of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about the building blocks of jQuery Mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create our own jQuery Mobile theme using ThemeRoller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design and implement custom icons for our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's possible?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reaction many developers have when using jQuery Mobile for the first time
    is awe at how easy it is to implement a rich, compelling mobile website for their
    users. The ease with which it converts plain HTML to beautiful, usable buttons,
    and listviews. The form elements are a dream to work with. The jQuery Mobile team
    even shipped five well designed and attractive themes and 18 commonly used icons
    along with the rest of the package. They even built a tool that we can use to
    build our own themes; **ThemeRoller**.
  prefs: []
  type: TYPE_NORMAL
- en: After working with jQuery Mobile for sometime developers might be asking "what
    *else can I do with this?"* Just like muscle cars from the 60s and 70s. It wasn't
    enough that they were already awesome, the tweakers and the gearheads wanted to
    do more. If you are identified with that mentality then this chapter is for you.
  prefs: []
  type: TYPE_NORMAL
- en: The wonderful thing about jQuery Mobile is that because it's all plain CSS and
    HTML, we can do almost anything we want to it with very little effort. In this
    chapter we'll be creating our own theme from scratch using ThemeRoller for jQuery
    Mobile. We'll be designing buttons and writing the CSS code needed to implement
    both low and high resolution versions. We'll also be looking at how we can expand
    on the styles and classes already available in jQuery Mobile and make something
    different and unique. Let's get started now, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: The visual building blocks of jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you've already seen, jQuery Mobile is very user friendly and pleasing to
    the eye. It makes good use of rounded corners, subtle gradients, drop shadows
    to make elements stand out from their surroundings, and other *tricks* that graphic
    designers have been using for years in print. But on the web, these effects were
    only possible with the use of images, or complicated and poorly supported plugins
    and applets.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of the Web 2.0 and CSS 3, all of these options have been made
    available to us, the layman web developers. Just remember that with great power
    comes great responsibility. jQuery Mobile operates on the principle of progressive
    enhancement. A tricky phrase but it just means that you should develop for the
    lowest common denominator and offer enhancements for browsers that understand
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily for us these stylistic additions are almost purely cosmetic. If a browser
    doesn't understand the `border-radius` declaration, then it simply displays squared
    off corners. The same holds true for gradients and shadows. While jQuery Mobile
    adds these effects to your application out of the box, it's worthwhile knowing
    how to add them on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Border-radius
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rounded corners can be one of the most elegant and appealing effects, and they
    are also the simplest to add. There are a few caveats that developers need to
    know about this effect and the other effects. While there is a specification for
    `border-radius` as recommended by the W3C, it turns out that each of the primary
    browser manufacturers supports it in slightly different ways. The end result is
    the same, but the path to it varies. Let''s take a look at the most basic `border-radius`
    declaration, and the following screenshot is its result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Border-radius](img/7263_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You also have the option of rounding only certain corners, as well as tweaking
    the values so that the corner isn''t a perfect quarter-circle. Let''s look at
    a few more examples. The following code snippet and the screenshot demonstrate
    an example to get two rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Border-radius](img/7263_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code snippet and the screenshot demonstrate an example to get
    one rounded corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Border-radius](img/7263_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sadly, it''s not quite as easy as this, just yet. Because each browser vendor
    has their own unique rendering for this effect, software developers like Google,
    or Mozilla have taken to creating their own versions, commonly called **vendor
    prefixes**. For the previous style declarations to have the widest range of coverage
    you''d have to add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Applying drop shadows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drop shadows in CSS take one of two forms: text-shadows (applied to text) and
    box-shadows (applied to everything else). Like `border-radius`, drop shadows are
    fairly straightforward if you''re looking at the W3C specification.'
  prefs: []
  type: TYPE_NORMAL
- en: Using text-shadow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look at `text-shadow` first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Using text-shadow](img/7263_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This property also supports multiple shadows by adding additional declarations
    in a comma separated list, as shown in the following code snippet and the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Using text-shadow](img/7263_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unlike the `border-radius` property, the `text-shadow` property doesn't require
    vendor prefixes. That doesn't mean that all browsers support it, it simply means
    that browsers that do support this property, display it as intended, while browsers
    that do not, simply see nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Using box-shadow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Box-shadow follows a very similar model to text-shadow, with one addition,
    that is the `inset` keyword which allows for inner shadowing. Let''s get to the
    examples. The first example shows standard outer shadows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Using box-shadow](img/7263_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And now, in the following example check out these inner shadows. Snazzy eh?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Using box-shadow](img/7263_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s worth mentioning that both box-shadow and text-shadow can have their
    colors set with the less commonly used `rgb` and `rgba` declarations. This allows
    the developers to set colors using the more familiar convention of RGB values.
    The `rgba` declaration also allows setting color opacity from `0` to `1`. The
    code for that is a simple change, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: CSS gradients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSS gradients are a great way to add beauty and impact to your website. Options
    include linear gradients (right to left, top to bottom, and so on.), and radial
    gradients (from center outwards). By default, gradients consist of a start color
    and an end color. CSS gradients may also include additional tones using color
    stops.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should be noted however that support for CSS gradients in older browsers
    isn''t perfect, specifically in Internet Explorer. The good news is that there
    are ways to address IE that can allow developers to reliably use gradients in
    their development. The bad news is that the code for that support is *robust*.
    Let''s take a look at the simplest possible gradient declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Gradient declarations can be quite complex so let''s break it down with an
    infographic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS gradients](img/7263_11_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now here''s the kicker...at the time of writing this, there were no browsers
    that supported the W3C specification using the actual property. Let''s take a
    look at the code to support multiple browsers and you''ll love jQuery Mobile even
    more than you already do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![CSS gradients](img/7263_11_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can add multiple colors to your gradient by adding additional comma separated
    declarations. For example, the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Results are shown in the following gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS gradients](img/7263_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you might guess after reading the last few pages, jQuery Mobile does a lot
    of heavy lifting on your behalf. Not only does it add slick gradient page backgrounds,
    but it has to keep track of all of the browser quirks that might prevent that
    sweet drop shadow from showing up. As we move into the next section you'll likely
    be even more impressed with the way it handles themes and color swatches.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of jQuery Mobile theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Theming in jQuery Mobile is straightforward and simple to use for the developer,
    but is pretty elaborate behind the scenes. Luckily there will rarely be a time
    when you need to know everything that's being done for you. However, it's worth
    a little bit of our time to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box jQuery Mobile comes with a theme set comprised of five color
    swatches, each associated with a letter from A-E. The theme contains a series
    of base CSS classes which can be applied at will to nearly any element and they
    contain global settings for width, height, border radius, shadows. The individual
    swatches contain specific information about color, fonts, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional swatches can be added to the five original swatches from F-Z, or
    the original swatches can be replaced or overridden at will. This system allows
    for a total of 26 distinct swatches, allowing for millions of possible combinations
    of theme colors, styles, and patterns. You apply a jQuery Mobile theme to the
    selected element by adding a `data-theme` attribute with the letter of the desired
    theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basics of jQuery Mobile theming](img/7263_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Developers will generally choose to use the `data-theme` attribute method when
    applying styles, but it's also possible to attach the CSS class names directly
    to your page elements for more granular control. There are a handful of primary
    prefixes which allow for this flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Bars (.ui-bar-?)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The bar prefix is generally applied to headers, footers, and other areas with
    high importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bars (.ui-bar-?)](img/7263_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Content blocks (.ui-body-?)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Content blocks are generally applied to areas where paragraph text is expected
    to occur. Its color helps to ensure maximum readability with the text color placed
    against it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content blocks (.ui-body-?)](img/7263_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Buttons and listviews (.ui-btn-?)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Buttons and listviews are two of the most important elements in the jQuery
    Mobile library and you can rest assured that the team took their time getting
    them right. The `.ui-btn` prefix also includes styles for up, down, hover, and
    active states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Buttons and listviews (.ui-btn-?)](img/7263_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mixing and matching swatches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the nice things about theming in jQuery Mobile is that child elements
    inherit from their parent unless otherwise specified. This means that if you put
    a button without its own `data-theme` attribute inside a header or footer bar,
    that button will use the same theme as its parent. Wicked eh?
  prefs: []
  type: TYPE_NORMAL
- en: '![Mixing and matching swatches](img/7263_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s also perfectly acceptable, and even encouraged, to place an element using
    one swatch and the child of an element using another swatch. This can help the
    element stand out more, or match a different part of the app, or whatever reasoning
    the developer chooses. It''s possible, and what''s more it''s easy. Simply place
    a button (or other element) inside a header bar, and assign it its own `data-theme`
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mixing and matching swatches](img/7263_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Site-wide active state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery Mobile also applies a global *active* state for all elements. This active
    state is used for buttons, form elements, navigation, and anywhere there's a need
    to indicate that something is currently selected. The only way to change this
    color value is to set (or override) it via CSS. The CSS class for the active state
    is, appropriately named, `.ui-btn-active:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Site-wide active state](img/7263_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Default icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Included in the jQuery Mobile set are 18 icons which cover a wide array of
    needs for developers. The icon set is white on transparent which jQuery Mobile
    overlays over a semi-transparent black circle to provide contrast against all
    of the swatches. To add an icon, specify the `data-icon` attribute with the name
    of the desired icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Default icons](img/7263_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: jQuery Mobile also provides the ability to place icons on the top, right, bottom,
    or left side of a button using the `data-iconpos="[top, right, bottom, left]"`
    attribute, with left being the default placement. Developers are also able to
    display an icon alone, without text, by specifying `data-iconpos="notext":`
  prefs: []
  type: TYPE_NORMAL
- en: '![Default icons](img/7263_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying custom icons is also possible and will be covered later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using a custom theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve already discussed how powerful theming is in jQuery Mobile. It makes
    it trivial to develop a rich mobile website with simple and elegant style. Even
    more powerful is the ability to create your own library of swatches which can
    be used to make your application or website truly unique. Developing your own
    theme can be approached in one of the following two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and open the existing jQuery Mobile CSS file and edit to your heart's
    content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Point your web browser to ThemeRoller for jQuery Mobile: [http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll be focusing solely on option two because let's be honest, why wade through
    all of that CSS when you can point, click, and drag your way to a new theme, full
    of swatches in 10 minutes? Let's find out what ThemeRoller is all about.
  prefs: []
  type: TYPE_NORMAL
- en: What's ThemeRoller?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ThemeRoller for jQuery Mobile is an extension of a web-based app that was written
    for the jQuery UI project. It allows users to quickly assemble a theme full of
    swatches in minutes using drag-and-drop color management. It features an interactive
    preview so that you can immediately see how your changes affect your theme. It
    also has a built-in inspector tool which helps you dig into the minute details
    (should you want them). It also integrates with Adobe® Kuler®, a color management
    tool. You can download your theme after you're done, you can share it with others
    via a custom URL, and you can re-import past themes for last-minute tweaking.
    It's a powerful tool and is a perfect complement to jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: One of the hallmarks of the five default swatches is that the jQuery Mobile
    team spent quite a bit of time working on readability and usability. The swatches
    range from highest contrast (A), to lowest contrast (E). Within a single theme
    the areas which have most contrast are the areas most prominent on the page. This
    includes the header (and listview headers), and buttons. When creating your own
    theme it's a good idea to keep this in mind. We always want to focus on usability
    within our app right? What good is a slick app if no one can read it because of
    poor color choices?
  prefs: []
  type: TYPE_NORMAL
- en: Using ThemeRoller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing you''ll see when you load up ThemeRoller is a slick looking
    splash screen, followed by a helpful **Getting Started** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ThemeRoller](img/7263_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Getting Started** screen has some helpful tips so make sure to glance
    at it before clicking the **Get Rolling** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ThemeRoller](img/7263_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After all of the splash screens are out of the way you''ll be presented with
    the primary interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ThemeRoller](img/7263_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'ThemeRoller is broken into four main areas: Preview, Color, Inspector and Tools.
    Each of these contains important functionality that we need to review. We''ll
    start with the Preview section.'
  prefs: []
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unless you''re loading an existing theme, the preview area will present three
    complete, identical and interactive jQuery Mobile pages packed with widgets of
    all sorts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preview](img/7263_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Move your mouse over them and you'll see that each page is functional. The header
    on each page contains a letter indicating which swatch controls its appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the top of the page you''ll see a series of color chips, along with two
    slider controls and a toggle button. Further to the right, you''ll see another
    ten color chips which should be blank. These are dedicated to recently used colors
    and will be empty until you''ve selected a color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Colors](img/7263_11_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Below the color chips are two sliders labelled **Lightness** and **Saturation**.
    The lightness slider adjusts the light and dark tones of the series of color swatches,
    while the saturation makes the colors more, or less, vibrant. Taken together,
    a user should be able to approximate nearly any color they choose. To use colors
    from Kuler®, click the text link marked **Adobe Kuler swatches**.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the color chips can be dragged onto any element within the preview area.
    This makes development of a swatch set extremely easy. Note that many of the jQuery
    Mobile styles overlap, for example, the header bar at the top of the page receives
    the same style as the header of the listview. Adjust the colors as desired then
    drag each chip onto an element on the page. Remember that each individual page
    is its own swatch so be careful about how you choose to mix colors.
  prefs: []
  type: TYPE_NORMAL
- en: Inspector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the far left of the interface is the inspector panel, split into two parts.
    The top part contains buttons allowing developers to download their theme, import
    an existing theme, and share a link to their theme. There''s also a **Help** link
    for people who didn''t buy this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspector](img/7263_11_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bottom section contains a series of tabs labelled **Global, A, B, C**, and
    **+**. Each of these tabs holds an accordion panel which contains all of the values
    for an individual swatch, except for the Global tab which applies to all of the
    swatches.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Global** tab, then click **Active State**, and the accordion panel
    will expand to show settings for the active state for your entire theme. Options
    include text color, text-shadow, background, and border. Changing a value in the
    global causes every current (and future) swatch to reflect the new setting.
  prefs: []
  type: TYPE_NORMAL
- en: Additional swatches can be added to your theme in two ways. Clicking the **+**
    tab at the top of the inspector adds a new swatch at the last place in your theme.
    You can also add a new swatch by clicking the **Add Swatch** button located at
    the bottom of the preview area. Swatches can be deleted by selecting the tab with
    the swatch you want to remove, then clicking the **Delete** link located to the
    right of the swatch name. Note that deleting a swatch from the top of the stack
    will cause the remaining swatches to be renamed.
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the very top of the page there are a series of buttons. These buttons allow
    you to perform a variety of tasks which we''ll cover in a moment, but first, take
    a closer look at the buttons themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tools](img/7263_11_25-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll notice the following buttons: a switch allowing you to change between
    the 1.1 (current) Version and the 1.0.1 Version, undo/redo, and a toggle button
    for the inspector. Setting this toggle to on allows you to inspect any widget
    in the preview area. Hovering over a widget highlights that element with a blue
    box. Clicking the element will cause the accordion menu in the Inspector area
    to expand to display settings specific to that element.'
  prefs: []
  type: TYPE_NORMAL
- en: There are four additional buttons which allow you to download your theme, import
    or upgrade a previously created theme, share your theme with others, and a help
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a theme for Notekeeper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''re familiar with the ThemeRoller interface, how about we go ahead
    and create our first theme? Rather than build one in abstract, let''s create one
    that we''ll actually use for the Notekeeper app we built earlier. Let''s start
    simply by modifying one of the existing themes that is shipped with jQuery Mobile.
    The team was kind enough to let users import the default themes as a starting
    place for new themes, so that''s where we''ll head first. Click the **Import**
    button at the top left of the window and you''ll get a box allowing you to paste
    in the contents of an existing theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a theme for Notekeeper](img/7263_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Import the default theme by clicking the link in the top-right corner, appropriately
    titled **Import Default Theme**. After the textarea fills with CSS, click **Import**.
    The preview area will reload and display swatches from **A** to **E**.
  prefs: []
  type: TYPE_NORMAL
- en: We'll focus our efforts on changing up the white swatch, **D**, as it's the
    closest to what our end goal is. Since we'd rather use swatch **A** as the name,
    let's delete the other swatches so that only **D** is left. Remember that ThemeRoller
    renames swatches as others are deleted. That means when you delete swatch **A,
    B** becomes **A, C** becomes **D**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Keep going until the swatch that was **D** is now in the **A** position. Finally,
    delete swatch **B** (which was formerly swatch **E)** so that all we have left
    is swatch **A:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a theme for Notekeeper](img/7263_11_26_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This swatch is nice looking but it''s a little bland. Let''s inject a little
    color by changing the header to a nice green. The simplest way to determine what
    values should be changed for any element is to use the inspector. Toggle the inspector
    to **On** at the top, then click anywhere on the header of theme **A**. You''ll
    know if you got it right if the **A** tab is selected on the left, and the **Header/Footer
    Bar** panel expands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a theme for Notekeeper](img/7263_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can change the color in one of a few ways. You can drag a color chip from
    the top directly onto the background. You can also drag a color chip onto an input
    field. Finally you can manually input the value. Notice that when you click into
    a field containing a color value you're provided with a slick color picker. Go
    ahead and change the values in the input fields in this panel to the values shown
    in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking good, but now the blue from the theme''s active state clashes with
    our green. Using the inspector tool, click once on the **On** section of the On/Off
    toggle bar. This should cause the **Active State** panel within the **Global**
    tab to expand. We''ll change the blue to a nice warm grey. The Global panel should
    now look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a theme for Notekeeper](img/7263_11_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s only one thing that''s keeping our new theme from looking its hottest,
    the blue text link in the paragraph at the top. Going back to our trusty inspector,
    let''s click directly on the link which will expand the **Content Body** panel
    within the **A** tab. Now, for those already familiar with CSS you know that you
    can''t simply change the link color without changing the hover also, `visited:hover`,
    and active states. The problem is that there are no options to make those changes,
    but ThemeRoller has you covered. Click the **+** to the right of the **Link Color**
    input field to display the rest of the options, then change the colors, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a theme for Notekeeper](img/7263_11_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And that's that. Feel free to make additional changes to your theme as you explore
    the inspector area. Change whatever you like, it's just bits and bytes right now.
    Keep in mind though that there's no undo option at the time. If you really like
    something, consider writing down the values so that you don't lose them or exporting
    it as it is. Speaking of...
  prefs: []
  type: TYPE_NORMAL
- en: Exporting your theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we actually export our theme there's one thing that must be noted. Remember
    the splash page with the "helpful" information? It turns out that there's one
    piece that's not a recommendation, but a requirement.
  prefs: []
  type: TYPE_NORMAL
- en: '**We recommend building themes with at least 3 swatches (A-C)**.'
  prefs: []
  type: TYPE_NORMAL
- en: For our theme to apply to our Notekeeper app properly we'll need to duplicate
    our single swatch (letter **A)** to swatches **B** and **C**. Luckily this is
    an easy thing to do. Select the **A** tab at the top of the inspector, then click
    the **+** tab twice. What you should see is three identical swatches, and now
    we're done.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've finished our theme we're going to export it for use in our Notekeeper
    application. This is a straightforward process which begins by clicking the **Download
    Theme** button located in the middle of the page, at the top of the interface.
    You'll be presented with a box allowing you to name your theme, some information
    about how to apply your theme, and a button labelled **Download Zip**. After naming
    our theme Notekeeper, click the **Download Zip** button and you'll receive a tasty
    little morsel in your downloads folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the contents of the ZIP file and you''ll see the following directory
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: index.html
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: themes/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Notekeeper.css` (The uncompressed version of your theme)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Notekeeper.min.css` (The compressed version. Use this in production)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: images/
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ajax-loader.gif`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons-18-black.png`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons-18-white.png`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons-36-black.png`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons-36-white.png`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML file at the top of the tree contains information on how to implement
    your theme, as well as a few widgets to confirm that the theme works. All of the
    links are relative in the example file, so you should be able to drag it into
    any browser window and see the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few notes about the download and implementation of themes:'
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery team provides the icons for buttons to you in this ZIP file for a
    reason. The theme requires those images to be relative to the CSS file. This means
    that unless you're already using the default themes you need to also include the
    images folder when you upload your theme to your website or the icons won't show
    up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Hang on to the uncompressed version of your theme**. While you don''t want
    to use it in production because of the size, you will need it should you ever
    wish to edit it within ThemeRoller. ThemeRoller cannot, at the time of this writing,
    import the minified CSS file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating and using custom icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how easy it is to add our own theme to jQuery Mobile using ThemeRoller.
    Now we're going to add a little more spice to our Notekeeper application by creating
    a custom icon. The directions in this section will be specific to Photoshop but
    any graphics application capable of exporting transparent PNG files should be
    acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: CSS Sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we create and use an icon, we should first understand how jQuery Mobile
    uses icons and applies them. In the theme you just created there are several image
    files present (themes/images). Open `icons-18-black.png`, and `icons-36-black.png`
    in the graphics editor of your choice. Zoom in on both of them to 400% or so and
    you should see something very similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS Sprites](img/7263_11_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When opening each of these files you''ll probably notice that each image contains
    all the icons. This is because jQuery Mobile takes advantage of a technique called
    **CSS Sprites** which itself takes advantage of the fact that CSS allows developers
    to *crop* a background image by specifying its position within its container,
    and to hide any other part of the background that would normally display outside
    of that container. Its primary benefits include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the number of requests a browser has to make. Fewer requests generally
    mean that a page will load faster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Centralize image locations. All icons can be found in one location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot is a simple illustration of the technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS Sprites](img/7263_11_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A browser always refers to an image from its top-left corner. In CSS language
    that''s `0,0`. To achieve this effect you set the background image on a container
    then simply adjust the `X` and `Y` coordinates until the position of the image
    matches your design. Then set the overflow of the container to crop, or hide,
    the remainder of the image. Remember that you''re *moving* the image to the left
    so you''ll use negative numbers for the `X` position. Using the previous illustration
    as a reference, the following code snippet is used to achieve this effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Designing your first icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're only going to be creating a single icon so we won't quite need all of
    the empty space around the icon. Let's start by deciding what we want to illustrate.
    Our application is called Notekeeper and it creates notes. Perhaps an icon illustrating
    a sheet of paper would work? This would have the added benefit of being fairly
    easy to represent at a small size. In the image editor of your choice create a
    new document at `36x36` pixels at `72` dpi. Name it `notekeeper-icon-black-36.png:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing your first icon](img/7263_11_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even though the dimensions of the document are 36x36 pixels, the active area
    of the icon will only be 22x22 pixels. This is in keeping with the icons provided
    by the jQuery Mobile team and will make sure our icon doesn't look odd. To make
    it easier to stay within the lines, use the rectangular selection tool to draw
    a square at 22px, then position it 7px from the top edge of the document and 7px
    from the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next draw guides along each edge so that your document looks something similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing your first icon](img/7263_11_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When drawing icons, you want to keep in mind the dimensions and attributes
    of the thing being illustrated. You won''t be able to represent everything, but
    you need to communicate the spirit of the thing. A sheet of paper is taller than
    it is wide, and has lines on it. Let''s start with those two things and see what
    we can come up with. The other icons in the set have a thick feel to them so that
    they can stand out against the background. Let''s color in a solid shape, then
    delete the lines for the page so that the icon has the same thick feel. We''re
    going to draw the lines in black so that they show up better printed in the book,
    but our icons will need to be white. Make sure you adjust your design accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing your first icon](img/7263_11_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This icon seems to meet all of our criteria. It's taller than it is wide, and
    has lines just like paper. It also has a jaunty little page turn to give it some
    attitude. Isn't that what everyone looks for in their paper icon? Make sure that
    the icon's lines are white, then save it. The jQuery Mobile icons have been saved
    as transparent PNG-8 files. This is similar to the GIF format, but isn't required.
    Use transparent GIF or transparent PNG-24 if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we created our first icon, we created the high resolution version. For
    brevity''s sake we''re going to quickly walk through the steps of creating a low-resolution
    icon:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new image document at 18x18 pixels. Name this one `notekeeper-icon-18`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The active area of this icon will be 12x12 pixels. Draw a selection 12px square
    then position it 3px from the top, and 3px from the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw your guides then sketch out the icon using the previous version as a reference.
    It's a lot harder drawing with this little space isn't it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your final result should look similar to the following screenshot:![Designing
    your first icon](img/7263_11_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save both images along with your Notekeeper theme and close Photoshop.
  prefs: []
  type: TYPE_NORMAL
- en: High and low resolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Resolution is the number of dots, or pixels, that can be displayed into a given
    area. Those of you from the web world measure everything in 72dpi, because that's
    what most monitors display. If you have much experience with mobiles then you
    might know that each device can have a different resolution compared to the one
    next to it. The problem with this is that higher resolution devices simply display
    more pixels on screen. This means that an image displayed on a high resolution
    screen will be smaller than the same image on a low resolution screen.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile accounts for this by having two versions of each icon, along with
    two sets of code for high and low resolution devices. In the next section we'll
    apply our custom theme and custom icon to our Notekeeper application.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Notekeeper app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time for us to tie all of these loose ends together. We have a custom
    theme that we built using ThemeRoller, we''ve got our sweet custom icon, and now
    it''s time for us to put all the pieces together. You''ll need the following pieces
    to finish up:'
  prefs: []
  type: TYPE_NORMAL
- en: The code you completed at the end of the Notekeeper chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The custom theme you created earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your custom icon; in white; in both 18px and 36px sizes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding our custom theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with the easiest part. Adding in our custom theme is pretty simple.
    Open `notekeeper.html` (in your browser, and in the text editor of your choice).
    Look for the`<head>` tag and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first new line implements the new theme we created. The second line currently
    points to a missing file (because we haven't created it yet). Even with a rich
    theming system such as jQuery Mobile has, we're still going to have some custom
    CSS for various things. `styles.css` is where we'll put our assorted styles, especially
    the definitions for our custom icon.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, go ahead and reload your browser window and take a look at our new
    theme in action. Isn't it snazzy? It's going to look even snazzier in a few minutes
    when our custom icon appears.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our custom icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go ahead and create `styles.css` in the root of your Notekeeper application
    code, then open it. The first thing we'll do is to add in the declaration for
    our 18px icon. It's low-resolution and will be the one you'll see in your desktop
    browser. High-resolution icons only show up in iPhone 4 and iPhone 4S at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add our custom icon we follow the pattern set by jQuery Mobile. It applies
    icons to buttons and other elements using the `.ui-icon` prefix. This means that
    for our icon to work within the framework we have to name our CSS class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then adding the icon to our `Add Note` button is as simple as adding a `data-icon`
    attribute, as shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that the string `notekeeper-note` can be anything as long as it
    matches the second half of the CSS class you created earlier. Finally let's add
    the remaining piece to our app, the high-resolution icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the hallmarks of jQuery Mobile is its support for something called **media
    queries**. Media queries essentially allows you to query a given device for various
    pieces of information based on its media type: screen, print, tv, handheld, and
    several others. The answer to this query allows developers to branch CSS code
    and display the page one way for a desktop browser (screen), and another way for
    a TV (tv). In the case of our icons, we want to ask any viewing device with a
    type of screen, if it supports a property called `-webkit-min-device-pixel-ratio`
    and if the value of that property is `2`. Add the following lines to `styles.css`
    after the declaration for the low-resolution icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Other than the media query code the only thing unique about this is the `background-size`
    property. It allows developers to specify that a given background should be scaled
    to the specified size (18x18 pixels) rather than its original size of 36x36 pixels.
    Since the resolution on the iPhone 4 and 4S is exactly double the size of the
    low-resolution devices this means that we're packing double the pixels into the
    same space as the smaller icon. The end result is that the icon looks crisper
    and sharper. If you've got one of these devices, upload your code to a server
    and view it. Your patience will be rewarded.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about advanced CSS techniques that are central to
    the jQuery Mobile experience, and how jQuery Mobile uses them to provide a rich
    interface to the end user. We took a deep dive into the basics of jQuery Mobile
    theming and how it works. We built a custom theme using the ThemeRoller tool,
    a custom icon with our very own hands, and we learned how to tie all those things
    together and implement them in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to take the principles you've learned
    in the past 11 chapters and create a native application which can run on the iOS
    and Android platforms (along with several others), using the Phonegap open source
    library.
  prefs: []
  type: TYPE_NORMAL
