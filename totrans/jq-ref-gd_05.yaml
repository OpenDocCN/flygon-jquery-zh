- en: Chapter 5. Event Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Woman, I am bound to you
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What will I do?
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"The Rope Song"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we'll closely examine each of the available event methods in
    turn. These methods are used to register behaviors to take effect when the user
    interacts with the browser, and to further manipulate those registered behaviors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Event Handler Attachment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following methods are the building blocks of jQuery's event handling module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: .bind()
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Attaches a handler to an event for the elements'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'eventData (optional): A map of data that will be passed to the event handler'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.bind()` method is the primary means of attaching behavior to a document.
    All JavaScript event types are allowed for *eventType*; the following are cross‑platform
    and recommended:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '`blur`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`change`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`click`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dblclick`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`focus`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keydown`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keypress`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyup`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousemove`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseup`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resize`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scroll`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`submit`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unload`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jQuery library provides shortcut methods for binding each of these event
    types, such as `.click()` for `.bind('click')`. Descriptions of each event type
    can be found in the description of its shortcut method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'When an event reaches an element, all handlers bound to that event type for
    the element are fired. If there are multiple handlers registered, they will always
    execute in the order in which they were bound. After all handlers have executed,
    the event continues along the normal event propagation path. For a full discussion
    of event propagation, see *Learning jQuery* or the W3C specification at [http://www.w3.org/TR/DOM-Level-2-Event/](http://www.w3.org/TR/DOM-Level-2-Event/).
    A basic usage of `.bind()` is:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code will cause the element with an ID of `foo` to respond to the `click`
    event; when a user clicks inside this element thereafter, the alert will be shown.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '**Event Handlers**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'The `handler` parameter takes a callback function, as shown; within the handler,
    the keyword `this` is set to the DOM element to which the handler is bound. To
    make use of the element in jQuery, it can be passed to the normal `$()` function.
    For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After this code is executed, when the user clicks inside the element with an
    ID of `foo`, its text contents will be shown as an alert.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**The Event Object**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The callback function takes a single parameter; when the handler is called the
    JavaScript event object will be passed through it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The event object is often unneccessary and the parameter is omitted, as sufficient
    context is usually available when the handler is bound to know exactly what needs
    to be done when the handler is triggered. However, at times it becomes necessary
    to gather more information about the user's environment at the time the event
    was initiated. JavaScript provides information such as `.shiftKey` (whether the
    *shift* key was held down at the time), `.offsetX` (the *x* coordinate of the
    mouse cursor within the element), and `.type` (the kind of event this is).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the event object''s attributes and methods are not available on every
    platform. If the event is handled by a jQuery event handler, however, the library
    standardizes certain attributes so that they can be safely used on any browser.
    In particular:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`.target`: This attribute represents the DOM element that initiated the event.
    It is often useful to compare `event.target` to `this` in order to determine if
    the event is being handled due to event bubbling.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pageX`: This attribute contains the *x* coordinate of the mouse cursor relative
    to the left edge of the page.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pageY`: This attribute contains the *y* coordinate of the mouse cursor relative
    to the top edge of the page.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.preventDefault()`: If this method is called, the default action of the event
    will not be triggered. For example, clicked anchors will not take the browser
    to a new URL.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.stopPropagation()`: This method prevents the event from bubbling up the DOM
    tree looking for more event handlers to trigger.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning `false` from a handler is equivalent to calling both `.preventDefault()`
    and `.stopPropagation()` on the event object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the event object in a handler looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the parameter added to the anonymous function. This code will cause a `click`
    on the element with ID `foo` to report the page coordinates of the mouse cursor
    at the time of the click.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Passing Event Data
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The optional *eventData* parameter is not commonly used. When provided, this
    argument allows us to pass additional information to the handler. One handy use
    of this parameter is to work around the issues caused by closures. For example,
    suppose we have two event handlers where both refer to the same external variable:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Because the handlers are closures that both have `message` in their environment,
    both will display the message `Not in the face!` when triggered. The variable''s
    value has changed. To sidestep this, we can pass the message in `eventData`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This time the variable is not referred to directly within the handlers; instead,
    the value is passed in through `eventData`, which fixes the value at the time
    the event is bound. The first handler will now display `Spoon!` while the second
    will alert `Not in the face!`
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: If *eventData* is present, it is the second argument to the `.bind()` method;
    if no additional data needs to be sent to the handler, then the callback is passed
    as the second and final argument.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the `.trigger()` method reference for a way to pass data to a handler at
    the time the event happens rather than when the handler is bound.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: .unbind()
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Removes a previously attached event handler from the elements.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handler: The function that is no longer to be executed'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters (Second Version)
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'event: A JavaScript event object as passed to an event handler'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any handler that has been attached with `.bind()` can be removed with `.unbind()`.
    In the simplest case, with no arguments, `.unbind()` removes all handlers attached
    to the elements:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This version removes the handlers regardless of type. To be more precise, we
    can pass an event type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By specifying the "click" event type, only handlers for that event type will
    be unbound. This approach can still have negative ramifications if other scripts
    might be attaching behaviors to the same element, however. Robust and extensible
    applications typically demand the two-argument version for this reason:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'By naming the handler, we can be assured that no other functions are caught
    in the crossfire. Note that the following will *not* work:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Even though the two functions are identical in content, they are created separately
    and so JavaScript is free to keep them as distinct function objects. To unbind
    a particular handler, we need a reference to that function and not to a different
    one that happens to do the same thing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Using the Event Object
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second form of this method is used when we wish to unbind a handler from
    within itself. For example, suppose we wish to trigger an event handler only three
    times:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The handler in this case must take a parameter, so that we can capture the event
    object and use it to unbind the handler after the third click. The event object
    contains the context necessary for `.unbind()` to know which handler to remove.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: This example is also an illustration of a closure. Since the handler refers
    to the `timesClicked` variable, which is defined outside the function, incrementing
    the variable has an effect even between invocations of the handler.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: .one()
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Attaches a handler to an event for the elements. The handler is executed
    at most once.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'eventData (optional): A map of data that will be passed to the event handler'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handler: A function to execute at the time the event is triggered'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method is identical to `.bind()`, except that the handler is unbound after
    its first invocation. For example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After the code is executed, a click on the element with ID `foo` will display
    the alert. Subsequent clicks will do nothing.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'This code is equivalent to:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In other words, explicitly calling `.unbind()` from within a regularly bound
    handler has exactly the same effect.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: .trigger()
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Executes all handlers attached to an element for an event.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'extraParameters: An array of additional parameters to pass along to the event
    handler'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any event handlers attached with `.bind()` or one of its shortcut methods are
    triggered when the corresponding event occurs. They can be fired manually, however,
    with the `.trigger()` method. A call to `.trigger()` executes the handlers in
    the same order they would be if the event were triggered naturally by the user:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: While `.trigger()` simulates an event activation, complete with a synthesized
    event object, it does not perfectly replicate a naturally‑occurring event. No
    event bubbling occurs, so the `.trigger()` call must be made on the element that
    actually has the event handlers attached. Default behaviors are also not reliably
    invoked, so must be called manually with methods such as `.submit()` on the DOM
    elements themselves.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'When we define a custom event type using the `.bind()` method, the second argument
    to `.trigger()` can become useful. For example, suppose we have bound a handler
    for the custom event to our element instead of the built-in `click` event as we
    did previously:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The event object is always passed as the first parameter to an event handler,
    but if additional parameters are specified during a `.trigger()` call as they
    are here, these parameters will be passed along to the handler as well.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Note the difference between the extra parameters we're passing here and the
    `eventData` parameter to the `.bind()` method. Both are mechanisms for passing
    information to an event handler, but the `extraParameters` argument to `.trigger()`
    allows information to be determined at the time the event is triggered while the
    `eventData` argument to `.bind()` requires the information to be already computed
    at the time the handler is bound.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Document Loading
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events deal with the loading of a page into the browser.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: $()
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Specifies a function to execute when the DOM is fully loaded.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute after the DOM is ready'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While JavaScript provides the `load` event for executing code when a page is
    rendered, this event does not get triggered until all assets such as images have
    been completely received. In most cases, the script can be run as soon as the
    DOM hierarchy has been fully constructed. The handler passed to `.ready()` is
    guaranteed to be executed after the DOM is ready, so this is usually the best
    place to attach all other event handlers and run other jQuery code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: In cases where code relies on loaded assets (for example, if the dimensions
    of an image are required), the code should be placed in a handler for the `load`
    event instead.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: The `.ready()` method is generally incompatible with the `<body onload="">`
    attribute. If `load` must be used, either do not use `.ready()` or use jQuery's
    `.load()` method to attach `load` event handlers to the window or to more specific
    items, like images.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: All three syntaxes provided are equivalent. The `.ready()` method can only be
    called on a jQuery object matching the current document, so the selector can be
    omitted.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.ready()` method is typically used with an anonymous function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With this code in place, an alert will be displayed when the page is loaded.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'When using another JavaScript library, we may wish to call `$.noConflict()`
    to avoid namespace difficulties. When this function is called, the `$` shortcut
    is no longer available, forcing us to write `jQuery` each time we would normally
    write `$`. However, the handler passed to the `.ready()` method can take an argument,
    which is passed the global jQuery object. This means we can rename the object
    within the context of our `.ready()` handler without affecting other code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If `.ready()` is called after the DOM has been initialized, the new handler
    passed in will be executed immediately.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: .load()
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the load JavaScript event.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute when the event is triggered'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('load', handler)`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: The `load` event is sent to an element when it and all sub‑elements have been
    completely loaded. This event can be sent to any element associated with a URL—images,
    scripts, frames, and the body of the document itself.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The event handler can be bound to the image:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now as soon as the image has been loaded, the message is displayed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: In general, it is not necessary to wait for all images to be fully loaded. If
    code can be executed earlier, it is usually best to place it in a handler sent
    to the `.ready()` method.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AJAX module also has a method named `.load()`. Which one is fired depends
    on the set of arguments passed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: .unload()
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the unload JavaScript event.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute when the event is triggered.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('unload', handler)`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The `unload` event is sent to the `window` element when the user has navigated
    away from the page. This could mean one of many things. The user could have clicked
    on a link to leave the page, or typed in a new URL in the address bar. The forward
    and back buttons will trigger the event. Closing the browser window will cause
    the event to be triggered. Even a page reload will first create an `unload` event.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Any `unload` event handler should be bound to the `window` object:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After this code executes, the alert will be displayed whenever the browser leaves
    the current page.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to cancel the `unload` event with `.preventDefault()`. This
    event is available so that scripts can perform cleanup when the user leaves the
    page.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: .error()
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the error JavaScript event.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute when the event is triggered'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('error', handler)`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The `error` event is sent to the same elements that can receive the `load` event.
    It is called if the element was not loaded correctly.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The event handler can be bound to the image:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If the image cannot be loaded (for example, because it is not present at the
    supplied URL), the message is displayed.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'This event may not be correctly fired when the page is served locally. Since
    `error` relies on normal HTTP status codes, it will generally not be triggered
    if the URL uses the `file`: protocol.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Mouse Events
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events are triggered by mouse movement and button presses.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: .mousedown()
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mousedown JavaScript event, or triggers that
    event on an element.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mousedown', handler)` in the first variation,
    and `.trigger('mousedown')` in the second.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: The `mousedown` event is sent to an element when the mouse pointer is over the
    element, and the mouse button is pressed. Any HTML element can receive this event.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After this code executes, clicks on the trigger button will also display the
    message.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: The `mousedown` event is sent when any mouse button is clicked. To act only
    on specific buttons, we can use the event object's `which` property in Mozilla
    browsers (1 for left button, 2 for middle button, 3 for right button), or the
    `button` property in Internet Explorer (1 for left button, 4 for middle button,
    2 for right button). This is primarily useful for ensuring that the primary button
    was used to begin a drag operation; if ignored, strange results can occur when
    the user attempts to use a context menu. While the middle and right buttons can
    be detected with these properties, this is not reliable. In Opera and Safari,
    for example, right mouse button clicks are not detectable by default.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks on an element, then drags the mouse pointer away from it
    or releases the button, this is still counted as a `mousedown` event. This sequence
    of actions is treated as a *canceling* of the button press in most user interfaces,
    so it is usually better to use the `click` event unless we know that the `mousedown`
    event is preferable for a particular situation.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: .mouseup()
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mouseup JavaScript event, or triggers that
    event on an element.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mouseup', handler)` in the first variation,
    and `.trigger('mouseup')` in the second.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The `mouseup` event is sent to an element when the mouse pointer is over the
    element, and the mouse button is released. Any HTML element can receive this event.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks outside an element, drags onto it, and releases the button,
    this is still counted as a `mouseup` event. This sequence of actions is not treated
    as a button press in most user interfaces, so it is usually better to use the
    `click` event unless we know that the `mouseup` event is preferable for a particular
    situation.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: .click()
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the click JavaScript event, or triggers that event
    on an element.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('click', handler)` in the first variation,
    and `.trigger('click')` in the second.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The `click` event is sent to an element when the mouse pointer is over the element,
    and the mouse button is pressed and released. Any HTML element can receive this
    event.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: After this code executes, clicking the trigger button will also display the
    message.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'The `click` event is only triggered after this exact series of events:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: The mouse button is depressed while the pointer is inside the element.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is released while the pointer is inside the element.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is usually the desired sequence before taking an action. If this is not
    required, the `mousedown` or `mouseup` event may be more suitable.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: .dblclick()
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the `dblclick` JavaScript event, or triggers that
    event on an element.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('dblclick', handler)` in the first variation,
    and `.trigger('dblclick')` in the second.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: The `dblclick` event is sent to an element when the element is double‑clicked.
    Any HTML element can receive this event.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now if we double-click on the target button, the message is displayed. We can
    also trigger the event when the second button is clicked:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dblclick` event is only triggered after this exact series of events:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: The mouse button is depressed while the pointer is inside the element.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is released while the pointer is inside the element.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is depressed again while the pointer is inside the element,
    within a time window that is system-dependent.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is released while the pointer is inside the element.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is inadvisable to bind handlers to both the `click` and `dblclick` events
    for the same element. The sequence of events triggered varies from browser to
    browser, with some receiving two `click` events and others only one. If an interface
    that reacts differently to single and double clicks cannot be avoided, then the
    `dblclick` event should be simulated within the `click` handler. We can achieve
    this by saving a timestamp in the handler, and then comparing the current time
    to the saved timestamp on subsequent clicks. If the difference is small enough,
    we can treat the click as a double-click.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: .toggle()
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds two event handlers to the matched elements, to be executed on alternate
    clicks.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handlerEven: A function to execute every even time the element is clicked.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handlerOdd: A function to execute every odd time the element is clicked.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.toggle()` method binds a handler for the `click` event, so the rules outlined
    for the triggering of `click` apply here as well.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The event handlers can be bound to this button:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The first time the button is clicked, the first handler will be executed. The
    second time, the second handler will execute. Subsequent clicks will cycle between
    the two handlers.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The `.toggle()` method is provided for convenience. It is relatively straightforward
    to implement the same behavior by hand, and this can be necessary if the assumptions
    built into `.toggle()` prove limiting. For example, `.toggle()` is not guaranteed
    to work correctly if applied twice to the same element. Since `.toggle()` internally
    uses a `click` handler to do its work, we must unbind `click` to remove a behavior
    attached with `.toggle()`, so other `click` handlers can be caught in the crossfire.
    The implementation also calls `.preventDefault()` on the event, so links will
    not be followed and buttons will not be clicked if `.toggle()` has been called
    on the element.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: .mouseover()
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mouseover JavaScript event, or triggers that
    event on an element.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mouseover', handler)` in the first variation,
    and `.trigger('mouseover')` in the second.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理程序是第一种情况下`.bind('mouseover', handler)`的简写，以及第二种情况下`.trigger('mouseover')`的简写。
- en: The `mouseover` event is sent to an element when the mouse pointer enters the
    element. Any HTML element can receive this event.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针进入元素时，会向元素发送`mouseover`事件。任何 HTML 元素都可以接收到这个事件。
- en: 'For example, consider the HTML:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一下 HTML：
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件处理程序可以绑定到目标按钮上：
- en: '[PRE50]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now when the mouse pointer moves over the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针移过目标按钮时，消息被显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE51]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码执行后，点击**Trigger**按钮也将显示消息。
- en: This event type can cause many headaches due to event bubbling. When the mouse
    pointer moves over a nested element, a `mouseover` event will be sent to that,
    then trickle up the hierarchy. This can trigger our bound `mouseover` handler
    at inopportune times. By using the `.hover()` method instead, we can avoid this
    problem.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件类型可能会由于事件冒泡而引起许多麻烦。当鼠标指针移过嵌套元素时，`mouseover`事件将发送给该元素，然后向上冒泡到层次结构中。这可能会在不适当的时候触发我们绑定的`mouseover`处理程序。通过使用`.hover()`方法，我们可以避免这个问题。
- en: .mouseout()
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .mouseout()
- en: '| Bind an event handler to the **mouseout** JavaScript event, or trigger that
    event on an element.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定一个事件处理程序到**mouseout** JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE52]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handler: 每次事件被触发时要执行的函数'
- en: Return Value
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('mouseout', handler)` in the first variation,
    and `.trigger('mouseout')` in the second.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理程序是第一种情况下`.bind('mouseout', handler)`的简写，以及第二种情况下`.trigger('mouseout')`的简写。
- en: The `mouseout` event is sent to an element when the mouse pointer leaves the
    element. Any HTML element can receive this event.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针离开元素时，会向元素发送`mouseout`事件。任何 HTML 元素都可以接收到这个事件。
- en: 'For example, consider the HTML:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一下 HTML：
- en: '[PRE53]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件处理程序可以绑定到目标按钮上：
- en: '[PRE54]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now when the mouse pointer moves out of the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针移出目标按钮时，消息被显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE55]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码执行后，点击**Trigger**按钮也将显示消息。
- en: This event type can cause many headaches due to event bubbling. When the mouse
    pointer moves out of a nested element, a `mouseout` event will be sent to that,
    then trickle up the hierarchy. This can trigger our bound `mouseout` handler at
    inopportune times. By using the `.hover()` method instead, we can avoid this problem.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件类型可能会由于事件冒泡而引起许多麻烦。当鼠标指针移出嵌套元素时，`mouseout`事件将发送给该元素，然后向上冒泡到层次结构中。这可能会在不适当的时候触发我们绑定的`mouseout`处理程序。通过使用`.hover()`方法，我们可以避免这个问题。
- en: .hover()
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .hover()
- en: '| Binds two event handlers to the matched elements, to be executed when the
    mouse pointer enters and leaves the elements.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定两个事件处理程序到匹配的元素上，在鼠标指针进入和离开元素时执行。'
- en: '[PRE56]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handlerIn: A function to execute when the mouse pointer enters the element'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handlerIn: 鼠标指针进入元素时执行的函数'
- en: 'handlerOut: A function to execute when the mouse pointer leaves the element'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handlerOut: 鼠标指针离开元素时执行的函数'
- en: Return Value
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.hover()` method binds handlers for both `mouseover` and `mouseout` events.
    We can use it to simply apply behavior to an element during the time the mouse
    is within the element. Consider the HTML:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`.hover()`方法绑定了对`mouseover`和`mouseout`事件的处理程序。我们可以使用它简单地在鼠标在元素内部时应用行为。考虑一下
    HTML：'
- en: '[PRE57]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now we can bind handlers to both entering the element and leaving it with a
    single method call:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在一个方法调用中绑定进入元素和离开元素的处理程序：
- en: '[PRE58]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Now the first message will be displayed when the mouse pointer enters the element,
    and the second will be displayed when the mouse pointer leaves.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当鼠标指针进入元素时，第一条消息将被显示，当鼠标指针离开时，第二条消息将被显示。
- en: With the `mouseover` and `mouseout` events, it is common to receive false positives
    due to event bubbling. When the mouse pointer crosses over a nested element, the
    events are generated and will bubble up to the parent element. The `.hover()`
    method incorporates code to check for this situation and do nothing, so we can
    safely ignore this problem when using the `.hover()` shortcut.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: .mousemove()
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mousemove JavaScript event, or triggers that
    event on an element.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mousemove', handler)` in the first variation,
    and `.trigger('mousemove')` in the second.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: The `mousemove` event is sent to an element when the mouse pointer moves inside
    the element. Any HTML element can receive this event.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now when the mouse pointer moves within the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: When tracking the mouse movement, we usually clearly need to know the actual
    position of the mouse pointer. The event object that is passed to the handler
    contains some information about the mouse coordinates. Properties such as `.clientX,
    .offsetX`, and `.pageX` are available, but support for them differs between browsers.
    Fortunately, jQuery normalizes the `.pageX` and `.pageY` attributes so that they
    can be used in all browsers. These attributes provide the `X` and `Y` coordinates
    of the mouse pointer relative to the top‑left corner of the page.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: We need to remember that the `mousemove` event is triggered whenever the mouse
    pointer moves, even for a pixel. This means that hundreds of events can be generated
    over a very small amount of time. If the handler has to do any significant processing,
    or if multiple handlers for the event exist, this can be a serious performance
    drain on the browser. It is important, therefore, to optimize `mousemove` handlers
    as much as possible, and to unbind them as soon as they are no longer needed.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: A common pattern is to bind the `mousemove` handler from within a `mousedown`
    hander, and to unbind it from a corresponding `mouseup` handler. If implementing
    this sequence of events, remember that the `mouseup` event might be sent to a
    different HTML element than the `mousemove` event was. To account for this, the
    `mouseup` handler should typically be bound to an element high up in the DOM tree,
    such as `<body>`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Form Events
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events refer to `<form>` elements and their contents.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: .focus()
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the focus JavaScript event, or triggers that event
    on an element.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '|'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('focus', handler)` in the first variation,
    and `.trigger('focus')` in the second.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: The `focus` event is sent to an element when it gains focus. Originally, this
    event was only applicable to form elements, such as `<input>`. In recent browsers,
    the domain of the event has been extended to include all element types. An element
    can gain focus via keyboard commands, such as the *Tab* key, or by mouse clicks
    on the element.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Elements with focus are usually highlighted in some way by the browser, for
    example with a dotted line surrounding the element. The focus is used to determine
    which element is the first to receive keyboard-related events.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The event handler can be bound to the first input field:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now if we click on the first field, or *Tab* to it from another field, the
    message is displayed. We can trigger the event when the button is clicked:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Triggering the focus on hidden elements causes an error in Internet Explorer.
    Take care to only call `.focus()` without parameters on elements that are visible.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: .blur()
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the blur JavaScript event, or triggers that event
    on an element.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '|'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('blur', handler)` in the first variation,
    and `.trigger('blur')` in the second.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: The `blur` event is sent to an element when it loses focus. Originally, this
    event was only applicable to form elements, such as `<input>`. In recent browsers,
    the domain of the event has been extended to include all element types. An element
    can lose focus via keyboard commands, such as the *Tab* key, or by mouse clicks
    elsewhere on the page.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The event handler can be bound to the first input field:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now if we click on the first field, then click or tab away, the message is
    displayed. We can trigger the event when the button is clicked:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: .change()
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the change JavaScript event, or triggers that event
    on an element.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '|'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('change', handler)` in the first variation,
    and `.trigger('change')` in the second.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: The `change` event is sent to an element when its value changes. This event
    is limited to `<input type="text">` fields, `<textarea>` boxes, and `<select>`
    elements. For select boxes, the event is fired immediately when the user makes
    a selection with the mouse, but for the other element types the event is deferred
    until the element loses focus.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The event handler can be bound to the text input and the select box:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now when the second option is selected from the dropdown, the message is displayed.
    It is also displayed if we change the text in the field and then click away. If
    the field loses focus without the contents having changed, though, the event is
    not triggered. We can trigger the event manually when the button is clicked:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: After this code executes, clicks on the trigger button will also display the
    message. The message will be displayed twice, because the handler has been bound
    to the change event on both of the form elements.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: .select()
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the select JavaScript event, or triggers that event
    on an element.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('select', handler)` in the first variation,
    and `.trigger('select')` in the second.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: The `select` event is sent to an element when the user makes a text selection
    inside it. This event is limited to `<input type="text">` fields and `<textarea>`
    boxes.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The event handler can be bound to the text input:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now when any portion of the text is selected, the message is displayed. Merely
    setting the location of the insertion point will not trigger the event. We can
    trigger the event manually when the button is clicked:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message. In addition, the default `select` action on the field will be fired,
    so the entire text field will be selected.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: .submit()
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the submit JavaScript event, or triggers that event
    on an element.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '|'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('submit', handler)` in the first variation,
    and `.trigger('submit')` in the second.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: The `submit` event is sent to an element when the user is attempting to submit
    a form. It can only be attached to `<form>` elements. Forms can be submitted either
    by clicking an explicit `<input type="submit">` button, or by pressing **Enter**
    when a form element has focus.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on the browser, the *Enter* key may only cause a form submission if
    the form has exactly one text field, or only when there is a submit button present.
    The interface should not rely on a particular behavior for this key unless the
    issue is forced by observing the `keypress` event for presses of the *Enter* key.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The event handler can be bound to the form:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now when the form is submitted, the message is displayed. This happens prior
    to the actual submission, so we can cancel the submit action by calling `.preventDefault()`
    on the event or by returning `false` from our handler. We can trigger the event
    manually when the button is clicked:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message. In addition, the default submit action on the form will be fired,
    so the form will be submitted.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard Events
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events are triggered by the keys on the keyboard.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: .keydown()
  id: totrans-483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the keydown JavaScript event, or triggers that
    event on an element.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '|'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('keydown', handler)` in the first variation,
    and `.trigger('keydown')` in the second.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: The `keydown` event is sent to an element when the user first presses a key
    on the keyboard. It can be attached to any element, but the event is only sent
    to the element that has the focus. Focusable elements can vary between browsers,
    but form elements can always get focus so are reasonable candidates for this event
    type.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The event handler can be bound to the input field:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Now when the insertion point is inside the field and a key is pressed, the
    message is displayed. We can trigger the event manually when the button is clicked:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: After this code executes, clicking the **Triggers** button will also display
    the message.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. Because of event bubbling, all key presses will make their way up the
    DOM to the `document` object unless explicitly stopped.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: The `fix_events.js` plug-in further standardizes the event object across different
    browsers. With this plug-in, we can use `.which` in all browsers to retrieve the
    key code.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: .keypress()
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the keypress JavaScript event, or triggers that
    event on an element.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '|'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('keypress', handler)` in the first variation,
    and `.trigger('keypress')` in the second.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: The `keypress` event is sent to an element when the browser registers keyboard
    input. This is similar to the `keydown` event, except in the case of key repeats.
    If the user presses and holds a key, a `keydown` event is triggered once, but
    separate `keypress` events are triggered for each inserted character. In addition,
    modifier keys (such as *Shift*) cause `keydown` events but not `keypress` events.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: A `keypress` event handler can be attached to any element, but the event is
    only sent to the element that has the focus. Focusable elements can vary between
    browsers, but form elements can always get focus so are reasonable candidates
    for this event type.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The event handler can be bound to the input field:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Now when the insertion point is inside the field and a key is pressed, the
    message is displayed. The message repeats if the key is held down. We can trigger
    the event manually when the button is clicked:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: After this code executes, clicks on the **Trigger** button will also display
    the message.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. All key presses will make their way up the DOM to the `document` object
    unless explicitly stopped because of event bubbling.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: Note that `keydown` and `keyup` provide a code indicating which key is pressed,
    while `keypress` indicates which character was entered. For example, a lowercase
    "a" will be reported as 65 by `keydown` and `keyup`, but as 97 by `keypress`.
    An uppercase "A" is reported as 97 by all events. This can be the primary motivator
    for deciding which event type to use.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: .keyup()
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the keyup JavaScript event, or triggers that event
    on an element.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '|'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('keyup', handler)` in the first variation,
    and `.trigger('keyup')` in the second.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: The `keyup` event is sent to an element when the user releases a key on the
    keyboard. It can be attached to any element, but the event is only sent to the
    element that has the focus. Focusable elements can vary between browsers, but
    form elements can always get focus so are reasonable candidates for this event
    type.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The event handler can be bound to the input field:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Now when the insertion point is inside the field and a key is pressed and released,
    the message is displayed. We can trigger the event manually when the button is
    clicked:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. All key presses will make their way up the DOM to the `document` object
    unless explicitly stopped because of event bubbling.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: Browser Events
  id: totrans-546
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events are related to the entire browser window.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: .resize()
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the resize JavaScript event, or triggers that event
    on an element.'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '|'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  id: totrans-552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('resize', handler)` in the first variation,
    and `.trigger('resize')` in the second.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resize` event is sent to the `window` element when the size of the browser
    window changes:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Now whenever the browser window's size is changed, the message is displayed.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: The code in a `resize` handler should never rely on the number of times the
    handler is called. Depending on implementation, `resize` events can be sent continuously
    as the resizing is in progress (typical behavior in Internet Explorer), or only
    once at the end of the resize operation (typical behavior in FireFox).
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: .scroll()
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the scroll JavaScript event, or triggers that event
    on an element.'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '|'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('scroll', handler)` in the first variation,
    and `.trigger('scroll')` in the second.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: 'The `scroll` event is sent to an element when the user scrolls to a different
    place in the element. It applies not only to `window` objects, but also to scrollable
    frames and elements with the `overflow: scroll` CSS property.'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The style definition is present to make the target element small enough to
    be scrollable. The `scroll` event handler can be bound to this element:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 样式定义存在是为了使目标元素足够小，以便滚动。可以将`scroll`事件处理程序绑定到此元素上：
- en: '[PRE99]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Now when the user scrolls the text up or down, the message is displayed. We
    can trigger the event manually when the button is clicked:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户将文本向上或向下滚动时，消息会被显示出来。当点击按钮时，我们可以手动触发事件：
- en: '[PRE100]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击**触发器**按钮也会显示消息。
- en: A `scroll` event is sent whenever the element's scroll position changes, regardless
    of the cause. A mouse click or drag on the scroll bar, dragging inside the element,
    pressing the arrow keys, or using the mouse scroll wheel could cause this event.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 每当元素的滚动位置发生变化时，都会发送`scroll`事件，而不管原因是什么。鼠标点击或拖动滚动条，在元素内拖动，按箭头键，或使用鼠标滚轮都可能引起此事件。
