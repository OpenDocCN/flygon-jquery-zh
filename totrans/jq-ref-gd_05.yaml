- en: Chapter 5. Event Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Woman, I am bound to you
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What will I do?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"The Rope Song"'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we'll closely examine each of the available event methods in
    turn. These methods are used to register behaviors to take effect when the user
    interacts with the browser, and to further manipulate those registered behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Event Handler Attachment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following methods are the building blocks of jQuery's event handling module.
  prefs: []
  type: TYPE_NORMAL
- en: .bind()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Attaches a handler to an event for the elements'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'eventData (optional): A map of data that will be passed to the event handler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.bind()` method is the primary means of attaching behavior to a document.
    All JavaScript event types are allowed for *eventType*; the following are cross‑platform
    and recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`change`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`click`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dblclick`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`focus`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keydown`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keypress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousemove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scroll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`submit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unload`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jQuery library provides shortcut methods for binding each of these event
    types, such as `.click()` for `.bind('click')`. Descriptions of each event type
    can be found in the description of its shortcut method.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an event reaches an element, all handlers bound to that event type for
    the element are fired. If there are multiple handlers registered, they will always
    execute in the order in which they were bound. After all handlers have executed,
    the event continues along the normal event propagation path. For a full discussion
    of event propagation, see *Learning jQuery* or the W3C specification at [http://www.w3.org/TR/DOM-Level-2-Event/](http://www.w3.org/TR/DOM-Level-2-Event/).
    A basic usage of `.bind()` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code will cause the element with an ID of `foo` to respond to the `click`
    event; when a user clicks inside this element thereafter, the alert will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: '**Event Handlers**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `handler` parameter takes a callback function, as shown; within the handler,
    the keyword `this` is set to the DOM element to which the handler is bound. To
    make use of the element in jQuery, it can be passed to the normal `$()` function.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After this code is executed, when the user clicks inside the element with an
    ID of `foo`, its text contents will be shown as an alert.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Event Object**'
  prefs: []
  type: TYPE_NORMAL
- en: The callback function takes a single parameter; when the handler is called the
    JavaScript event object will be passed through it.
  prefs: []
  type: TYPE_NORMAL
- en: The event object is often unneccessary and the parameter is omitted, as sufficient
    context is usually available when the handler is bound to know exactly what needs
    to be done when the handler is triggered. However, at times it becomes necessary
    to gather more information about the user's environment at the time the event
    was initiated. JavaScript provides information such as `.shiftKey` (whether the
    *shift* key was held down at the time), `.offsetX` (the *x* coordinate of the
    mouse cursor within the element), and `.type` (the kind of event this is).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the event object''s attributes and methods are not available on every
    platform. If the event is handled by a jQuery event handler, however, the library
    standardizes certain attributes so that they can be safely used on any browser.
    In particular:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.target`: This attribute represents the DOM element that initiated the event.
    It is often useful to compare `event.target` to `this` in order to determine if
    the event is being handled due to event bubbling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pageX`: This attribute contains the *x* coordinate of the mouse cursor relative
    to the left edge of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pageY`: This attribute contains the *y* coordinate of the mouse cursor relative
    to the top edge of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.preventDefault()`: If this method is called, the default action of the event
    will not be triggered. For example, clicked anchors will not take the browser
    to a new URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.stopPropagation()`: This method prevents the event from bubbling up the DOM
    tree looking for more event handlers to trigger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning `false` from a handler is equivalent to calling both `.preventDefault()`
    and `.stopPropagation()` on the event object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the event object in a handler looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note the parameter added to the anonymous function. This code will cause a `click`
    on the element with ID `foo` to report the page coordinates of the mouse cursor
    at the time of the click.
  prefs: []
  type: TYPE_NORMAL
- en: Passing Event Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The optional *eventData* parameter is not commonly used. When provided, this
    argument allows us to pass additional information to the handler. One handy use
    of this parameter is to work around the issues caused by closures. For example,
    suppose we have two event handlers where both refer to the same external variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the handlers are closures that both have `message` in their environment,
    both will display the message `Not in the face!` when triggered. The variable''s
    value has changed. To sidestep this, we can pass the message in `eventData`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This time the variable is not referred to directly within the handlers; instead,
    the value is passed in through `eventData`, which fixes the value at the time
    the event is bound. The first handler will now display `Spoon!` while the second
    will alert `Not in the face!`
  prefs: []
  type: TYPE_NORMAL
- en: If *eventData* is present, it is the second argument to the `.bind()` method;
    if no additional data needs to be sent to the handler, then the callback is passed
    as the second and final argument.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the `.trigger()` method reference for a way to pass data to a handler at
    the time the event happens rather than when the handler is bound.
  prefs: []
  type: TYPE_NORMAL
- en: .unbind()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Removes a previously attached event handler from the elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handler: The function that is no longer to be executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters (Second Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'event: A JavaScript event object as passed to an event handler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any handler that has been attached with `.bind()` can be removed with `.unbind()`.
    In the simplest case, with no arguments, `.unbind()` removes all handlers attached
    to the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This version removes the handlers regardless of type. To be more precise, we
    can pass an event type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By specifying the "click" event type, only handlers for that event type will
    be unbound. This approach can still have negative ramifications if other scripts
    might be attaching behaviors to the same element, however. Robust and extensible
    applications typically demand the two-argument version for this reason:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'By naming the handler, we can be assured that no other functions are caught
    in the crossfire. Note that the following will *not* work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Even though the two functions are identical in content, they are created separately
    and so JavaScript is free to keep them as distinct function objects. To unbind
    a particular handler, we need a reference to that function and not to a different
    one that happens to do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Event Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second form of this method is used when we wish to unbind a handler from
    within itself. For example, suppose we wish to trigger an event handler only three
    times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The handler in this case must take a parameter, so that we can capture the event
    object and use it to unbind the handler after the third click. The event object
    contains the context necessary for `.unbind()` to know which handler to remove.
  prefs: []
  type: TYPE_NORMAL
- en: This example is also an illustration of a closure. Since the handler refers
    to the `timesClicked` variable, which is defined outside the function, incrementing
    the variable has an effect even between invocations of the handler.
  prefs: []
  type: TYPE_NORMAL
- en: .one()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Attaches a handler to an event for the elements. The handler is executed
    at most once.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'eventData (optional): A map of data that will be passed to the event handler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handler: A function to execute at the time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method is identical to `.bind()`, except that the handler is unbound after
    its first invocation. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After the code is executed, a click on the element with ID `foo` will display
    the alert. Subsequent clicks will do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In other words, explicitly calling `.unbind()` from within a regularly bound
    handler has exactly the same effect.
  prefs: []
  type: TYPE_NORMAL
- en: .trigger()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Executes all handlers attached to an element for an event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'extraParameters: An array of additional parameters to pass along to the event
    handler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any event handlers attached with `.bind()` or one of its shortcut methods are
    triggered when the corresponding event occurs. They can be fired manually, however,
    with the `.trigger()` method. A call to `.trigger()` executes the handlers in
    the same order they would be if the event were triggered naturally by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: While `.trigger()` simulates an event activation, complete with a synthesized
    event object, it does not perfectly replicate a naturally‑occurring event. No
    event bubbling occurs, so the `.trigger()` call must be made on the element that
    actually has the event handlers attached. Default behaviors are also not reliably
    invoked, so must be called manually with methods such as `.submit()` on the DOM
    elements themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we define a custom event type using the `.bind()` method, the second argument
    to `.trigger()` can become useful. For example, suppose we have bound a handler
    for the custom event to our element instead of the built-in `click` event as we
    did previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The event object is always passed as the first parameter to an event handler,
    but if additional parameters are specified during a `.trigger()` call as they
    are here, these parameters will be passed along to the handler as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note the difference between the extra parameters we're passing here and the
    `eventData` parameter to the `.bind()` method. Both are mechanisms for passing
    information to an event handler, but the `extraParameters` argument to `.trigger()`
    allows information to be determined at the time the event is triggered while the
    `eventData` argument to `.bind()` requires the information to be already computed
    at the time the handler is bound.
  prefs: []
  type: TYPE_NORMAL
- en: Document Loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events deal with the loading of a page into the browser.
  prefs: []
  type: TYPE_NORMAL
- en: $()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Specifies a function to execute when the DOM is fully loaded.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute after the DOM is ready'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While JavaScript provides the `load` event for executing code when a page is
    rendered, this event does not get triggered until all assets such as images have
    been completely received. In most cases, the script can be run as soon as the
    DOM hierarchy has been fully constructed. The handler passed to `.ready()` is
    guaranteed to be executed after the DOM is ready, so this is usually the best
    place to attach all other event handlers and run other jQuery code.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where code relies on loaded assets (for example, if the dimensions
    of an image are required), the code should be placed in a handler for the `load`
    event instead.
  prefs: []
  type: TYPE_NORMAL
- en: The `.ready()` method is generally incompatible with the `<body onload="">`
    attribute. If `load` must be used, either do not use `.ready()` or use jQuery's
    `.load()` method to attach `load` event handlers to the window or to more specific
    items, like images.
  prefs: []
  type: TYPE_NORMAL
- en: All three syntaxes provided are equivalent. The `.ready()` method can only be
    called on a jQuery object matching the current document, so the selector can be
    omitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.ready()` method is typically used with an anonymous function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With this code in place, an alert will be displayed when the page is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using another JavaScript library, we may wish to call `$.noConflict()`
    to avoid namespace difficulties. When this function is called, the `$` shortcut
    is no longer available, forcing us to write `jQuery` each time we would normally
    write `$`. However, the handler passed to the `.ready()` method can take an argument,
    which is passed the global jQuery object. This means we can rename the object
    within the context of our `.ready()` handler without affecting other code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If `.ready()` is called after the DOM has been initialized, the new handler
    passed in will be executed immediately.
  prefs: []
  type: TYPE_NORMAL
- en: .load()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the load JavaScript event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute when the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('load', handler)`.
  prefs: []
  type: TYPE_NORMAL
- en: The `load` event is sent to an element when it and all sub‑elements have been
    completely loaded. This event can be sent to any element associated with a URL—images,
    scripts, frames, and the body of the document itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now as soon as the image has been loaded, the message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In general, it is not necessary to wait for all images to be fully loaded. If
    code can be executed earlier, it is usually best to place it in a handler sent
    to the `.ready()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AJAX module also has a method named `.load()`. Which one is fired depends
    on the set of arguments passed.
  prefs: []
  type: TYPE_NORMAL
- en: .unload()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the unload JavaScript event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute when the event is triggered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('unload', handler)`.
  prefs: []
  type: TYPE_NORMAL
- en: The `unload` event is sent to the `window` element when the user has navigated
    away from the page. This could mean one of many things. The user could have clicked
    on a link to leave the page, or typed in a new URL in the address bar. The forward
    and back buttons will trigger the event. Closing the browser window will cause
    the event to be triggered. Even a page reload will first create an `unload` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any `unload` event handler should be bound to the `window` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, the alert will be displayed whenever the browser leaves
    the current page.
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to cancel the `unload` event with `.preventDefault()`. This
    event is available so that scripts can perform cleanup when the user leaves the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: .error()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the error JavaScript event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute when the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('error', handler)`.
  prefs: []
  type: TYPE_NORMAL
- en: The `error` event is sent to the same elements that can receive the `load` event.
    It is called if the element was not loaded correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If the image cannot be loaded (for example, because it is not present at the
    supplied URL), the message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event may not be correctly fired when the page is served locally. Since
    `error` relies on normal HTTP status codes, it will generally not be triggered
    if the URL uses the `file`: protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: Mouse Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events are triggered by mouse movement and button presses.
  prefs: []
  type: TYPE_NORMAL
- en: .mousedown()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mousedown JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mousedown', handler)` in the first variation,
    and `.trigger('mousedown')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `mousedown` event is sent to an element when the mouse pointer is over the
    element, and the mouse button is pressed. Any HTML element can receive this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicks on the trigger button will also display the
    message.
  prefs: []
  type: TYPE_NORMAL
- en: The `mousedown` event is sent when any mouse button is clicked. To act only
    on specific buttons, we can use the event object's `which` property in Mozilla
    browsers (1 for left button, 2 for middle button, 3 for right button), or the
    `button` property in Internet Explorer (1 for left button, 4 for middle button,
    2 for right button). This is primarily useful for ensuring that the primary button
    was used to begin a drag operation; if ignored, strange results can occur when
    the user attempts to use a context menu. While the middle and right buttons can
    be detected with these properties, this is not reliable. In Opera and Safari,
    for example, right mouse button clicks are not detectable by default.
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks on an element, then drags the mouse pointer away from it
    or releases the button, this is still counted as a `mousedown` event. This sequence
    of actions is treated as a *canceling* of the button press in most user interfaces,
    so it is usually better to use the `click` event unless we know that the `mousedown`
    event is preferable for a particular situation.
  prefs: []
  type: TYPE_NORMAL
- en: .mouseup()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mouseup JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mouseup', handler)` in the first variation,
    and `.trigger('mouseup')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `mouseup` event is sent to an element when the mouse pointer is over the
    element, and the mouse button is released. Any HTML element can receive this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: If the user clicks outside an element, drags onto it, and releases the button,
    this is still counted as a `mouseup` event. This sequence of actions is not treated
    as a button press in most user interfaces, so it is usually better to use the
    `click` event unless we know that the `mouseup` event is preferable for a particular
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: .click()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the click JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('click', handler)` in the first variation,
    and `.trigger('click')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `click` event is sent to an element when the mouse pointer is over the element,
    and the mouse button is pressed and released. Any HTML element can receive this
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the trigger button will also display the
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `click` event is only triggered after this exact series of events:'
  prefs: []
  type: TYPE_NORMAL
- en: The mouse button is depressed while the pointer is inside the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is released while the pointer is inside the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is usually the desired sequence before taking an action. If this is not
    required, the `mousedown` or `mouseup` event may be more suitable.
  prefs: []
  type: TYPE_NORMAL
- en: .dblclick()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the `dblclick` JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('dblclick', handler)` in the first variation,
    and `.trigger('dblclick')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `dblclick` event is sent to an element when the element is double‑clicked.
    Any HTML element can receive this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we double-click on the target button, the message is displayed. We can
    also trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dblclick` event is only triggered after this exact series of events:'
  prefs: []
  type: TYPE_NORMAL
- en: The mouse button is depressed while the pointer is inside the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is released while the pointer is inside the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is depressed again while the pointer is inside the element,
    within a time window that is system-dependent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse button is released while the pointer is inside the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is inadvisable to bind handlers to both the `click` and `dblclick` events
    for the same element. The sequence of events triggered varies from browser to
    browser, with some receiving two `click` events and others only one. If an interface
    that reacts differently to single and double clicks cannot be avoided, then the
    `dblclick` event should be simulated within the `click` handler. We can achieve
    this by saving a timestamp in the handler, and then comparing the current time
    to the saved timestamp on subsequent clicks. If the difference is small enough,
    we can treat the click as a double-click.
  prefs: []
  type: TYPE_NORMAL
- en: .toggle()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds two event handlers to the matched elements, to be executed on alternate
    clicks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handlerEven: A function to execute every even time the element is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handlerOdd: A function to execute every odd time the element is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.toggle()` method binds a handler for the `click` event, so the rules outlined
    for the triggering of `click` apply here as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handlers can be bound to this button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The first time the button is clicked, the first handler will be executed. The
    second time, the second handler will execute. Subsequent clicks will cycle between
    the two handlers.
  prefs: []
  type: TYPE_NORMAL
- en: The `.toggle()` method is provided for convenience. It is relatively straightforward
    to implement the same behavior by hand, and this can be necessary if the assumptions
    built into `.toggle()` prove limiting. For example, `.toggle()` is not guaranteed
    to work correctly if applied twice to the same element. Since `.toggle()` internally
    uses a `click` handler to do its work, we must unbind `click` to remove a behavior
    attached with `.toggle()`, so other `click` handlers can be caught in the crossfire.
    The implementation also calls `.preventDefault()` on the event, so links will
    not be followed and buttons will not be clicked if `.toggle()` has been called
    on the element.
  prefs: []
  type: TYPE_NORMAL
- en: .mouseover()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mouseover JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mouseover', handler)` in the first variation,
    and `.trigger('mouseover')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `mouseover` event is sent to an element when the mouse pointer enters the
    element. Any HTML element can receive this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the mouse pointer moves over the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: This event type can cause many headaches due to event bubbling. When the mouse
    pointer moves over a nested element, a `mouseover` event will be sent to that,
    then trickle up the hierarchy. This can trigger our bound `mouseover` handler
    at inopportune times. By using the `.hover()` method instead, we can avoid this
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: .mouseout()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Bind an event handler to the **mouseout** JavaScript event, or trigger that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mouseout', handler)` in the first variation,
    and `.trigger('mouseout')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `mouseout` event is sent to an element when the mouse pointer leaves the
    element. Any HTML element can receive this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the mouse pointer moves out of the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: This event type can cause many headaches due to event bubbling. When the mouse
    pointer moves out of a nested element, a `mouseout` event will be sent to that,
    then trickle up the hierarchy. This can trigger our bound `mouseout` handler at
    inopportune times. By using the `.hover()` method instead, we can avoid this problem.
  prefs: []
  type: TYPE_NORMAL
- en: .hover()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds two event handlers to the matched elements, to be executed when the
    mouse pointer enters and leaves the elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handlerIn: A function to execute when the mouse pointer enters the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'handlerOut: A function to execute when the mouse pointer leaves the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.hover()` method binds handlers for both `mouseover` and `mouseout` events.
    We can use it to simply apply behavior to an element during the time the mouse
    is within the element. Consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can bind handlers to both entering the element and leaving it with a
    single method call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Now the first message will be displayed when the mouse pointer enters the element,
    and the second will be displayed when the mouse pointer leaves.
  prefs: []
  type: TYPE_NORMAL
- en: With the `mouseover` and `mouseout` events, it is common to receive false positives
    due to event bubbling. When the mouse pointer crosses over a nested element, the
    events are generated and will bubble up to the parent element. The `.hover()`
    method incorporates code to check for this situation and do nothing, so we can
    safely ignore this problem when using the `.hover()` shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: .mousemove()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the mousemove JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('mousemove', handler)` in the first variation,
    and `.trigger('mousemove')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `mousemove` event is sent to an element when the mouse pointer moves inside
    the element. Any HTML element can receive this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the target button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the mouse pointer moves within the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: When tracking the mouse movement, we usually clearly need to know the actual
    position of the mouse pointer. The event object that is passed to the handler
    contains some information about the mouse coordinates. Properties such as `.clientX,
    .offsetX`, and `.pageX` are available, but support for them differs between browsers.
    Fortunately, jQuery normalizes the `.pageX` and `.pageY` attributes so that they
    can be used in all browsers. These attributes provide the `X` and `Y` coordinates
    of the mouse pointer relative to the top‑left corner of the page.
  prefs: []
  type: TYPE_NORMAL
- en: We need to remember that the `mousemove` event is triggered whenever the mouse
    pointer moves, even for a pixel. This means that hundreds of events can be generated
    over a very small amount of time. If the handler has to do any significant processing,
    or if multiple handlers for the event exist, this can be a serious performance
    drain on the browser. It is important, therefore, to optimize `mousemove` handlers
    as much as possible, and to unbind them as soon as they are no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: A common pattern is to bind the `mousemove` handler from within a `mousedown`
    hander, and to unbind it from a corresponding `mouseup` handler. If implementing
    this sequence of events, remember that the `mouseup` event might be sent to a
    different HTML element than the `mousemove` event was. To account for this, the
    `mouseup` handler should typically be bound to an element high up in the DOM tree,
    such as `<body>`.
  prefs: []
  type: TYPE_NORMAL
- en: Form Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events refer to `<form>` elements and their contents.
  prefs: []
  type: TYPE_NORMAL
- en: .focus()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the focus JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('focus', handler)` in the first variation,
    and `.trigger('focus')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `focus` event is sent to an element when it gains focus. Originally, this
    event was only applicable to form elements, such as `<input>`. In recent browsers,
    the domain of the event has been extended to include all element types. An element
    can gain focus via keyboard commands, such as the *Tab* key, or by mouse clicks
    on the element.
  prefs: []
  type: TYPE_NORMAL
- en: Elements with focus are usually highlighted in some way by the browser, for
    example with a dotted line surrounding the element. The focus is used to determine
    which element is the first to receive keyboard-related events.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the first input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we click on the first field, or *Tab* to it from another field, the
    message is displayed. We can trigger the event when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Triggering the focus on hidden elements causes an error in Internet Explorer.
    Take care to only call `.focus()` without parameters on elements that are visible.
  prefs: []
  type: TYPE_NORMAL
- en: .blur()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the blur JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('blur', handler)` in the first variation,
    and `.trigger('blur')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `blur` event is sent to an element when it loses focus. Originally, this
    event was only applicable to form elements, such as `<input>`. In recent browsers,
    the domain of the event has been extended to include all element types. An element
    can lose focus via keyboard commands, such as the *Tab* key, or by mouse clicks
    elsewhere on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the first input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we click on the first field, then click or tab away, the message is
    displayed. We can trigger the event when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: .change()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the change JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('change', handler)` in the first variation,
    and `.trigger('change')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `change` event is sent to an element when its value changes. This event
    is limited to `<input type="text">` fields, `<textarea>` boxes, and `<select>`
    elements. For select boxes, the event is fired immediately when the user makes
    a selection with the mouse, but for the other element types the event is deferred
    until the element loses focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the text input and the select box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the second option is selected from the dropdown, the message is displayed.
    It is also displayed if we change the text in the field and then click away. If
    the field loses focus without the contents having changed, though, the event is
    not triggered. We can trigger the event manually when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicks on the trigger button will also display the
    message. The message will be displayed twice, because the handler has been bound
    to the change event on both of the form elements.
  prefs: []
  type: TYPE_NORMAL
- en: .select()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the select JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('select', handler)` in the first variation,
    and `.trigger('select')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `select` event is sent to an element when the user makes a text selection
    inside it. This event is limited to `<input type="text">` fields and `<textarea>`
    boxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the text input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when any portion of the text is selected, the message is displayed. Merely
    setting the location of the insertion point will not trigger the event. We can
    trigger the event manually when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message. In addition, the default `select` action on the field will be fired,
    so the entire text field will be selected.
  prefs: []
  type: TYPE_NORMAL
- en: .submit()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the submit JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('submit', handler)` in the first variation,
    and `.trigger('submit')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `submit` event is sent to an element when the user is attempting to submit
    a form. It can only be attached to `<form>` elements. Forms can be submitted either
    by clicking an explicit `<input type="submit">` button, or by pressing **Enter**
    when a form element has focus.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on the browser, the *Enter* key may only cause a form submission if
    the form has exactly one text field, or only when there is a submit button present.
    The interface should not rely on a particular behavior for this key unless the
    issue is forced by observing the `keypress` event for presses of the *Enter* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the form is submitted, the message is displayed. This happens prior
    to the actual submission, so we can cancel the submit action by calling `.preventDefault()`
    on the event or by returning `false` from our handler. We can trigger the event
    manually when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message. In addition, the default submit action on the form will be fired,
    so the form will be submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events are triggered by the keys on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: .keydown()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the keydown JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('keydown', handler)` in the first variation,
    and `.trigger('keydown')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `keydown` event is sent to an element when the user first presses a key
    on the keyboard. It can be attached to any element, but the event is only sent
    to the element that has the focus. Focusable elements can vary between browsers,
    but form elements can always get focus so are reasonable candidates for this event
    type.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the insertion point is inside the field and a key is pressed, the
    message is displayed. We can trigger the event manually when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Triggers** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. Because of event bubbling, all key presses will make their way up the
    DOM to the `document` object unless explicitly stopped.
  prefs: []
  type: TYPE_NORMAL
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: The `fix_events.js` plug-in further standardizes the event object across different
    browsers. With this plug-in, we can use `.which` in all browsers to retrieve the
    key code.
  prefs: []
  type: TYPE_NORMAL
- en: .keypress()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the keypress JavaScript event, or triggers that
    event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('keypress', handler)` in the first variation,
    and `.trigger('keypress')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `keypress` event is sent to an element when the browser registers keyboard
    input. This is similar to the `keydown` event, except in the case of key repeats.
    If the user presses and holds a key, a `keydown` event is triggered once, but
    separate `keypress` events are triggered for each inserted character. In addition,
    modifier keys (such as *Shift*) cause `keydown` events but not `keypress` events.
  prefs: []
  type: TYPE_NORMAL
- en: A `keypress` event handler can be attached to any element, but the event is
    only sent to the element that has the focus. Focusable elements can vary between
    browsers, but form elements can always get focus so are reasonable candidates
    for this event type.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the insertion point is inside the field and a key is pressed, the
    message is displayed. The message repeats if the key is held down. We can trigger
    the event manually when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicks on the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. All key presses will make their way up the DOM to the `document` object
    unless explicitly stopped because of event bubbling.
  prefs: []
  type: TYPE_NORMAL
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `keydown` and `keyup` provide a code indicating which key is pressed,
    while `keypress` indicates which character was entered. For example, a lowercase
    "a" will be reported as 65 by `keydown` and `keyup`, but as 97 by `keypress`.
    An uppercase "A" is reported as 97 by all events. This can be the primary motivator
    for deciding which event type to use.
  prefs: []
  type: TYPE_NORMAL
- en: .keyup()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the keyup JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('keyup', handler)` in the first variation,
    and `.trigger('keyup')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: The `keyup` event is sent to an element when the user releases a key on the
    keyboard. It can be attached to any element, but the event is only sent to the
    element that has the focus. Focusable elements can vary between browsers, but
    form elements can always get focus so are reasonable candidates for this event
    type.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler can be bound to the input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the insertion point is inside the field and a key is pressed and released,
    the message is displayed. We can trigger the event manually when the button is
    clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. All key presses will make their way up the DOM to the `document` object
    unless explicitly stopped because of event bubbling.
  prefs: []
  type: TYPE_NORMAL
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: Browser Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These events are related to the entire browser window.
  prefs: []
  type: TYPE_NORMAL
- en: .resize()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the resize JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('resize', handler)` in the first variation,
    and `.trigger('resize')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resize` event is sent to the `window` element when the size of the browser
    window changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Now whenever the browser window's size is changed, the message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The code in a `resize` handler should never rely on the number of times the
    handler is called. Depending on implementation, `resize` events can be sent continuously
    as the resizing is in progress (typical behavior in Internet Explorer), or only
    once at the end of the resize operation (typical behavior in FireFox).
  prefs: []
  type: TYPE_NORMAL
- en: .scroll()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Binds an event handler to the scroll JavaScript event, or triggers that event
    on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'handler: A function to execute each time the event is triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This handler is a shortcut for `.bind('scroll', handler)` in the first variation,
    and `.trigger('scroll')` in the second.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `scroll` event is sent to an element when the user scrolls to a different
    place in the element. It applies not only to `window` objects, but also to scrollable
    frames and elements with the `overflow: scroll` CSS property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'The style definition is present to make the target element small enough to
    be scrollable. The `scroll` event handler can be bound to this element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the user scrolls the text up or down, the message is displayed. We
    can trigger the event manually when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: A `scroll` event is sent whenever the element's scroll position changes, regardless
    of the cause. A mouse click or drag on the scroll bar, dragging inside the element,
    pressing the arrow keys, or using the mouse scroll wheel could cause this event.
  prefs: []
  type: TYPE_NORMAL
