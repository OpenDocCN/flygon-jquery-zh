- en: Chapter 10. Dimensions Plug-In
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The symbols we believe in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sometimes turn inside out
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reshaping each dimension
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We're so sure about
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Plain Truth"'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The **Dimensions** plug-in, co-authored by Paul Bakaus and Brandon Aaron, helps
    bridge the gap between the CSS box model and developers' need to accurately measure
    the height and the width of elements in a document. It also measures with pixel
    accuracy the top and left offsets of elements, no matter where they are found
    on the page. In this chapter, we'll explore this plug-in's various methods and
    discuss their options.
  prefs: []
  type: TYPE_NORMAL
- en: Size Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to determining the dimensions of the browser window or the document,
    the following size methods form a powerful set of tools for identifying an element's
    height and width, whether we want to take into account the element's padding and
    border sizes or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be using the same basic HTML for each of the examples that follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: .height()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the height of the `document` or `window` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the height in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.height` method simply uses the jQuery core method of the same name when
    applied to elements. Dimensions extends the use of `.height()` to the browser
    `window` and the `document` as well.
  prefs: []
  type: TYPE_NORMAL
- en: '`$(window).height()` returns the pixel height of the browser window. If there
    is a horizontal scrollbar, it is not included in the height calculation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(document).height()` returns the pixel height of the document. If the document
    has a greater height than the viewable area—in which case a vertical scrollbar
    is present—`$(document).height()` calculates the total height, including both
    the visible and the hidden parts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image illustrates the difference between `$(document).height()`
    and `$(window).height()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Discussion.height()about](img/3810_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For information on using the `.height` method with elements on the page, see
    [Chapter 4](ch04.html "Chapter 4. DOM Manipulation Methods").
  prefs: []
  type: TYPE_NORMAL
- en: .width()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the width of the `document` or `window` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the width in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.width` method, like its `.height()` counterpart, simply uses the jQuery
    core method of the same name when it is applied to elements. However, Dimensions
    extends `.width()` so that we can apply it to the `document` and the browser `window`,
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '`$(document).width()` returns the pixel width of the document alone. If there
    is a vertical scrollbar, `$(document).width()` does not include it in the calculation.
    If the document has a greater width than the viewable area—in which case a horizontal
    scrollbar is present—`$(document).width()` calcuflates the total height, including
    both the visible and the hidden part of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(window).width()` returns the pixel width of the browser. If there is a vertical
    scrollbar, it is not included in the width calculation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image illustrates the difference between `$(document).width()`
    and `$(window).width()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description.width()about](img/3810_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For information on using the `.width` method with elements on the page, see
    [Chapter 4](ch04.html "Chapter 4. DOM Manipulation Methods").
  prefs: []
  type: TYPE_NORMAL
- en: .innerHeight()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the computed inner height for the first element in the set of matched
    elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the inner height of the element, in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.innerHeight` method differs from the basic `.height()` in that it calculates
    the height of the top and bottom padding in addition to the element itself. It
    does not, however, include the border or margin in the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: If used with `document` or `window, .innerHeight()` calls the Dimensions `.height`
    method to return the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given an element with a height of `200px`, font size of `12px`, and top and
    bottom padding of `1em, .innerHeight()` returns `224` (pixels), as can be seen
    in the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description.innerHeight()about](img/3810_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .innerWidth()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the computed inner width for the first element in the set of matched
    elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the inner width of the element, in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.innerWidth` method differs from the basic `.width()` in that it calculates
    the width of the left and right padding in addition to the element itself. It
    does not, however, include the border or margin in the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: If used with `document` or `window, .innerWidth()` calls the Dimensions `.width`
    method to return the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given an element with a width of `200px`, font size of `12px`, and left and
    right padding of `1em, .innerWidth()` returns `224` (pixels), as can be seen in
    the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description.innerWidth()about](img/3810_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .outerHeight()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the computed outer height of the first element in the set of matched
    elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the outer height of the element, in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.outerHeight` method differs from the basic `.height()` in that it calculates
    the height of the top and bottom padding and the top and bottom borders in addition
    to the element itself. Like `.height()` and `.innerHeight()`, however, it does
    not include the element's margins in the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: If used with `document` or `window, .outerHeight()` calls the Dimensions `.height`
    method to return the value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Discussion.outerHeight()about](img/3810_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .outerWidth()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the computed outer width for the first element in the set of matched
    elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the outer width of the element, in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.outerWidth` method differs from the basic `.width()` in that it calculates
    the width of the left and right padding and the left and right borders in addition
    to the element itself. Like `.width()` and `.innerWidth()`, however, it does not
    include the element's margins in the calculations.
  prefs: []
  type: TYPE_NORMAL
- en: If used with `document` or `window, .outerWidth()` calls the Dimensions `.width`
    method to return the value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Description.outerWidth()about](img/3810_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Position Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following methods are helpful in determining the exact positioning of elements—in
    relation to a positioned ancestor, the document body, or the viewable area of
    the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'As in the *Size Methods* section, we''ll be using the same basic HTML for each
    of the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: .scrollTop()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the number of pixels that the window or a scrollable element within
    the document has been scrolled down.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the vertical scrollbar position in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.scrollTop` method is able to return the vertical scroll position of either
    the browser window or an element within the document. For example, given `<div
    class="dim-outer">` after it has been scrolled down 96 pixels (as shown in the
    following image), `$(''div.dim-outer'').scrollTop()` returns `96`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Discussion.scrollTop()about](img/3810_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .scrollTop(value)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Sets the number of pixels to be scrolled down in the window or or the matched
    set of scrollable element within a document.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`value`: An integer representing the number of pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By passing in a numeric value to the `.scrollTop` method, we can move the scroll
    position of the browser window or scrollable elements within the document up or
    down. In the following image, the scroll position of `<div class="dim-outer">`
    has been set with `$(''div.dim‑outer'').scrollTop(200)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description.scrollTop(value)about](img/3810_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .scrollLeft()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the number of pixels that the window or a scrollable element within
    the document has been scrolled from left to right.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An integer representing the horizontal scrollbar position in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.scrollLeft` method is able to return the horizontal scroll position of
    either the browser window or an element within the document. For example, after
    the browser window has been scrolled to the right 24 pixels, as shown in the following
    image, the return value of `$(window).scrollLeft()` is `24`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description.scrollLeft()about](img/3810_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .scrollLeft(value)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Sets the number of pixels to be scrolled from left to right in the window
    or the matched set of scrollable elements within a document.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`value`: An integer representing the number of pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By passing in a numeric value to the `.scrollLeft` method, we can move the scroll
    position of the browser window or scrollable elements within the document left
    or right. In the following image, the scroll position of the browser window has
    been set with `$(window).scrollLeft(50)`
  prefs: []
  type: TYPE_NORMAL
- en: '![Discussion.scrollLeft(value)about](img/3810_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .offset()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the top and left coordinates of the first element in the set of matched
    elements. Also gets the matched element''s `scrollTop` and `scrollLeft` offsets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`options` (optional): A map of settings to configure the way the offset is
    calculated. Can contain the following items:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margin` (optional): A Boolean indicating whether to include the element''s
    margin in the calculations. Default is `true`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border` (optional): A Boolean indicating whether to include the element''s
    border in the calculations. Default is `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (optional): A Boolean indicating whether to include the element''s
    padding in the calculations. Default is `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scroll` (optional): A Boolean indicating whether to include the scroll offsets
    of all ancestor elements in the calculations. Default is `true`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lite` (optional): A Boolean indicating whether to use offsetLite instead of
    offset. Default is `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relativeTo` (optional): An HTML element representing the ancestor element
    relative to which the matched element will be offset. Default is `document.body`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters (Second Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`options`: A map of settings to configure the way the offset is calculated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margin` (optional): A Boolean indicating whether to include the element''s
    margin in the calculations. Default is `true`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border` (optional): A Boolean indicating whether to include the element''s
    border in the calculations. Default is `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (optional): A Boolean indicating whether to include the element''s
    padding in the calculations. Default is `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scroll` (optional): A Boolean indicating whether to include the scroll offsets
    of all ancestor elements in the calculations. Default is `true`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lite` (optional): A Boolean indicating whether to use `offsetLite` instead
    of `offset`. Default is `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relativeTo` (optional): An HTML element representing the ancestor element
    relative to which the matched element will be offset. Default is `document.body`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`returnObject`: An object in which to store the return value. When the second
    version of the method is used, the chain will not be broken, and the result will
    be assigned to this object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An object containing values for `top, left`, and optionally `scrollTop` and
    `scrollLeft`.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value (Second Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.offset` method allows us to locate the `top` and `left` positions of any
    element anywhere on the page, whether its `position` is `static` or `relative,
    absolute` or `fixed`, and regardless of the position of scrollbars. With options
    for factoring margin, border, padding, and scroll into the calculation, `.offset()`
    provides great flexibility as well as accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: The following series of images demonstrates the different values returned by
    `.offset()` depending on how the options are set.
  prefs: []
  type: TYPE_NORMAL
- en: '**Defaults**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first example, the default settings for padding (false), border (false),
    and margin (true) are used. The result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Description.offset()about](img/3810_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note here that since the default for margin is `true`, the distance from the
    left edge of the window to the matched element extends all the way to (but not
    including) the element's border.
  prefs: []
  type: TYPE_NORMAL
- en: '**Including Border**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second example, the border option is set to `true`. Since `<div class="dim-outer">`
    has a 5-pixel border around it, the `top` and `left` values increase by 5 pixels
    each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Description.offset()about](img/3810_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Including Border and Padding**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next example sets both the border and padding options to `true` (remember
    that the margin option''s value is `true` by default). The result is an increase,
    again, of 5 pixels for the borders and another 12 pixels (1em) for the padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Description.offset()about](img/3810_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Finding the Position Relative to an Ancestor**'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `relativeTo` option, we can find the offset distance between an element
    and any one of its positioned ancestors. In the next example, we''re getting the
    offset between `<div class="dim-outer">` and `<div id="content">`. Since this
    `content <div>` is itself offset from the left side of the window due to a container''s
    24-pixel left margin, the value of `left` is now 24 pixels less than that of the
    previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Description.offset()about](img/3810_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's worth noting here that, since the `relativeTo` setting takes a DOM element,
    we used the shorthand `[0]` notation to convert a jQuery object to a DOM element
    before using it for the `relativeTo` argument.
  prefs: []
  type: TYPE_NORMAL
- en: The `top` value of `27` is derived from the sum of the floated `<div class="dim-outer">`
    element's margin (`12`), border (`5`), and padding (`10`). If `<div id="content">`
    had any top padding applied to it, that would be added to the total top offset
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Returning Scroll Offsets**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `scroll` option, which has a default value of `true`, is particularly useful
    when the matched element is inside one or more elements that have the `overflow`
    property set to `auto` or `scroll`. It adds the total scroll offsets of all ancestor
    elements to the total offset and adds two properties to the returned object, `scrollTop`
    and `scrollLeft`. Its usefulness can be observed in the following example showing
    the offset of `<div class="dim-inner">` when `<div class="dim-outer">` has been
    scrolled down 79 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Description.offset()about](img/3810_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Maintaining Chainability**'
  prefs: []
  type: TYPE_NORMAL
- en: If we wish to pass in a return object in order to continue chaining methods,
    we must still include the options map. To keep the default values intact for those
    options while passing in a return object, we can simply use an empty map. For
    example, `$('div.dim-outer').offset({}, returnObject)` obtains the same values
    as `$('div.dim-outer').offset()`, but stores them in `returnObject` for later
    use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to get the offset and scroll values of `<div class="dim-outer">`
    while changing its background color to gray (#cccccc) at the same time. The code
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by declaring a variable for the return object (retObj). Then we chain
    the `.offset` and `.css` methods to the selector. Finally, we do something with
    the object returned by `.offset()—in` this case, log the results with our Log
    plug-in. The `<div>''s` background color is changed and the `.offset()` values
    are logged as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Description.offset()about](img/3810_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .position()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Gets the position of the first element in the matched set of elements, relative
    to its nearest relative-, absolute- or fixed-positioned ancestor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (Second Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`returnObject`: An object in which to store the return value. When the second
    version of the method is used, the chain will not be broken, and the result will
    be assigned to this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return Value (First Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An object containing values for `top` and `left`.
  prefs: []
  type: TYPE_NORMAL
- en: Return Value (Second Version)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery object, for chaining purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.position` method is shorthand for the following `.offset()` variation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, only the element's top and left position—without any padding, border,
    or margin—is determined in relation to its nearest positioned ancestor. For more
    details on these options, see the description of `.offset()`.
  prefs: []
  type: TYPE_NORMAL
- en: For `relativeTo`, the `.position()` method uses a variable, `offsetParent`,
    which is set in the Dimensions code. Effectively, this code begins with the element's
    immediate parent and crawls up the DOM, stopping at the first element that has
    a position of `relative, absolute`, or `fixed`. The initial element's offset position
    is then calculated in relation to that nearest positioned element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Using `$('p').position()calculates` the top and left offsets of the paragraph
    in relation to `<div id="middle">` because that `<div>` is the nearest positioned
    ancestor (note its `style` attribute).
  prefs: []
  type: TYPE_NORMAL
- en: Since `.position()` takes no parameters (except `returnValue` in the second
    version), it is much less flexible than `.offset()`. In most cases, `.offset()`,
    which was discussed above, is recommended.
  prefs: []
  type: TYPE_NORMAL
