- en: Chapter 5. Creating Custom Tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen how powerful plugins are and how easy they make advanced
    functionality, let's see how we can take advantage of another plugin to make custom
    tooltips.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Browsers automatically create tooltips when you include the title attribute
    — usually on a link or an image. When your site visitor hovers their mouse cursor
    over the item or moves focus to the item by tabbing to it, the tooltip will appear
    — usually as a small yellow box that appears to be floating over the page. Tooltips
    are a great way to add a little additional information to your page. Screen reader
    software reads out tooltip text for site visitors with disabilities who are using
    assistive technology, making them useful for enhancing accessibility. Furthermore,
    title attributes on images and links can help search engines index your content
    more effectively.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use Craig Thompson's qTip plugin to replace the browser's default tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to customize the appearance of the qTip tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to enhance a navigation bar with custom tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to display Ajax content in custom tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple custom text tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope I've convinced you that `title` attributes are great for enhancing both
    the usability and accessibility of your site. The only problem with tooltips is
    that they can't be customized in any way. Each browser has its own style of tooltip
    and that style is not customizable via CSS. Sometimes this is fine, but sometimes
    it's nice to have more control over the appearance of tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — simple text tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start off working with tooltips by making a simple replacement for the
    browser''s default tooltip that we can style any way we''d like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up a basic HTML file and associated files and folders like we did in [Chapter
    1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer, Meet jQuery*. Our
    HTML file should contain a set of links that each have a `title` attribute like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open that page in a browser and move your mouse over the links. You'll see the
    text contained in the `title` attribute shown in a tooltip. Exactly where the
    tooltip appears and exactly what it looks like will depend on your browser, but
    here's how it looks in mine (Google Chrome on Mac OS):![Time for action — simple
    text tooltips](img/6709_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's spruce that up a bit by replacing the default browser tooltip with
    our own styled one. First, we'll need to download Craig Thompson's qTip plugin.
    It's available from [http://craigsworks.com/projects/qtip2](http://craigsworks.com/projects/qtip2).
    His site has a list of features, several sample demos, the documentation you'll
    need to learn to use the plugin, a forum where you can get help, and the files
    needed are available for download. Head to the download page, and you'll see a
    checklist of options to help you download the right version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s walk through this page one section at a time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — simple text tooltips](img/6709_05_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Step 1** gives us a number of options for downloading the script. In the
    section titled **Version**, I''m going to select **Stable** version so that I
    get the latest version of the script that has been tested thoroughly. Those wanting
    to experiment with and test the plugin as the developer works on it, can select
    the nightly build.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Extras** section, I'm going to uncheck **jQuery 1.5** since I have
    already downloaded jQuery and attached it to my project. If you're starting a
    new project and haven't yet downloaded jQuery, you can leave this checked to download
    jQuery simultaneously with the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Styles** section, I'm going to leave all three sets of styles selected,
    since I want as many options as possible for styling my tooltips. Likewise, I'm
    going to leave all options selected in the **Plugins** section since I'll be working
    on a variety of different types of tooltips and taking advantage of these different
    features. If you wanted to simply create simple text-based tooltips, you could
    uncheck all of these extras and get a much smaller download file. These extras
    are only needed if you're going to be taking advantage of the extra features.
    It's a nice feature of this plugin that we can pick and choose just the functionality
    we want in order to keep our JavaScript files as small as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Step 2** offers an automatic converter for anyone who is updating their code
    that might have previously used an earlier version of the plugin. We can ignore
    this step since we''re newcomers to the qTip plugin.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Step 3** gives us the opportunity to tell the plugin developer about our
    site that uses the plugin in exchange for a chance to be featured on the plugin''s
    home page gallery. Since we''re only doing some practice exercises in this chapter,
    we won''t use this now, but it may be something for you to consider for your own
    projects later on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Step 4** requires us to accept the terms of the license. This plugin is licensed
    under the open source MIT and GPLv2 licenses, which makes it free for us to use,
    modify and even redistribute the code, provided the license or link to the license
    is included in the files. The license is already included in the plugin files
    when you download them, so as long as you don''t edit those files to remove the
    license, you''ll be fine.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we can click the **Download qTip** button, and your browser will download
    a ZIP file for you. Unzip it and examine its contents. Inside, we'll find two
    CSS files and two JavaScript files. (You might have an extra JavaScript file if
    you elected to download jQuery as well as the plugin script).![Time for action
    — simple text tooltips](img/6709_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start with the two CSS files. We have `jquery.qtip.css` and `jquery.qtip.min.css`.
    These two files have exactly the same content. The difference between them is
    that the second file is minified, making it smaller and ideal for use in production.
    The other file is the development version that we could easily edit ourselves
    or use as an example if we wanted to write our own styles for our tooltips instead
    of using the prebuilt styles. You''ll select one of the files and attach it to
    your page. In this example, I''m going to use the minified version of the file
    to keep the file as small as possible since I don''t want to write my own styles
    at this point. Copy `jquery.qtip.min.css` to your own `styles` folder, and then
    attach the file to your HTML document in the`<head>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: I'm attaching the qTip stylesheet before my own `styles.css` to make it easier
    for me to override styles in the qTip stylesheet if I want to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s look at the JavaScript files. We have `jquery.qtip.js` and `jquery.qtip.min.js`.
    Just like the CSS files, these are two different versions of the same file, and
    we simply have to pick one and attach it to our HTML document. The first file,
    `jquery.qtip.js`, is the development version of the file, and the largest file
    at 94K. The second file is minified and weighs in at only 41K. Since we don''t
    need to edit the plugin and are going to be using it as is, let''s select the
    minified version. Copy `jquery.qtip.min.js` to your own `scripts` folder and attach
    it at the bottom of your HTML file, in between jQuery and our own `scripts.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing we need to do is call the plugin code. Open your `scripts.js`
    file and add the document ready statement and function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the function, select all links in the document that have `title` attributes
    and call the `qtip()` method on those links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, when you view the page in the browser and move your mouse over the links
    with `title` attributes, you'll see the qTip-styled tooltips instead of the browser's
    default tooltips:![Time for action — simple text tooltips](img/6709_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even better, these tooltips will appear with this same style, no matter which
    browser and operating system we're using.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We downloaded the qTip plugin and attached one CSS file and one JavaScript file
    to our HTML document. Then we added just a couple of lines of jQuery code to activate
    the custom tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: 'We selected all the link elements on the page that had a `title` attribute.
    We did this by taking advantage of jQuery''s attribute selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Putting `title` in brackets after our element selector means that we only want
    those links on the page that have a `title` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Once we've selected those links, all that's left to do is to call the `qtip()`
    method that the qTip plugin provided for us. The `qtip()` method takes care of
    all the actions that need to be done to replace the default tooltip with a custom
    one. But what if we want to use some of the other styles included with qTip?
  prefs: []
  type: TYPE_NORMAL
- en: Customizing qTip's appearance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've undoubtedly noticed that the top-left corner of the qTip aligns with
    the bottom-right corner of the link when the mouse hovers over the link, and that
    the tooltip appears as a yellow box with a small arrow on the side. The qTip plugin
    offers lots of options for customizing where the tooltip appears and what it looks
    like and it does so in a straightforward and easy to understand way.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — customizing qTips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the options we have for customizing the appearance of
    qTip''s tooltips:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that we want to change the position of the tooltip. qTip gives us
    plenty of options for positioning our tooltips on our page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can match up any of these points on the tooltip to any of these points on
    the link:![Time for action — customizing qTips](img/6709_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this example, we''ll match up the middle of the link''s right side with
    the middle of the tooltip''s left side, so that the tooltip appears directly to
    the right of the link. We simply need to pass some additional information to the
    `qTip()` method. We''ll keep working with the files we set up in the last example.
    Open your `scripts.js` file and pass this additional information to the `qtip()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The developer's goal was for this to make sense in plain language. Speaking
    from the tooltip's point of view, we're going to align my center-left at the link's
    center-right. As you can see when we refresh the page in the browser, the tooltip
    now appears directly to the right of the link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — customizing qTips](img/6709_05_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In addition to changing the position of the tooltip, we can change the appearance
    of the tooltip itself. The CSS included with the plugin includes several color
    schemes and styles. These different colors and styles are applied by adding CSS
    classes to our tooltip. Let's take a look at how we add these CSS classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now when we view our tooltip in the browser, we see that it''s blue:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — customizing qTips](img/6709_05_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The color schemes provided with qTip include:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ui-tooltip` (the default yellow color scheme)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-tooltip-light` (black text on a white tooltip)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-tooltip-dark` (white text on a dark grey tooltip)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-tooltip-red`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-tooltip-green`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-tooltip-blue`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add any one of these classes to your tooltips to adjust the color scheme.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: For CSS3-capable browsers, qTip also offers some fancier styles. These styles
    won't be seen in browsers that don't support the CSS3 specification, but in most
    cases, that should be fine. These styles can be considered as progressive enhancement
    for the browsers that can display them. Site visitors using a less capable browser
    will still be able to see and read the tooltips without any trouble. They just
    won't see the fancier styles applied. The available styles are as follows:![Time
    for action — customizing qTips](img/6709_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just like with the color schemes, we can take advantage of these styles by
    adding CSS classes to our tooltips. Multiple CSS classes can be added to a tooltip
    like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code creates a tooltip that is blue and has a shadow.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saw how we can pass position and style values to the qTip method to customize
    the appearance of our tooltips. We learned the color schemes and styles that are
    included with the qTip plugin, and learned how we can use those styles in our
    own pages to customize the qTip tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: Custom styles for tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also write our own color schemes and styles for our tooltips if none
    of the available options are quite right for our site.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — writing custom tooltip styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can write our own custom styles for qTip''s tooltips
    by writing a new purple color scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get started by examining the CSS that codes up the red tooltip style
    that comes with qTip. You''ll find this bit of CSS inside the `jquery.qtip.css`
    file that was included with the qTip download. Here are all the CSS styles that
    affect the red tooltips:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From examining this CSS, we can see that all we need to do to create a new
    color scheme is to create a new class name and four shades of purple to create
    a new style. Here''s the CSS for my purple color scheme. Open your `styles.css`
    file and add these styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to take advantage of our new purple tooltip style, we simply have to adjust
    our jQuery code to add the newly created `ui-tooltip-purple` class to our tooltips.
    Open `scripts.js` and adjust the classes being added to the tooltips:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, when you preview the link in the browser, you will see a purple tooltip,
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — writing custom tooltip styles](img/6709_05_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using one of the CSS classes provided with qTip, we wrote our own custom style
    and applied it to our tooltips. You can use any CSS styles you'd like to create
    a custom appearance for the qTip tooltips. There's virtually no limit to the possibilities
    for styles when you start mixing in color and font choices, background images,
    border styles, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — create a tooltip of your own design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try writing your own CSS class to style the tooltips. Try a new color scheme,
    new font styles and sizes, text shadows, box shadows — anything you can think
    of to make the tooltips match the design of a site or really stand out.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing navigation with tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you know how to make custom tooltips, you'll find there are lots of possible
    uses for them. Let's take a look at enhancing a standard navigation bar with custom
    tooltips using the qTip plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — building a fancy navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can use custom-designed tooltips to add a little
    progressively enhanced punch to a basic navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by setting up a basic HTML page with associated folders and files
    just as we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer,
    Meet jQuery*. In the body of the document, include a simple navigation bar like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll add some CSS styles to our navigation bar. There''s a lot of CSS
    here because I''m using a gradient as a background and it requires a lot of different
    CSS for different browsers right now. Add these lines of CSS to your `styles.css`
    file. If you prefer a different style, feel free to customize the CSS to suit
    your own taste:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we have a navigation bar horizontally across our page, like this:![Time
    for action — building a fancy navigation bar](img/6709_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I've included `title` attributes on my links and when I move my mouse over the
    navigation links, those are visible. I'd like to replace these boring browser
    default tooltips with friendly-looking conversation bubbles below my navigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just like we did in the previous example, we''re going to copy the qTip CSS
    and JavaScript to our own styles and scripts folders and attach them to the HTML
    document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open your `scripts.js` file so we can call the `qtip()` method and pass
    in our customizations. We''ll start off nearly the same way as last time, except
    that we''ll use a different selector, since we only want to select links inside
    the navigation bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the default tooltips are replaced with qTip-styled tooltips.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''re going to create our own style for the navigation tooltips, so
    we''ll write some new CSS to make them look like speech bubbles. Add these styles
    to your `styles.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve got a new CSS style for our tooltips ready to go, we just have
    to add this new class to the tooltips. Go back to `scripts.js` and add the new
    class to the JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s position the speech bubbles so that they appear underneath each
    of the navigation links. In `scripts.js`, pass the position information to the
    `qtip()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to control the width of the tooltips so they don''t appear too
    wide. We''ll set the width to 150px:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the last thing we''ll do is change the way the tooltips appear and disappear
    from the page. By default, the qTip plugin uses a very quick and subtle fade in
    and fade out. Let''s change that, so that the tooltips slide into view and slide
    back out of view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now when you view the page in a browser, you can see the conversation bubbles
    slide into view underneath each navigation link when you move your mouse over
    the link, and slide back out of view when you move your mouse off the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We reviewed how to create and attach a custom CSS style to qTip's tooltips and
    how to position the tooltip wherever you'd like it to appear. We also learned
    how to control the width of the tooltips to ensure we get a uniform size.
  prefs: []
  type: TYPE_NORMAL
- en: Then we saw how to override the default show and hide behaviors and replace
    them with custom animations. In this case, we used jQuery's `slideDown()` effect
    to show the tooltips. We passed a value of 300 to the `slideDown()` method, which
    means the animation will take 300 milliseconds to complete, or about a third of
    a second. I've found that if an animation takes much longer than that, site visitors
    get impatient waiting for it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we overrode the default hide behavior with jQuery's `slideUp()` method.
    I passed a value of 100, meaning the animation will complete rather quickly in
    about one-tenth of a second. When this animation runs, the site visitor has already
    decided to move on, so it's best to get the information out of their way as quickly
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Showing other content in tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we've seen how we can customize the appearance of qTip's tooltips, controlling
    their appearance, animation, and position. However, we've only used the tooltips
    to show text, namely the text we've placed inside a link's `title` attribute.
    We have a lot of more powerful options, though. We can load just about any content
    we'd like into our tooltips. We can also make sure the tooltips appear when an
    item is clicked instead of hovered over. Let's take a look at how we can load
    in content from another HTML page into our tooltips when we click on a link.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll dive into using Ajax for the first time. In case you
    aren't familiar, **Ajax** is a method for fetching some new content from the server
    and displaying it to the site visitor without having to completely refresh the
    page. Because the browser is only getting and displaying just the bit of information
    the site visitor needs, it's often much faster and snappier.
  prefs: []
  type: TYPE_NORMAL
- en: Just a quick note before we dive into Ajax for the first time. Modern browsers
    have several security rules for Ajax requests. You won't be able to simply view
    your ajaxified HTML files in a browser as we've been doing up until this point.
    In order to view the Ajax in action, you'll either have to upload your files to
    a server before viewing them, or you'll have to set up a server on your own computer.
    If you're a Mac user, I highly recommend **MAMP**, which has both a free and a
    premium paid version. You can get more information and download MAMP from [http://www.mamp.info](http://www.mamp.info).
    If you're on Windows, I highly recommend **WampServer**, which is free. You can
    get more information and download WampServer from [http://www.wampserver.com.](http://www.wampserver.com.)
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — building custom Ajax tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set up some tooltips that display Ajax content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll get started by creating an HTML document and associated files and folders
    like we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer,
    Meet jQuery*. Our HTML page should contain a couple paragraphs of text that have
    some links to further information. My first HTML document looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need an easy way to select the three more information links, so we''ll add
    a CSS class to each one like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create a set of short pages that each contain a photo and
    a caption for each of the links in my previous text. Here''s a sample of one of
    my short HTML pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the file is extremely small and simple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create an `infoboxes` directory alongside the main page. Save your simple HTML
    file to this directory, and then create more simple files one for each link in
    the main document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you open the main page in a browser and click the links in the text,
    you'll see that these short, plain pages load up in the browser. We've got the
    basic functionality down, so next we'll move on to progressively enhancing our
    page for those with JavaScript enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll use the purple color scheme that we set up earlier in the chapter for
    our tooltips, so let''s add the CSS for the `ui-tooltip-purple` class to the `styles.css`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve got our HTML and CSS all set up, let''s dive into the JavaScript.
    Attach the qTip plugin at the bottom of the page, between jQuery and your `scripts.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open `scripts.js` and we''ll get started with our document ready function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''re going to call the `qtip()` method in a slightly different way
    than we have before. Inside the `qtip()` method, we need to easily get to the
    information about just the link we''re working with, so we''re going to use jQuery''s
    `each()` method to loop through them one at a time. That will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you refresh the page in your browser, you'll see that nothing happens
    when you hover over the links. This is because our links don't have `title` attributes,
    and that's what the qTip plugin is looking for by default. However, we can override
    that default to insert any content we'd like into our tooltips.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re going to be displaying those simple HTML pages we set up inside our
    tooltips. Even though Ajax requests tend to be quick, there could still be a bit
    of a delay, so let''s get ready to use Ajax by adding a loading message that will
    display for our site visitors while they wait for the real content to show up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now when you refresh the page in the browser, you'll see the tooltips contain
    the **Loading...** text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We want to switch the behavior of the tooltips so that they show up when the
    link is clicked instead of when the mouse hovers over. We also want to make sure
    that only one tooltip is visible on the page at a time. If the site visitor opens
    a tooltip while another is already open, the first one should close so they don''t
    end up with many tooltips open all over the screen. This is how we''ll do that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now if you refresh the page in a browser, you'll see that the tooltip no longer
    appears when we hover over the links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, when we click on the links right now, we''re taken to the short simple
    HTML page we set up. We have to tell the browser to ignore the link because we
    have other plans in mind. We can cancel the default behavior by adding this line
    of code above our earlier code and inside the document ready statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we're doing here is binding a function that fires when the links are clicked.
    Our function is pretty simple. We pass the current link to the function (e in
    this case for brevity, but we could have named it almost anything), and then we
    tell the browser to prevent the default link behavior.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if you refresh the page in the browser, you'll see that the tooltips appear
    when we click on the links — clicking the links no longer takes us off to a new
    page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'But we could write our code in a more succinct way. Remember that jQuery allows
    us to chain methods, one right after the other. In this case, we can chain the
    `bind()` method directly to the end of the `each()` method we wrote earlier. The
    new JavaScript will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s adjust the style of our tooltips by adding a drop shadow and applying
    the purple color scheme we wrote to our tooltips:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now when you refresh the page in the browser, you'll see that we have purple
    tooltips that have a drop shadow. We're getting closer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let's add in the Ajax magic to load our simple HTML pages into the tooltips.
    Remember, this will only work from a server, so to see this step in action, you'll
    either have to upload your files to a server, or else set up a server on your
    own computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To tell the tooltips to fetch content via Ajax, all we have to do is pass the
    URL of the content we''d like to fetch. In this case, we''ve already linked out
    to that content. We just have to grab the link URL from each link. That''s easily
    accessible to us by using the `attr()` method of jQuery. That will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this case, `$(this)` is referring to the current link. I call the `attr()`
    method and pass that method the attribute I would like to fetch, in this case
    the `href` attribute of the link contains the information that I want. The `attr()`
    method can be used to fetch any attribute — an `src` attribute of an image, a
    `title` attribute of any element, a `cellspacing` attribute of a table, and so
    on:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we know how to get the `href` attribute of our link, we''ll use that
    to tell the tooltip which URL to use to get the content for our tooltip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh your browser and click on one of the links — you'll see the purple tooltip
    pop up with the HTML content from our simple HTML pages. Pretty amazing that fetching
    content with Ajax can be that simple, isn't it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's make a couple of other final tweaks to the tooltips to make them
    even better.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, we''ll add a title bar to the tooltips. To get some custom text for
    this, let''s go back to each of the links in the `index.html` file and add a `title`
    attribute that contains the text to display at the top of the tooltips:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can fetch the `title` attribute of these links in much the same way
    that we fetched the URL of the `href` attribute and pass it to qTip as the title
    text for the tooltip. While we''re at it, we can also pass in a `true` value for
    button to show a small close button at the top-right of the tooltip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now when you refresh the browser, you'll see a darker title bar with a close
    button appear at the top of each tooltip.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, if you try to move your mouse over to click the close button, you''ll
    see that the tooltip disappears before you can get there. We changed the show
    value of the tooltip to show on a click instead of on a mouse hover, but we never
    changed the hide value — the tooltip is still being hidden when we move our mouse
    off the link. This is a little bit awkward, so I''m going to change the hide value
    to `unfocus` so that the tooltip will be hidden when the link loses focus or when
    the site visitor clicks the close button on the tooltip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh your browser and you'll see that the interaction is much better now.
    Our site visitor doesn't have to carefully leave their mouse over the link in
    order to view the content inside our tooltip. And our tooltip is still easy to
    remove — the site visitor can click the close button, or click anywhere outside
    the tooltip on the page and the tooltips hide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, there''s just one thing left to do, and that''s to position the tooltips
    right where we''d like them to appear. I want to show my tooltips centered below
    the links, so I''ll match up the top-center of the tooltip with the bottom-center
    of the link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you refresh the page in the browser and click the links, you'll see
    the tooltips slide into place from their default position.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our tooltips are looking good, but we still have a couple of problems. One
    is that the animation of the tooltip from the bottom corner to the middle of the
    tooltip is a little bit distracting. To work around this, let''s set the `effect`
    value to `false`. That way the tooltip will show up where it''s supposed to without
    the animation of sliding into place. The other problem is that, depending on the
    size of your browser window, sometimes the tooltips are cut off and display outside
    the screen area. To make sure this doesn''t happen, we''ll set the `viewport`
    value to the window like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you'll see when you reload the page in the browser, that the tooltip will
    display centered below the link if possible, but if that would put it outside
    the window area, then the tooltip will adjust its position to the best possible
    place for display in relation to the link. We lose a bit of control over just
    where the tooltip appears, but we can make sure that our site visitors will always
    be able to see the tooltip's content, which is more important.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — building custom Ajax tooltips](img/6709_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter. We learned how to use the qTip plugin
    to replace the browser's default tooltips with custom-designed tooltips. We saw
    how to take the customization a bit further by adding speech-bubble tooltips to
    a navigation bar. And finally, we used Ajax to pull in some external content,
    customizing not only the appearance of the tooltip, but also pulling in custom
    content, adding a title bar and close button, ensuring the tooltip would always
    be visible, and customizing the show and hide behaviors of the tooltip. I hope
    that you can see how flexible the qTip plugin is and how many uses it can have
    beyond just customizing the appearance of tooltips. Have fun experimenting with
    all the different settings listed in the plugin's documentation and see how creative
    you can be in customizing the appearance of your tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we'll take a look at creating nicely designed and animated dropdown
    navigation menus.
  prefs: []
  type: TYPE_NORMAL
