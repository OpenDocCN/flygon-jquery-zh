- en: Chapter 3. Building Responsive Navigation Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `header` section is an important section when a website is being built.
    There are some common elements in this area such as a logo, a login, navigation
    options, a sign-up option, and a search field. But planning this area is not too
    easy because if we put all the elements together, we will give our users a messy
    navigation. Another option is to reserve a lot of space for our header, but it
    will probably hide more content above the fold on smartphones. The expected result
    is to occupy a small amount of space for your header and to handle that space
    efficiently in order to display those elements.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will analyze some types of navigation menu, when it is the
    correct situation to use each one in a clear and intuitive way, and to avoid frustrating
    users. That's why crafting our navigation menu in a way that will allow users
    to easily and clearly see the main and sub-items in it is important to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Design a menu improving its usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See most-used responsive navigation patterns and how to code each type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply our recently gained knowledge by doing the exercise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing a menu by improving its usability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On responsive websites, especially for those which are using the mobile-first
    concept, the content is the main reason the user is visiting our site, so we must
    provide a reasonable space to show the content before the fold.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide this space, we need to handle the way we display the menu
    better so that we will be able to offer another view of it, depending on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, the goal is the same: to make it easier for users to find what they
    are looking for without drastically affecting the useful area. When the menu is
    organized, we give the users the freedom to choose where they want to navigate
    to through our site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The truth is that there is no answer for the duel between these two interfaces:
    the top and left navigation menus. Sometimes the navigation works well in one
    context; however, it may not work as well in another. To figure out which navigation
    is best for our site, it is important to understand the different contexts where
    the top and left navigation menus work best. Let''s analyze this battle in five
    rounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scanning**: In this, the left navigation menu wins because it occupies less
    space to show all items and facilitates a vertical scanning (more natural for
    users).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page space**: In this, the top navigation wins because it uses a minimal
    vertical space, reserving the content area just for content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item priority**: For this round, there is a draw between the top and left
    navigation menus. The top navigation does not have the same weight among the items
    as the leftmost item will be read before others following the reading sequence.
    But, it depends on the type of content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visibility**: For this round, there is a draw between the top and left navigation
    menus. The top navigation menu is easier to see because it is usually near the
    logo. In the left navigation, some items may be hidden below the fold.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Topics and interests**: For this round, there is a draw between the top and
    left navigation menus. If our site has a variety of content for a widespread audience
    (for example, e-commerce sites), the left navigation menu would be better for
    these users because they have a range of interests and are the ones who will choose
    which items they want to see. However, for specific topics, the top navigation
    menu fits better because finding the high-priority items quickly is more important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most-used responsive navigation patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Planning mobile navigation is not an easy task because we need to provide unobtrusive
    and quick access to specific content in a responsive way and depending on the
    objective of the website. After a long study, *Brad Frost*, in his research of
    popular menu techniques, summarized some trends and established patterns for menu
    type concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to his article ([http://bradfrostweb.com/blog/web/responsive-nav-patterns/](http://bradfrostweb.com/blog/web/responsive-nav-patterns/)),
    the navigation patterns are:'
  prefs: []
  type: TYPE_NORMAL
- en: Top nav
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer anchor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggle menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer-only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi toggle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggle and slide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Off-canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's inspect each one, see how they look, and understand which approach fits
    better with your project.
  prefs: []
  type: TYPE_NORMAL
- en: Top nav
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Top nav pattern is the most-viewed pattern on the Internet because it requires
    a little extra work for its adaptation. To implement this solution, we only need
    to keep the menu at the top, as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Top nav](img/3602OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this situation, as shown in the previous screenshot, it is showing the menu
    above the logo on the smartphone. So, let''s code this HTML script to understand
    the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you prefer to rearrange these elements (display logo on top and then the
    menu), you need to invert the order of elements, moving the `<h1>` tag before
    the `<nav>` tag in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, the `<nav>` tag is not supported for Internet Explorer 8 and
    lower. However, this tag has a good semantic meaning and I recommend its usage.
    We will see in [Chapter 10](ch10.html "Chapter 10. Ensuring Browser Support"),
    *Ensuring Browser Support*, how to handle it using `Html5shiv with Modernizr`.
    By adopting the mobile-first concept and using this first block of code in CSS,
    we may customize the menu to be displayed by filling the horizontal area with
    tiny horizontal margins and aligning the menu in the center:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For screens more than 768 px, the menu width is reduced to 70 percent and floated
    to the right. Also, the logo is now floated to the left width, the width of 30
    percent, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These percentages are just a part of the example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is very simple to implement, but take care when you have more than three
    lines of menu items because it will consume much of the important area.
  prefs: []
  type: TYPE_NORMAL
- en: Footer anchor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Footer anchor is a smart solution for which the main objective is to keep more
    useful space to the content, without penalizing the mobile users seeing our site
    in a small area. To do this, it is necessary to reallocate the main menu to the
    footer and just keep an anchor link in the header that will focus on the menu
    whenever the user clicks on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot represents this navigation pattern being applied only
    to smartphones where the free space is short:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Footer anchor](img/3602OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start using the same HTML code from the first navigation pattern. But
    now we will move the menu to the bottom of the DOM, just before the `</body>`
    tag and insert the following link in the beginning of the code after the `<body>`
    tag, because when the user clicks on it, the website will focus on the navigation
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The decimal code `☰` is a symbol to represent menus because it shows a symbol
    with three lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the CSS code for smartphones, we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a style for the menu items from menu. Some developers prefer to list
    these items showing one per line (facilitating touch), but it is up to you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a style for the button from the header (that will drive the user to the
    menu).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The CSS code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For tablets and desktops (devices with screen widths higher than 768 px) the
    best approach is hiding this header button. Now, we need to show the menu on header
    without changing anything on the HTML (we just have moved it to the footer area).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the following code by setting the menu position on the top
    and hiding the header button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The toggle menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The toggle navigation pattern has almost the same behavior when compared to
    the previous pattern. The real difference is shown when the user clicks on the
    link from the header, and instead of driving the user to the anchored menu, the
    menu slides down just after the header, thereby providing the user an impressive
    effect and quick access to the main links. Its implementation is relatively easy,
    as we will soon see.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to improve the performance of animation, try to use the `max-height`
    property
  prefs: []
  type: TYPE_NORMAL
- en: The Responsive Nav plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Responsive Nav plugin, [http://responsive-nav.com/](http://responsive-nav.com/),
    is a lightweight solution to create the toggle navigation for small screens. We
    are fond of three main features, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the touch events (we will understand it better later) and CSS3 transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building this plugin with accessibility in mind and also working with disabled
    JavaScript. The plugin does not require any external libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working in all major desktop and mobile browsers, including IE 6 and higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After downloading the files for of this solution, let''s insert this code in
    the `<head>` tag of our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also use the same HTML code of the first example, but right before
    the `</body>` closing tag of DOM, we need to insert the function that executes
    the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, let''s insert the same menu style from the footer anchor pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And that is it. We are done. There are some customizable options that will
    power up our feature implementation. Feel free to test other options, but by default
    it is already set to CSS3 animation in 400 ms showing up before the toggle button
    that is created automatically, or you can define yours this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we will see the **Responsive Nav** window in action,
    changing the menu style on smartphones and displaying an unobtrusive way to show
    the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/3602OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The customization of toggle button and the orange color from the menu do not
    display by default. This is just a suggestion made by the creator's plugin in
    one of its demos.
  prefs: []
  type: TYPE_NORMAL
- en: The select menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One way of drastically reducing the space occupied by the menu is to use this
    pattern, where all the menu items are wrapped into a `<select>` tag. It avoids
    some alignment issues and ensures the cross-browser solution.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are problems with this approach that affect usability, accessibility,
    and SEO. At first glance, a select menu for the main navigation does not look
    right because it does not blend in with the design. Maybe the user will think
    it is awkward or may get confused with the `select` form element.
  prefs: []
  type: TYPE_NORMAL
- en: The TinyNav.js jQuery plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TinyNav.js jQuery plugin, [http://tinynav.viljamis.com/](http://tinynav.viljamis.com/),
    is very useful for converting the `<ul>` or `<ol>` navigations to a select dropdown
    for small screens, and when the user selects one option, it navigates to the correct
    page with no extra effort. It may also select the current page and add `selected="selected"`
    for that item automatically.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start using the same HTML code from the first navigation pattern. After
    downloading the TinyNav plugin, we will include the following code in the `<head>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And include the following code right before the `</body>` closing tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code in our CSS file which is hiding this navigation pattern
    and setting the common menu style in tablets and desktops. Also, it is exclusively
    showing the solution for devices with width less than 767 px (smartphones):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'TinyNav also provides some options such as inserting a label before the `<select>`
    element, setting the menu option from the current page to `active,` as I mentioned
    before, and defining the starter value from `<select>` if another option was not
    selected before. Here we can see how to use these three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This navigation pattern could be implemented for all devices with no extra
    work. In the example shown in the following screenshot, look at the plugin affecting
    only small devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/3602OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Footer-only
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The footer-only navigation is similar to the footer anchor approach, except
    for the `link` anchor in the `header` section.
  prefs: []
  type: TYPE_NORMAL
- en: Take care while using this navigation pattern because the users may not find
    the menu on the footer and they may have to scroll to the end whenever they want
    to access other menu options. This navigation pattern may well adapt for sites
    with small amount of content and those that require less user's effort for scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simply move the menu to the bottom of DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, if we change the code like this, it will directly affect the visual
    positioning of the menu for all devices. Make sure that your website is not too
    long before applying this technique because most users expect it at the top of
    the website.
  prefs: []
  type: TYPE_NORMAL
- en: Multi toggle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The multi toggle pattern is almost the same as the toggle menu because it also
    slides down just after the header, but it was crafted for complex menus, where
    there is at least one nested submenu. It works when the user clicks on the header
    button and a menu pops over the content. If the user clicks on the parent category,
    the children submenu will slide down displaying its subitems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the HTML code that will be used in this example. We will use the `<input
    type="checkbox">` element as a status controller of menu (opened or closed) and
    it will not be visible to users. I will explain in more detail about this technique
    later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The next step is customizing the menu style. Since it requires a lot of code,
    I highly recommend downloading the entire CSS source code provided by this book
    as suggestion for this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me explain two piece of code that may confuse you. In the beginning of
    CSS file there are properties with values " `\0025Bc`" (down arrow) and " `\0025C0`"
    (before arrow) that may render as arrow character instead of this code. Also,
    the `#toggle` checkbox should then be kept in the page (we cannot just set it
    as display:none), but not in the visible area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Just a little interruption in the CSS code, as I want to explain a little bit
    more about the functionality of the `#toggle` checkbox for submenus.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the label `link-to-menu` is clicked, the `<a>` tag sets its height to
    `3em`. Also, we need to prepare the style to increase the height of links because
    jQuery will input the `open` class in the `<li>` element with `submenu` inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, do not forget to include the `jquery` library in the `<head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Almost in the end of DOM (right before the `</body>` closing tag), we will
    execute the following script to manage the insertion of the `open` class only
    for submenus controlling which submenu will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected visual result is demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/3602OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Toggle and slide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This pattern is similar to the multi toggle pattern, but instead of just toggling
    the submenu, the submenu slides from left to right when the top-level link is
    clicked. There is a `back` link to facilitate the user's navigation. I really
    appreciate this interaction effect and it certainly may impress the users.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's use exactly the same HTML code from the multi toggle pattern for this
    example (including the call of jQuery script from the `<head>` tag).
  prefs: []
  type: TYPE_NORMAL
- en: 'About the CSS code, we will use the same code from the multi toggle pattern,
    but inserting the following code at the end of file. The main difference between
    toggle and slide and multi toggle pattern is the new arrow character for submenu(the
    right arrow); the submenu is displayed, but not on the visible area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the same suggestion, the following screenshot shows the exact moment
    before and after clicking on the **Projects** link (in this case, implemented
    only on smartphones):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/3602OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Almost at the end of DOM (right before the `</body>` closing tag), we will execute
    almost the same script we had seen before, but one more functionality is added
    now.
  prefs: []
  type: TYPE_NORMAL
- en: The following is the same code we used in previous example, which was added
    for the menu displaying control
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The following part of the code handles the function that adds/removes the `open`
    class for submenus. Whenever this class is set in the element by clicking on the
    parent element, the submenu may slide horizontally on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The off-canvas menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have used Facebook from the iPhone app or any other apps that now follow
    the off-canvas menu convention, you have seen an off-canvas panel on a native
    app. If you hit a menu button, a panel will slide and occupy part of the useful
    device area.
  prefs: []
  type: TYPE_NORMAL
- en: The jPanelMenu jQuery plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jPanelMenu plugin, [http://jpanelmenu.com/](http://jpanelmenu.com/), is
    a lightweight JavaScript solution which hides the menu that you specified and
    displays it when we click on a header button triggering the action. jPanelMenu
    has some interesting options to append, such as animation with duration and effects,
    keyboard shortcut, and choosing the direction. We will see an example with these
    features soon.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the following screenshot is a suggestion for the off-canvas menu style
    implemented only for smartphones. As usual, we keep the original top menu for
    tablet and desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The jPanelMenu jQuery plugin](img/3602OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start including the following CSS in the <head> tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will use almost the same HTML code from the footer navigation pattern,
    where we moved the menu to the final part of the HTML structure (footer area)
    and inserted the following link in the header of the page, because when the user
    clicks on it, the website will focus on the navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After downloading the jPanelMenu, let''s include the following code in the
    `<head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the following code right before the `</body>` closing tag too. Also,
    this plugin offers some cool options, such as defining which effect will be used,
    direction and duration used when the menu appears, keyboard shortcuts, and some
    callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There is no specific CSS code required for this pattern, but it still requires
    creating our CSS style for the menu to be shown beautifully.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3 – customizing menu using the toggle menu solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After seeing eight types of responsive menus and how to implement each one of
    them, let's choose the toggle menu to implement in our site.
  prefs: []
  type: TYPE_NORMAL
- en: If you are building your own site, feel free to analyze the best option considering
    all the features from each menu navigation pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how the top and left navigation work better depending
    on each situation. We also learned eight different navigation patterns by using
    CSS3 or JavaScript plugins.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover a way to handle the responsive font size
    of the text. Also, we will customize the font family by using CSS3 and three good
    JavaScript plugins, giving more creativity to heading titles.
  prefs: []
  type: TYPE_NORMAL
