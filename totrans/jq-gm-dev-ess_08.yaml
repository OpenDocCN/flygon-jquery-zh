- en: Chapter 8. Let's Get Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the time of the first videogame, a simple technique has been used to keep
    them interesting—**leaderboards** . Leaderboards are a simple way to keep the
    players playing your game. The players will try to perform better each time, better
    than their friends, or better than any other players in the world.
  prefs: []
  type: TYPE_NORMAL
- en: Social networks add a new dimension to this simple idea by allowing the game
    to publish the player score to his/her timeline (or feed). This has many advantages,
    one of them being that it will help potential new players to learn about your
    game. If they see that one of their friends just played your game, then they may
    want to try it too!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first show how to implement a simple server-side leaderboard
    using the same techniques we saw in the previous chapter. We will then see how
    to allow the player to log in with his/her Twitter account into the game and tweet
    the score on his/her behalf.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will see how to log in to the game using Facebook, publish events
    in the player's timeline, and create achievements.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to realize when you use Facebook or Twitter that you have to
    be careful to follow the rules they establish, and even stay informed about the
    change of the rules to keep your game compliant. It's been seen more than once
    that applications or games that were previously allowed to use those services
    were then banned.
  prefs: []
  type: TYPE_NORMAL
- en: We will show you how to use these two social networks, but the base mechanisms
    are the same for almost any service around that provides the same kind of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover these subjects in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple self-hosted leaderboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making cheating harder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the game with Twitter to allow the player to tweet his/her score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the game with Facebook to allow the player to win achievements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple leaderboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, creating a leaderboard will require some sort of database to keep
    a tab of the scores. As in the previous chapter, we will use PHP and MySQL to
    implement the server side of our game. However, unlike in [Chapter 7](ch07.html
    "Chapter 7. Making a Multiplayer Game"), *Making a Multiplayer Game*, playing
    together the solution presented here can be viable in real life. Requesting and
    saving highscores is an operation that takes very little server resources and
    isn't called that often; for each user, we will approximately query the server
    once every 10 seconds, as opposed to where we queried it many times per second
    for our MMORPG in [Chapter 7](ch07.html "Chapter 7. Making a Multiplayer Game"),
    *Making a Multiplayer Game*.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need a metric to use as a score. Here, we will simply use the
    time it took for the player to finish a level, in seconds. The following diagram
    shows the user interaction workflow that we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple leaderboard](img/5060OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As a UI, we will use two screens that we will implement in the same way we implemented
    the interface for the last chapter—simple `div` elements that we will make visible
    or invisible, as we need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first screen is simply there to announce the beginning of a level and prompt
    the user to get ready. The second one is more complex. It shows the result of
    the player, the list of the top five players, and if the player scored amongst
    them, give him/her the opportunity to save his/her name into this list. The following
    screenshot shows what this will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple leaderboard](img/5060OT_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We chose to use this mechanism instead of asking for the user's name at the
    beginning of the game, and then automatically save the score because this mimics
    the behavior of old arcade games.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means there are two server-side actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the top five list of scores for a level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving a score for a given level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will implement those two actions with two files, namely, `highscore.php`
    and `save.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Saving highscores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The database table we will use holds three columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Level`: This is an integer that holds the index of the level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Name`: This is a string that holds the username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time`: This is an integer that represents the number of seconds it took the
    user to finish the level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script that saves the highscore is very simple—we will transmit the name,
    score, and level to the server. We will then save them to the database with the
    following SQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the script is very similar to what we saw in the previous chapter,
    so we won't reproduce it here, but you can have a look at the full source code
    if you want.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving highscores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To retrieve the highscores, you can simply provide the level to the server and
    get the scores in return, but we have chosen a slightly more complex mechanism.
    We will give the task of deciding if the current user is part of the top five
    list, and if so, at which position. This will allow you to implement anti-cheating
    measures later.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, you will provide the level and user''s time to the server and it will return
    a JSON file holding all the information you need to generate the leaderboard screen.
    We chose the following format for the JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The idea here is to have a flag to indicate that the player is in the top five
    list, `intop`. If this flag is true, then another variable named `pos` is present
    too. This variable holds the index in the array, `top`, that holds the player's
    time. All the other entries in `top` are the scores of players in the leaderboard,
    sorted from the first to the fifth. If `intop` is false, the array only holds
    the other player's scores.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate this response, we will first use a SQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This query starts like the other queries we used up until now, but at the end
    (highlighted in the preceding code above), it is a modifier that specifies that
    you want the result sorted by ascending times (`ORDER BY time ASC`) and that we
    only want five results (`LIMIT 5`).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is not much work to do to parse the result and generate the JSON. The
    only subtlety is the insertion of the player''s score if it is good enough. Here
    is the complete code for this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted parts of this code are the ones that take care of the player's
    score.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the highscores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the client side, we will generate the screen with the result and an input
    field to allow the player to submit its name to the leaderboard, if he/she so
    wishes. Let''s have a look at the code that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The code that generates the list itself is highlighted. Here, we create three
    input fields—one for the player to enter his/her name and two hidden ones to hold
    the level number and the player score. They are followed by a link that will be
    used to submit the score. The code that handles the link is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we simply retrieve the values of the input fields and then submit them
    to the server. As a small feedback to the player, we remove the submit button
    once it's done.
  prefs: []
  type: TYPE_NORMAL
- en: Making cheating harder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no silver bullet to avoid a cheater in general. This is particularly
    true with games written in JavaScript, since their source code is so easy to access.
    Of course, you can obfuscate your code, but that will only slow down someone really
    motivated to figure out your code. There are, however, a few other techniques
    that you can use to make it more difficult or less efficient to cheat in your
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side verification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The safest way to prevent cheating is to move things on the server side. If
    you remember, that's exactly what we did with the fight mechanism in our MMORPG
    in [Chapter 7](ch07.html "Chapter 7. Making a Multiplayer Game"), *Making a Multiplayer
    Game*. To apply the same paradigm to a platformer would effectively mean transmitting
    every keystroke to the server and letting the server decide the resulting position
    for the player.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, this is not a realistic solution. But you can still use the server-side
    logic to validate the score submitted by the player. You can have a series of
    invisible checkpoints distributed in the level where you ping the server. If the
    user submits a score without having passed through each of those, then something
    fishy is going on. You can also record a series of metrics, such as how many times
    the player dies or jumps.
  prefs: []
  type: TYPE_NORMAL
- en: The thing is that you must really tailor the validation for your game; there
    is no general approach. However, it is very important that your anti-cheating
    measures don't flag an honest player as a cheater, because that will generate
    a lot of frustration. It's also important for you to think about how much effort
    you want to invest in this area, since the more time you spend on this, the less
    the time you will spend on your game's other areas.
  prefs: []
  type: TYPE_NORMAL
- en: For your game, we will implement something simple. We know how fast the player
    is moving, we know how far the end of the level is, so we can compute a minimum
    time it will take the player to go through the level. We will compare the player's
    score to this and validate it if it's not smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will simply add those lines in `highscore.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the player score was detected as `impossible`, it will still be displayed,
    but the player won't be prompted to enter his/her name.
  prefs: []
  type: TYPE_NORMAL
- en: Making your variables less readable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One thing you can do is make it harder for someone to cheat your game simply
    by opening the browser''s inspector and changing a value somewhere, since we used
    the hidden input field to store values before sending them back to the server,
    to save the highscore. This makes sense in a strictly semantic way and makes our
    server-side implementation rest, but is very easy to hack. The following screenshot
    shows what a user would see if he/she opens the page in Chrome''s page inspector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making your variables less readable](img/5060OT_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One simple rule of thumb is to avoid storing any important information in the
    DOM, since it''s accessible to any user, even those without much programming knowledge.
    In our case, we will simply remove those from the call to `save.php` and use the
    session to store the values instead. In `highscore.php`, we can simply add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `save.php` file only has to look for the level and time into the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This simple change already makes the game harder to cheat.
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscating your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Obfuscating your code is a very simple step, but will help you quite a lot.
    Once your code is obfuscated, it will be almost unreadable in the inspector. The
    following example is a piece of code that asks for the leaderboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The same code once obfuscated (through UglifyJS) looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is already way more difficult to debug and at the same time, it's smaller!
  prefs: []
  type: TYPE_NORMAL
- en: Making your network protocol less readable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the client side of the code is fixed, there is still a place where a cheater
    could access the game variable—network traffic. Let''s have a look at what a sniffing
    application can see when the player finishes the level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making your network protocol less readable](img/5060OT_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a problem since without even having to hack the client-side code, a
    player could simply forge a packet with the right information to cheat. Here are
    three simple things that you could do to make it more difficult for a cheater
    to understand your network traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: Give random names to the variables so that by simply looking at them, the cheater
    cannot find out what value they hold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Encode the content of the variables. This is very useful for this situation,
    because here the user typically knows the value of his/her score. He/she will
    only have to look for the variable that holds it to find out what he/she has to
    modify.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a lot of random variables to make it harder to know which ones are really
    being used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like before, this will only make it slightly harder to cheat for a determined
    player but combined with all the other techniques in the following sections, it
    will probably discourage most of them. Let's implement each one of these.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's first begin by encoding the values. This can be done in lots of ways,
    some more secure than others. Here, our goal is really only to prevent the cheater
    from searching for his/her score in the list of values to identify which one holds
    it. So, we don't need any complex encoding. We will simply use a left shift (`<<`
    on the client) and then a right shift (`>>` on the server).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the client-side code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The server counterpart is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To confuse the user even more, we will transmit the value in a clear manner
    in many other variables that won't be readable on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Randomly naming the variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is not much to explain here; just replace the name of the variable! If
    you''re really paranoid, then you can change the variables each time you call
    the server, but that''s not what we will do here. Here is the client-side code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The server-side code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Adding random variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the names of the variables don''t convey their content anymore, it''s
    very important that you create more variables, otherwise it''s very easy to just
    try each of them to find out which one contains the score. Here is an example
    of what you could do on the client side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The server doesn't have to change anything, since those new variables are just
    ignored. There will be some things that you may want to do, such as duplicate
    values and use the player score on the variable that won't be used.
  prefs: []
  type: TYPE_NORMAL
- en: While doing these things, you have to be very careful to annotate the code so
    that you remember which variables are the correct ones!
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Twitter is an amazing way to share simple information with other people. You
    may want to use it in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow the player to log in, thus providing a unique username
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow the player to tweet his/her high score or progression in the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will now see two possibilities to integrate your game with it.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter for dummies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a very simple way to use Twitter that doesn''t even require you to
    use any kind of API. If the user is already logged in to Twitter, you can prompt
    him/her to submit a prewritten tweet, simply by opening a URL. This URL is formatted
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted part of this address is the status you wrote for the player.
    What we could do in our game is to provide a `tweet` `this` link next to the **Submit**
    button on the leaderboard screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted part is where the magic happens. You will notice that we used
    JavaScript's `escape` function to make sure the string we provided is formatted
    for a URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'This method is very easy to implement, but has some limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: If the user is not already logged in, he/she will have to do so before posting
    his/her tweet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot access the user's Twitter handle to use it for the local leaderboard.
    This means that if the player wants to tweet and save his/her time, then the name
    will have to be entered here too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each tweet, a new window is opened and the player will have to confirm it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to allow the user to log in and automatically publish tweets without
    having to open a new window each time, then you will have to use Twitter's API.
  prefs: []
  type: TYPE_NORMAL
- en: Full access to Twitter's API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The more complete solution to integrate with Twitter is to ask the user for
    permission to connect his/her account to the game. The basic mechanism for this
    uses **OAuth**, which is an open authentication standard supported by a lot of
    companies such as Twitter, Google, and Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give the player the choice to log in using Twitter or not, we will slightly
    change the startup screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Full access to Twitter''s API](img/5060OT_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the player clicks on **Start game**, then he/she will start to play. If he/she
    clicks on **Log in with Twitter**, then he/she will be prompted to authorize the
    game with Twitter and then return to the game's startup screen.
  prefs: []
  type: TYPE_NORMAL
- en: Registering your game with Twitter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before doing anything else, you have to register your game with Twitter. To
    do this, you first need to log in to the Twitter developer''s site ([https://dev.twitter.com](https://dev.twitter.com)).
    Then, you can click on **My Application**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your game with Twitter](img/5060OT_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can click on **Create a new application**, fill in all the required
    fields, and agree to the terms and conditions of **Rules of the Road**. Once this
    is done, you will be prompted with a screen that presents to you all the properties
    of your newly created application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your game with Twitter](img/5060OT_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note the two areas of circled code in this screenshot; you''ll need
    them later. There is one last thing that you will need to configure here. Go to
    the **Settings** tab and scroll down to **Application Type**. Here, by default,
    **Read only** is selected. If you want to be able to publish tweets on the user''s
    behalf, you''ll need to change this to **Read and Write**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your game with Twitter](img/5060OT_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's it; your game should now be configured correctly on Twitter's side.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side helper library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You could implement all of the interactions with Twitter's API directly in PHP,
    but this would be tedious; thankfully, there exists a lot of libraries to help
    you with this. The one for PHP is called **twitteroauth** ([http://github.com/abraham/twitteroauth](http://github.com/abraham/twitteroauth)).
    Other languages have other libraries, so don't hesitate to look at Twitter's developers'
    documentation to learn more about those.
  prefs: []
  type: TYPE_NORMAL
- en: The very nice thing about twitteroauth is that you can install it on almost
    every kind of hosting that supports PHP. You just need to copy the library's file
    in the same directory where you have your game's file. In our example, we copied
    them in a subdirectory called `twitter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to configure the library. To do this, open `config.php` from
    the `twitteroauth` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this file, at `(1)` and `(2)`, you have to write the two values that you
    noted previously in your application page on Twitter's developer website. Then,
    at `(3)`, you have to write the URL of twitteroauth's `callback.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The very last step is to edit `callback.php` and to replace the following line
    with the address of your game''s index file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the workflow used to authenticate and authorize your game with Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication](img/5060OT_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is not as complicated as it looks, and a big part of this workflow is
    already implemented by twitteroauth. We will now create a login page with a **Twitter**
    button. We will use a simple link that points to twitteroauth''s `redirect.php`
    file. When the player clicks on it for the first time, he/she will be redirected
    to a page on Twitter''s website that asks him/her to authorize the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication](img/5060OT_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, once the player does this, he/she will be redirected back to the URL you
    specified in the `callback.php` file. If the player has already done this once,
    he/she will just be able to log in directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'What would be useful from now on is the ability to know in our JavaScript code
    whether a player is already connected or not. To do this, let''s transform our
    game HTML file into a PHP file and add the following code at its beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This code enables session tracking, includes some files of the `twitteroauth`
    library, and then checks to see if an access token is stored in the session. This
    will be the case if the player logged in with Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the server connects to Twitter to retrieve the user object. This is all
    well and good, but the JavaScript code still has no idea about all this. What
    we need for this is to create a custom script with the values we want to transmit
    to the client''s JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, if the player is logged in with Twitter, we will have the global variable
    `twitter` set to `true` and the global variable `twitterName` holding the player's
    screen name.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing that you may want to do is to give feedback to the user that
    he/she is successfully logged in with Twitter and give him/her the possibility
    to log out. To do this, we will slightly change the start screen if the player
    is already logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With these relatively small changes, you've already implemented authentication
    through Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing high scores on Twitter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the user is connected to Twitter, you can allow him/her to tweet his/her
    time in a much more seamless manner. To do this, we will create a new server-side
    script called `twitterPost.php`. This file will use Twitter's `statuses/update`
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the complete script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You probably recognized most of the code from what we added at the beginning
    of our game page (only the highlighted part is new). The last two lines create
    and then send to Twitter the status you want to publish. It's pretty straightforward,
    but there is more to what we can do—since the player is logged in, you know his/her
    screen name, which you can use for the leaderboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the client-side code, we will generate a slightly different version of the
    leaderboard as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here, we make the input field holding the player's name hidden and fill it with
    the user's screen name. Then, we write the screen name in the leaderboard. The
    nice thing with this is that the server-side code doesn't change at all.
  prefs: []
  type: TYPE_NORMAL
- en: That's all that we will implement with Twitter here, but I encourage you to
    take a look at the complete Twitter API and be creative!
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many ways, integration with Facebook resembles integration with Twitter.
    Facebook offers, however, much more game orientation. In our case, we will implement
    achievements for logged-in users. We will use Facebook's PHP SDK, but other languages
    are supported too.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for Twitter, we need to first register our application in Facebook. To do
    this, log in to Facebook''s developer website ([https://developers.facebook.com/](https://developers.facebook.com/))
    and click on **Apps** in the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating with Facebook](img/5060OT_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on **Create New Apps** and fill in the required information. You
    will then be prompted with your newly created application page. Here, you''ll
    have to note the two values shown in the following screenshot (just as we did
    for Twitter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating with Facebook](img/5060OT_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the red arrow in the preceding screenshot, you'll notice that
    you can choose how your app and Facebook will interact. To have full access to
    Facebook's Open Graph API that allows you, amongst other things, to publish achievements,
    you need to select **App on Facebook**.
  prefs: []
  type: TYPE_NORMAL
- en: This will allow you to have your game load into an iframe in Facebook itself.
    To do this, you will, however, need to have a valid HTTPS certificate installed
    on your domain name. But if you only want your game to load from your own server,
    then you don't need any (you'll still need to enter an address in the corresponding
    field, and you can simply prefix your non-secure address with `https` to make
    it valid).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one last step that you need to take to make it possible for your Facebook
    application to give achievements—register it as a game. To do this, simply click
    on **App Details** on the left. Then, select **Games** under **App Info** | **Category**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating with Facebook](img/5060OT_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Authenticating with Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic authentication mechanism for Facebook is very similar to that of Twitter.
    There is, however, a small difference with regard to the access—in Twitter, you
    had to define that your application needed read and write access in the developer's
    website, whereas with Facebook, the granularity of what access you ask the user
    for is much finer and it's only during the login phase that you specify those.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the code required for authentication. Just as for Twitter,
    we will first write the instructions that try to get the user at the beginning
    of our game file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted line defines that we want our game to be able to publish entries
    on the player's timeline. The values, `(1)` and `(2)`, are the values that you
    noted in the application configuration page.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `$facebookUser` is null, it means that the user is already logged in, otherwise
    we will have to display a login button. To do this, we will write a code very
    similar to the one we wrote for Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that Facebook's PHP SDK offers a convenient method to generate
    the URL for logging the user in or out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will add a small piece of code to indicate to the JavaScript code whether
    the user is logged in to Facebook or not. Once again, the code here is very similar
    to the code we used for Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating achievements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now create an achievement for our game. To do so, you will need two
    files on your server:'
  prefs: []
  type: TYPE_NORMAL
- en: An HTML file with a series of `meta` tags in the header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An image file that will represent the achievement in the player's timeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The HTML file will not only serve as a configuration file for your achievement,
    but it will also be linked to the achievement publication on your player''s timeline.
    For Facebook to recognize the achievement as valid, you need to have the following
    seven `meta` tags defined in the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '`og:type` contains the value `game.achievement`. It differentiates achievements
    from other kinds of OpenGraph entities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:title` is a very short description of the achievement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:url` is the URL of the current file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:description` is a longer description of the achievement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:image` is the image mentioned earlier. It can be in PNG, JPEG, or GIF format
    and have a minimum size of 50 x 50 pixels. The maximum aspect ratio is 3:1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`game:points` is the number of points associated with this achievement. In
    total, your game cannot give more than 1000 points and the smallest number allowed
    is 1\. Achievements with greater point values will have a higher probability to
    be displayed on the player''s friend''s news feed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fb:app_id` is your application''s ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The body of the HTML file can be a nice page explaining what this achievement
    is all about, or anything you really want. A very simple example of a complete
    achievement page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting achievement will appear similar to the following screenshot on
    the player''s timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating achievements](img/5060OT_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But, writing this document is not enough for your achievement to be completely
    configured. You will have to submit it to Facebook. To do this, you have to do
    a `POST` request at the correct URL with the correct parameters. This request
    should also be associated with an application token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Application tokens are a way in which Facebook ensures that it''s really your
    game and not some other application that is communicating with it. The easiest
    way to do this is to write a PHP page that will in turn submit your achievement(s).
    Here is the complete code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This code is quite verbose, but you'll recognize most of it from the previous
    ones. The important part has been highlighted—first, we retrieve the application
    token, then we associate it with the future request, and finally we use the SDK
    to do the `POST` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The address for this `POST` request is formatted as follows: "Application ID"
    / "achievements". The transmitted parameter is simply the URL of the achievement
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the error message generated here (if something goes wrong) can be quite
    obscure, you may want to first validate your achievement file by using the debugging
    tool provided by Facebook at [https://developers.facebook.com/tools/debug/](https://developers.facebook.com/tools/debug/).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the achievements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that Facebook has registered the achievement, we can award it to our players.
    The command to do this is also a `POST` request and must also be associated with
    an application token. For the sake of simplicity, we will create a simple PHP
    page that will award the achievement when called. This is far from optimal in
    a real-life situation, where you want to avoid having the user simply call the
    file himself/herself. You can award the achievement in the `highscore.php` file
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the complete code of this file; it is very similar to the file we used
    to register our achievements, and the differences are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we create a `POST` request to a URL with the format: "User ID" /
    "achievements". Now, we simply have to asynchronously call this file from our
    game when the user finishes the first level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned a lot during this chapter, even though we have only scratched
    the surface of what kind of social interactions are possible with the new tools.
    Facebook and Twitter's APIs are large and change constantly. If you want to use
    them in the best possible way, I would really recommend reading their complete
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: But, when using third-party services, especially the free ones, you have to
    realize that you become dependent on them. They can change anything at any time,
    without giving you much notice. They can decide that they don't want your game
    to use their service anymore. Always keep this in mind, and if possible, make
    sure that you have an exit strategy in those situations!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore another hot topic—making your game mobile!
    For this, we will take our platformer and expand it to work on modern smartphones
    and tablets.
  prefs: []
  type: TYPE_NORMAL
