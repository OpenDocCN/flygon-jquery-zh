- en: Chapter 2. Designing Responsive Layouts/Grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"To think about the web responsively is to think in proportions, not pixels."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The previous quote by *Trent Walton* summarizes the ideas in this chapter because,
    when we are working with responsive design, we must think about fluidity, adaptation,
    and not about being pixel perfect. This is the reason that the habit of checking
    pixel-by-pixel is in a fast decline.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, there are two ways to solve this problem and keep our site responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing the site conversions using a little math to ensure a good result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using responsive grid systems where you pick a bunch of columns and keep your
    code within this column using relative dimensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These advances in mobile technology and the quick evolution of websites' techniques
    have pushed everyone to review the concept of the limited dimensions of sites
    and start to think in terms of a structure that will adapt itself and offer the
    content required for each situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adapting the site using JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How viewing objects in the percentage format gives flexibility to the structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to assimilate features of responsive grid systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to code three different responsive grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Photoshop grid templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up the `meta` tag of `viewport` before starting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement wireframes using Foundation4 Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapting the site using JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the previous chapter, we may use media queries to identify the
    current available area and render specific design customizations. This property
    is very useful, but does not work in older browsers, such as Internet Explorer
    8 and older. There are two main solutions we will take a look at that handle media
    queries very well: **Adapt.js** and **Respond.js**.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's undertake further analysis of the characteristics of each solution and
    see what it offers in addition to capturing the device dimensions dynamically
    (much like the `@media` query does) as an alternative to projects that need support
    for older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Adapt.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the characteristics of Adapt.js:'
  prefs: []
  type: TYPE_NORMAL
- en: After capturing the browser's dimensions, Adapt.js serves only the CSS that
    is needed, when it is needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a very lightweight file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some points that should be considered before adopting it are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: This analysis of the size of the browser window is done on demand and short
    delays may occur in order to render the correct CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script must be inserted at the beginning of the code (in the `head` tag)
    and the initial loading of the page may take a bit longer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are some default CSS files and media queries that come with Adapt.js
    as a suggestion, which can be used on our site. The following are the files provided
    by [http://adapt.960.gs/](http://adapt.960.gs/) by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adapt.js](img/3602OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you download and place the files in your project, add the following piece
    of code in the `<head>` tag. In the following code, we are able to change the
    default path of the CSS file, the frequency of dynamic adaptation (once or whenever
    each window changes), and the CSS files based on ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Respond.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Respond.js files can be downloaded from [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).
    The following are the characteristics of Respond.js:'
  prefs: []
  type: TYPE_NORMAL
- en: This solution seems to be easier than Adaptive.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a lightweight file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need to first check if the browser really requires this script, executing
    it only if needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two useful APIs helping us to debug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cons are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It also has a certain delay in executing the correct CSS choice at the right
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you download and place the files in our project, just add the following
    code in the `head` tag and it will execute the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Respond.js uses the `@media` query that we already should be using in our code
    and applies the styles dynamically. There is no extra work!
  prefs: []
  type: TYPE_NORMAL
- en: How percentage gives flexibility to the structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some old websites, and even recent ones, that do not care about the flexible
    structure, still use pixel as the unit of measurement. Pixel provides us greater
    control of its structure and accuracy. But, nowadays, we no more have control
    over where the website will be displayed (as we saw in [Chapter 1](ch01.html "Chapter 1. Exploring
    Responsive Web Design"), *Exploring Responsive Web Design*), which generates the
    need to build flexible structures where elements may stretch and fit the dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Percentage always works as it is related to the value declared in its parent
    element. So, if a `div` tag is of size 50 percent and its parent element has 600
    px, the `div` tag will be of the size 300 px, as the following figure shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How percentage gives flexibility to the structure](img/3602OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The same applies to a percentage where its parent element is of 50 percent
    of the actual size of an object, the `div` tag that is of 50 percent of the size
    will look like it is 25 percent, maintaining proportions. Let''s see the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How percentage gives flexibility to the structure](img/3602OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'But, the question is: what if we do not set the width of our parent element?
    *Maurício Samy Silva* explains this very well in his blog at [http://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/](http://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/).
    In this case, the parent element takes the default width of our current viewport.
    In other words, with each resizing of the browser window, this width changes automatically
    and this event is exactly what gives us the power of flexible structure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the previous example, where `div` is set to 50 percent, it visually
    appears to be half the size of the usable area as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How percentage gives flexibility to the structure](img/3602OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you've seen the importance of the fluidity of the structure, another
    important task is to transform the padding and margins as well as the percentage.
    It has an impact, for example, when we need a big horizontal padding showing on
    large screens because, if the same website is seen on a smartphone and the padding
    has been defined in pixels, it will take a lot of space on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We could make an exception to the rule for mobile phones, decreasing this blank
    space. But, try to imagine the hard work that we would have to do for all the
    elements! The best option is to convert this spacing from pixel to percentage.
  prefs: []
  type: TYPE_NORMAL
- en: Converting pixel to percentage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The topic of converting pixel to percentage is important because this is where
    the magic starts to unfold; in other words, we will see with an example how to
    abandon the absolute size in pixels and convert it to percentage. The process
    of converting pixel to percentage should be used especially if the purpose of
    our project is to have greater flexibility in controlling the elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s practice converting the following sample pixel-based structure into
    percentage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting pixel to percentage](img/3602OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code is a sample of the CSS code representing the details in
    the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s see the magical formula: *Target / Context = Result*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous formula, *Target* is the original element width in pixels,
    which is `690` in the following code, *Context* is the width of its container,
    which is `960`, and *Result* is the flexible value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sharing a bit of my experience, I would suggest putting the original values
    ahead of the result. This makes a difference when we want to convert the size
    again and we forget the original pixel value.
  prefs: []
  type: TYPE_NORMAL
- en: Also, I would like to emphasize the importance of not rounding up the math result.
    This is important for accuracy about the flexibility of the elements, preventing
    undesired breaks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure is the result of conversion to a flexible structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting pixel to percentage](img/3602OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To help make this conversion easier, there is a tool named **Flexible Math**
    that may be found at [http://responsv.com/flexible-math/](http://responsv.com/flexible-math/).
    This site does exactly the math necessary for pixel conversion as long as it is
    based on the parent element size (as we've seen in the previous section).
  prefs: []
  type: TYPE_NORMAL
- en: There is also another kind of conversion that is from em to px of font sizes
    and line heights, but we'll learn about it in more detail in [Chapter 4](ch04.html
    "Chapter 4. Designing Responsive Text"), *Designing Responsive Text*. Although
    we are talking about EM, the magical formula used will be the same, requiring
    some attention on other determined points.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see in [Chapter 5](ch05.html "Chapter 5. Preparing Images and Videos"),
    *Preparing Images and Videos*, that not specifying the size of the `<img>` tag
    is only the first step to scaling the image. Later, we'll see in detail how to
    make images fluid and also some ways to display images and videos in the best-suited
    way for each situation.
  prefs: []
  type: TYPE_NORMAL
- en: If we have a lot of work with math conversions and it is consuming a lot of
    time, we should think of another way of doing it. There is a more convenient and
    faster solution to get this flexible structure, the name of which is the responsive
    grid system, as we will see in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: What is a responsive grid system?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A grid system itself may be labeled as a development kit or a small collection
    of CSS files that will help us develop websites quickly. Some of them have a fixed
    width of columns (that may vary depending on the tool used). Columns are a grid
    system's smallest unit of measurement. Most grid systems contain 12-16 columns.
    Gutters are margins used to create space between columns.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, grid systems save development time if the design is made grid-based.
    Sometimes, the layout creation may be limited by the use of columns, but this
    is not too common. The advantages of grid systems are that they help us achieve
    better readability and balance the visual weight, flexibility, and overall page
    cohesiveness.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand how the grid system works, look at the following screenshot
    and notice that the header region''s width could be measured as 12 columns (full
    width) and the **Sidebar** region as only 3 columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is a responsive grid system?](img/3602OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When shouldn't we use a grid? Implementing a grid will probably be impossible
    if your site's layout uses irregular column sizes and irregular gutters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here comes the question: what are the main differences between the responsive
    grid system and the non-responsive grid system?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the distinguishing characteristics of the responsive grid
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: It must have different traits at different sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must be fluid between breakpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must have enough control to decide which columns will transform and at which
    point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes should ideally still make sense at all breakpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive grid systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we are going to see three different systems to apply, but for our progressive
    understanding, I would like to start with describing the less complex systems
    and then those with more options and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Read all these grid systems before you choose the one that matches your project
    best. Also, there are other types of responsive grids that I have not tried to
    implement in a real project yet.
  prefs: []
  type: TYPE_NORMAL
- en: Fluid Baseline Grid system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The objective of this development kit is to provide ease and agility in developing
    for responsive websites. The Fluid Baseline Grid code ([http://fluidbaselinegrid.com/](http://fluidbaselinegrid.com/))
    is simple, lightweight, non-intrusive, and is able to be customized depending
    on the needs of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'This grid system is based on a three-column folding layout: one column for
    mobile devices, two for tablets, and three for desktops and beyond. Let''s see
    its usage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the code this way, we just need to use the class `g1` when we want the
    content to fill just one column of the structure; then, `g2` for two columns and
    `g3` for three columns. Look at the following sample of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure is a preview of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fluid Baseline Grid system](img/3602OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see a website sample first and then try to code a structure using
    the classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fluid Baseline Grid system](img/3602OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The HTML result should be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Did you notice that the compass image was hidden on the mobile phone screen?
    In this case, the solution was to hide the carousel on the mobile CSS and show
    it on the tablet CSS (and desktop as well).
  prefs: []
  type: TYPE_NORMAL
- en: 'The major advantages to using Fluid Baseline Grid are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fluid columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Baseline grid with beautiful typographic standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive design behaviors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses Normalize.css to fix common browser inconsistencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple file structure containing only the minimum number of files to get started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Polyfills support for IE6/7/8: Respond.js (media queries) and html5shim (HTML5
    elements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fluid Columns** are defaulted to a minimum three-column folding grid with
    columns around 31 percent wide and gutters 2 percent wide between columns. If
    the website design requires more columns, it''s not a problem, because it may
    be changed in the CSS code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Baseline Grid** brings the cross-browser solution to typography, improving
    the readability and creating better harmony within the text. The main fonts used
    are Georgia and Futura and they can easily be changed to match the project''s
    needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fluid Baseline Grid** is designed for mobile-first and provides common breakpoints
    to our implementation of responsive design. The CSS code is prepared to start
    customization from the small screen and suggest differences on content displays,
    depending upon the usable area in the device. As long as it is based on columns,
    the Fluid Baseline Grid is divided into: one column for mobile devices, two for
    tablets, and three for desktops and other devices.'
  prefs: []
  type: TYPE_NORMAL
- en: 1140 Grid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 1140 Grid ([http://cssgrid.net/](http://cssgrid.net/)) has a simple structure.
    Its objective is to offer more agility in code development when we define the
    width of each main element. It was divided into 12 columns that will or will not
    be merged for your ease, depending on your preference. But, when this project
    was designed, the width dimension was limited to a maximum of 1280 px. If the
    project does not require display on a big device, 1140 Grid works very well for
    all other smaller dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clarify, the following code shows how, in fact, you can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![1140 Grid](img/3602OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As part of our knowledge assimilation process, let''s go back to the Pixelab
    sample and code using the 1140 Grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The row class centers the inner columns and defines `1140px` as `max-width`.
  prefs: []
  type: TYPE_NORMAL
- en: The classes, `.onecol` , `.twocol` , `.threecol` , `.fourcol` , `.fivecol` ,
    `.sixcol` , `.sevencol`, `.eightcol` , `.ninecol` , `.tencol` , `.elevencol`,
    and `.twelvecol` can be used for each column. Also, they will be used in any combination
    within a row that adds up to twelve columns or less. In the last element, remember
    to add a class `last` too; that will remove the extra margins.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison with Fluid Baseline Grid, one of the few differences is that the
    1140 Grid would have already implemented more columns (providing more options
    to a developer), but Fluid Baseline Grid developers are free to implement it there
    if they need it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the simple structure, Grid 1140 is also highlighted by the following
    characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS code prepared to scale images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gutters based in percentages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser support (except for IE6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloadable PS template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundation4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Foundation4, [http://foundation.zurb.com](http://foundation.zurb.com), is a
    complete framework with many components inside. They are predefined and stylized
    so professionally that they will serve as the basis for our projects. Focusing
    only on the grid component of Foundation4 surprises us again as it provides many
    options.
  prefs: []
  type: TYPE_NORMAL
- en: 'This framework is different due to its download area, where it shows the screen
    shown in the following screenshot, because it gives developers the freedom to
    start their project in the way that best suits them (if they already have some
    knowledge about grid in general):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation4](img/3602OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But, no worries; if you are still learning about it, by default, it comes with
    most-used values such as 12 columns and 62.5 em (1000 px) of maximum screen size.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other good features in Foundation4 which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Predefined HTML classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small and large grids.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting our grid.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offsets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centered columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source ordering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile-first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normalize and Modernizr scripts supporting browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no support for browsers such as Internet Explorer 7 and older. Also,
    Internet Explorer 8 has limited support for the Grid and some UI components such
    as the Input Switcher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To work with Internet Explorer 8, Foundation4 drives developers to use a complementary
    solution from its previous version which may be found at [http://foundation.zurb.com/docs/support.html](http://foundation.zurb.com/docs/support.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This framework deserves more attention because it has more options and advantages.
    That is the reason we see their characteristics in detail. In the next examples,
    we will use 12 columns as suggested by the tool as reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Foundation4 has a bunch of predefined HTML classes that help our development
    a lot because all the code is already created and we just need to call it using
    the class name. In the following example, we see a small class and the number
    of columns that the element will occupy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation4](img/3602OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the sum of 3, 6, and 3 is equal to 12\. Also, there is an option
    to change the class from `small` to `large`. If we swap these classes, when we
    are decreasing the browser width reaching upto 768 px, each `<div>` tag takes
    up the maximum width. There is the possibility of having these two classes together—the
    content being shown for the small screens with dimensions smaller than 768 px—and
    for large dimensions, the width is as given the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the code would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Foundation4 Grid allows for nesting down as far as we would like. This technique
    is normally used to perform a quite complex design implementation or to better
    position the form elements. The following code is a sample of its usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation4](img/3602OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can create additional space between columns in a row using `offset`. Manipulating
    this parameter, we may align the column as we want. Remember that all the offset
    comes to the left of element. Again, the sum of numbers should be equal to 12\.
    Let''s see this in the following example, where the first `div` tag fills two
    columns, then there are two columns offset, and then another `div` tag fills eight
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation4](img/3602OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `centered column` class was created to position a specific column (not
    the content inside) to the center of the row. Foundation4 offers two classes:
    `large-centered` and `small-centered`. As we''ve seen before, a small version
    will be shown as it is not overridden by a large version. For example, if we want
    to display a `div` tag filling six columns and that is centered (for small and
    large versions), we should use the following code before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation4](img/3602OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Maybe the following feature is a little confusing, but it is very useful when
    we want to order the source code to be placed on top of our relevant content.
    To do this, we just need to use the classes `push` and `pull`. The following feature
    will also affect each version separately (using `small` or `large` before the
    function, that is, `large-push-8`) or the two versions together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation4](img/3602OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Photoshop grid templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To facilitate the visualization of columns while creating our design, there
    is a Photoshop plugin named Guideguide.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Guideguide plugin ([http://guideguide.me/](http://guideguide.me/)) is supported
    for some versions of Photoshop, which are: CS5, CS6, and CC. However, if you have
    Photoshop CS4, Version 2.03 of this plugin will work, but it will no longer be
    updated with new features. This is a tool that guides us in creating custom guidelines
    for our Photoshop documents.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the Guideguide plugin and creating a blank file, when we are
    accessing it in Photoshop, it will open the window shown in the following screenshot;
    I suggest filling it with the initial values shown, if you are not too familiar
    with grids:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Photoshop grid templates](img/3602OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, clicking on the **GG** button, it will create guidelines in our document
    which will be very useful in layout creation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the meta tag of viewport before starting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `meta` tag of `viewport` works by displaying just a portion of the full
    viewable area. This configuration is very important when we are crafting a responsive
    website because, without it, the mobile device browser will return a zoomed-out
    version of the website to the user. There is no standard syntax for its usage,
    but all common mobile browsers support the following tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Other features such as `initial-scale` can be used to define the `meta` tag
    of `viewport`, which may prevent the user from opening the website in the zoomed-in
    mode and `maximum-scale` will restrict the user from zooming in on the content.
    The following code is an example of `viewport` restricting the user experience,
    giving no permission to use the zoom feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2a – creating the layout design for wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we already have the wireframe and knowledge of how to operate the
    columns of the grid, we need to adapt the wireframe to fit the main elements in
    the columns, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exercise 2a – creating the layout design for wireframes](img/3602OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, it's about time we colorize it and imagine offering the user the
    best experience for all devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the wireframe from *Exercise 1* in [Chapter 1](ch01.html "Chapter 1. Exploring
    Responsive Web Design"), *Exploring Responsive Web Design*, the following screenshot
    shows a suggestion for the layout design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exercise 2a – creating the layout design for wireframes](img/3602OS_02_19b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we are customizing the main elements, remember to keep it inside the guidelines,
    which will make the next step easier. Otherwise, we'll consume more time to code
    it than expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the main elements fit in columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exercise 2a – creating the layout design for wireframes](img/3602OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 2b – using Foundation4 Grid to structure our website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After seeing the use of some Responsive Grid Systems (starting from a simpler
    solution and going for a more complete solution), let's structure our code using
    the Foundation4 Grid, creating the response quickly, and without writing one line
    of CSS code to do that. Also, remember to configure the viewport in the `<head>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Foundation4 Grid, perform the following recommended steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start coding the HTML script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the rows in the structure and add a `row` class to the existent element
    or to a new `div` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Measure how many columns each main element will fill and set this value in the
    classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s see how it is done in the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, I broke one extra line, making it easy to see each row, and also
    highlighted the classes used by the grid. Let''s observe the sum of the columns
    from each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '`small` = 12 columns'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`small` = 12 columns (4 + 4 + 4) and `large` = 12 columns (one column per line)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`small` = 12 columns (4 + 4 + 4)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`small` = 12 columns and `large` = 12 columns (2 + 8 + 2)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result without writing any CSS code, in
    a device with a width greater than 768 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exercise 2b – using Foundation4 Grid to structure our website](img/3602OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the same site in a device with a width less
    than 768 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exercise 2b – using Foundation4 Grid to structure our website](img/3602OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Be calm; the website still looks horrible because this is only the first step
    of the project. We need to do some visual adjustments to complete our mission.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I would suggest that you search for some beautiful images to use in your website,
    improving its look and feel. Otherwise, you can go to [http://placehold.it/](http://placehold.it/)
    to create a placeholder reserving the space for images.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a good approach that avoids altering the CSS that comes with the solution.
    In this case, we''ll create a new CSS file and include it on our website. In the
    `header` section, after the Zurb Foundation CSS file, include your own CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this CSS, we are splitting the customization into three parts, applying
    the cascade style, and avoiding duplicating parts of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Both versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small version (lower than 768 px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large version (greater than 768 px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following code is used at the beginning of customizing from our site. Feel
    free to use it as long as it is only a suggestion to match the layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned three different ways to render the specific
    CSS code using JavaScript solutions: Adapt.js, Respond.js, and Breakpoints.js.
    We now also understand how to convert pixels to percentages by doing the math
    and discovering the result. We have also learned what the responsive grid system
    is and how to use each type of the responsive grid system.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have started to code our site using grid (based on the wireframe
    from [Chapter 1](ch01.html "Chapter 1. Exploring Responsive Web Design"), *Exploring
    Responsive Web Design*), which connects to the next chapter, in which we will
    cover the different ways to implement responsive menu navigations such as the
    Toggle menu, the off-canvas menu (such as Facebook), and others.
  prefs: []
  type: TYPE_NORMAL
