["```js\n<table id=\"my-data\"> \n  <thead> \n    <tr> \n      <th class=\"name\"> \n        <a href=\"index.php?sort=name\">Name</a> \n      </th> \n      <th class=\"date\"> \n        <a href=\"index.php?sort=date\">Date</a> \n      </th> \n    </tr> \n  </thead> \n  <tbody> \n    ... \n  </tbody> \n</table> \n\n```", "```js\n$(() => { \n  $('#my-data th a')\n    .click((e) => { \n      e.preventDefault(); \n      $('#my-data tbody')\n        .load($(e.target).attr('href')); \n    }); \n}); \n\n```", "```js\n<table id=\"t-1\" class=\"sortable\"> \n  <thead> \n    <tr> \n      <th></th> \n      <th class=\"sort-alpha\">Title</th> \n      <th class=\"sort-alpha\">Author(s)</th> \n      <th class=\"sort-date\">Publish Date</th> \n      <th class=\"sort-numeric\">Price</th> \n    </tr> \n  </thead> \n  <tbody> \n    <tr> \n      <td><img src=\"img/2862_OS.jpg\" alt=\"Drupal 7\"></td> \n      <td>Drupal 7</td> \n      <td>David <span class=\"sort-key\">Mercer</span></td> \n      <td>September 2010</td> \n      <td>$44.99</td> \n    </tr> \n    <!-- code continues --> \n  </tbody> \n</table> \n\n```", "```js\n$(() => {\n  const $headers = $('#t-1')\n    .find('thead th')\n    .slice(1);\n\n  $headers\n    .wrapInner($('<a/>').attr('href', '#'))\n    .addClass('sort');\n});\n\n```", "```js\nconst arr = [52, 97, 3, 62, 10, 63, 64, 1, 9, 3, 4]; \n\n```", "```js\n[1, 10, 3, 3, 4, 52, 62, 63, 64, 9, 97] \n\n```", "```js\narr.sort((a, b) => a < b ? -1 : (a > b ? 1 : 0)); \n\n```", "```js\n[1, 3, 3, 4, 9, 10, 52, 62, 63, 64, 97] \n\n```", "```js\n$(() => {\n  const comparator = (a, b) => a < b ? -1 : (a > b ? 1 : 0);\n  const sortKey = (element, column) => $.trim($(element)\n    .children('td')\n    .eq(column)\n    .text()\n    .toUpperCase()\n  );\n\n  $('#t-1')\n    .find('thead th')\n    .slice(1)\n    .wrapInner($('<a/>').attr('href', '#'))\n    .addClass('sort')\n    .on('click', (e) => {\n      e.preventDefault();\n\n      const column = $(e.currentTarget).index();\n\n      $('#t-1')\n        .find('tbody > tr')\n        .get()\n        .sort((a, b) => comparator(\n          sortKey(a, column),\n          sortKey(b, column)\n        ))\n        .forEach((element) => {\n          $(element)\n            .parent()\n            .append(element);\n        });\n    });\n}); \n\n```", "```js\n$('#t-1')\n  .find('thead th')\n  .slice(1)\n  .wrapInner($('<a/>').attr('href', '#'))\n  .addClass('sort')\n  .on('click', (e) => {\n    e.preventDefault();\n\n    const column = $(e.currentTarget).index();\n\n    $('#t-1')\n      .find('tbody > tr')\n      .each((i, element) => {\n        $(element)\n          .data('sortKey', sortKey(element, column));\n      })\n      .get()\n      .sort((a, b) => comparator(\n        $(a).data('sortKey'),\n        $(b).data('sortKey')\n      ))\n      .forEach((element) => {\n        $(element)\n          .parent()\n          .append(element);\n      });\n  }); \n\n```", "```js\n<td>David <span class=\"sort-key\">Mercer</span></td> \n\n```", "```js\nconst sortKey = (element, column) => {\n  const $cell = $(element)\n    .children('td')\n    .eq(column);\n  const sortText = $cell\n    .find('span.sort-key')\n    .text();\n  const cellText = $cell\n    .text()\n    .toUpperCase();\n\n  return $.trim(`${sortText} ${cellText}`);\n}; \n\n```", "```js\nvar key = parseFloat($cell.text().replace(/^[^\\d.]*/, '')); \nif (isNaN(key)) { \n  key = 0; \n} \n\n```", "```js\nvar key = Date.parse(`1 ${$cell.text()}`); \n\n```", "```js\nconst sortKeys = {\n  date: $cell => Date.parse(`1 ${$cell.text()}`),\n  alpha: $cell => $.trim(\n    $cell.find('span.sort-key').text() + ' ' +\n    $cell.text().toUpperCase()\n  ),\n  numeric($cell) {\n    const key = parseFloat(\n      $cell\n        .text()\n        .replace(/^[^\\d.]*/, '')\n    );\n    return isNaN(key) ? 0 : key;\n  }\n};\n\n$('#t-1')\n  .find('thead th')\n  .slice(1)\n  .each((i, element) => {\n    $(element).data(\n      'keyType',\n      element.className.replace(/^sort-/,'')\n    );\n  })\n  // ...\n\n```", "```js\n// ...\n.on('click', (e) => {\n  e.preventDefault();\n\n  const column = $(e.currentTarget).index();\n  const keyType = $(e.currentTarget).data('keyType');\n\n  $('#t-1')\n    .find('tbody > tr')\n    .each((i, element) => {\n      $(element).data(\n        'sortKey',\n        sortKeys[keyType](\n          $(element)\n            .children('td')\n            .eq(column)\n        )\n      );\n    })\n    .get()\n    .sort((a, b) => comparator(\n      $(a).data('sortKey'),\n      $(b).data('sortKey')\n    ))\n    .forEach((element) => {\n      $(element)\n        .parent()\n        .append(element);\n    });\n}); \n\n```", "```js\nconst comparator = (a, b, direction = 1) =>\n  a < b ?\n    -direction :\n    (a > b ? direction : 0);\n\n```", "```js\n// ...\n.on('click', (e) => {\n  e.preventDefault();\n\n  const $target = $(e.currentTarget);\n  const column = $target.index();\n  const keyType = $target.data('keyType');\n  const sortDirection = $target.hasClass('sorted-asc') ?\n    -1 : 1;\n\n  $('#t-1')\n    .find('tbody > tr')\n    .each((i, element) => {\n      $(element).data(\n        'sortKey',\n        sortKeys[keyType](\n          $(element)\n            .children('td')\n            .eq(column)\n        )\n      );\n    })\n    .get()\n    .sort((a, b) => comparator(\n      $(a).data('sortKey'),\n      $(b).data('sortKey'),\n      sortDirection\n    ))\n    .forEach((element) => {\n      $(element)\n        .parent()\n        .append(element);\n    });\n\n    $target\n      .siblings()\n      .addBack()\n      .removeClass('sorted-asc sorted-desc')\n      .end()\n      .end()\n      .addClass(\n        sortDirection == 1 ?\n          'sorted-asc' : 'sorted-desc'\n      );\n}); \n\n```", "```js\n<table id=\"t-2\" class=\"sortable\"> \n  <thead> \n    <tr> \n      <th></th> \n      <th data-sort='{\"key\":\"title\"}'>Title</th> \n      <th data-sort='{\"key\":\"authors\"}'>Author(s)</th> \n      <th data-sort='{\"key\":\"publishedYM\"}'>Publish Date</th> \n      <th data-sort='{\"key\":\"price\"}'>Price</th> \n    </tr> \n  </thead> \n  <tbody> \n    <tr data-book='{\"img\":\"2862_OS.jpg\", \n      \"title\":\"DRUPAL 7\",\"authors\":\"MERCER DAVID\",       \n      \"published\":\"September 2010\",\"price\":44.99,       \n      \"publishedYM\":\"2010-09\"}'> \n      <td><img src=\"img/2862_OS.jpg\" alt=\"Drupal 7\"></td> \n      <td>Drupal 7</td> \n      <td>David Mercer</td> \n      <td>September 2010</td> \n      <td>$44.99</td> \n    </tr> \n    <!-- code continues --> \n  </tbody> \n</table> \n\n```", "```js\n<th data-sort='{\"key\":\"title\"}'> \n\n```", "```js\n$('th').first().data('sort').key \n\n```", "```js\n$(() => {\n  const comparator = (a, b, direction = 1) =>\n    a < b ?\n      -direction :\n      (a > b ? direction : 0);\n\n  $('#t-2')\n    .find('thead th')\n    .slice(1)\n    .wrapInner($('<a/>').attr('href', '#'))\n    .addClass('sort')\n    .on('click', (e) => {\n      e.preventDefault();\n\n      const $target = $(e.currentTarget);\n      const column = $target.index();\n      const sortKey = $target.data('sort').key;\n      const sortDirection = $target.hasClass('sorted-asc') ?\n        -1 : 1;\n\n      $('#t-2')\n        .find('tbody > tr')\n        .get()\n        .sort((a, b) => comparator(\n          $(a).data('book')[sortKey],\n          $(b).data('book')[sortKey],\n          sortDirection\n        ))\n        .forEach((element) => {\n          $(element)\n            .parent()\n            .append(element);\n        });\n\n      $target\n        .siblings()\n        .addBack()\n        .removeClass('sorted-asc sorted-desc')\n        .end()\n        .end()\n        .addClass(\n          sortDirection == 1 ?\n            'sorted-asc' : 'sorted-desc'\n        );\n    });\n}); \n\n```", "```js\nconst buildAuthors = row =>\n  row\n    .authors\n    .map(a => `${a.first_name} ${a.last_name}`)\n    .join(', ');\n\nconst buildRow = row =>\n  `\n    <tr>\n      <td><img src=\"img/${row.img}\"></td>\n      <td>${row.title}</td>\n      <td>${buildAuthors(row)}</td>\n      <td>${row.published}</td>\n      <td>$${row.price}</td>\n    </tr>\n  `;\n\nconst buildRows = rows =>\n  rows\n    .map(buildRow)\n    .join(''); \n\n```", "```js\nPromise.all([$.getJSON('books.json'), $.ready])\n  .then(([json]) => {\n    $('#t-3')\n      .find('tbody')\n      .html(buildRows(json));\n  })\n  .catch((err) => {\n    console.error(err);\n  }); \n\n```", "```js\nconst buildAuthors = (row, separator = ', ') =>\n  row\n    .authors\n    .map(a => `${a.first_name} ${a.last_name}`)\n    .join(separator);\n\nconst prepRows = rows =>\n  rows\n    .map(row => $.extend({}, row, {\n      title: row.title.toUpperCase(),\n      titleFormatted: row.title,\n      authors: buildAuthors(row, ' ').toUpperCase(),\n      authorsFormatted: buildAuthors(row)\n    }));\n\n```", "```js\nconst buildRow = row =>\n  `\n    <tr>\n      <td><img src=\"img/${row.img}\"></td>\n      <td>${row.titleFormatted}</td>\n      <td>${row.authorsFormatted}</td>\n      <td>${row.published}</td>\n      <td>$${row.price}</td>\n    </tr>\n  `;\n\nPromise.all([$.getJSON('books.json'), $.ready])\n  .then(([json]) => {\n    $('#t-3')\n      .find('tbody')\n      .html(buildRows(prepRows(json)));\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n\n```", "```js\nPromise.all([$.getJSON('books.json'), $.ready])\n  .then(([json]) => {\n    $('#t-3')\n      .find('tbody')\n      .html(buildRows(prepRows(json)));\n\n    const comparator = (a, b, direction = 1) =>\n      a < b ?\n        -direction :\n        (a > b ? direction : 0);\n\n    $('#t-3')\n      .find('thead th')\n      .slice(1)\n      .wrapInner($('<a/>').attr('href', '#'))\n      .addClass('sort')\n      .on('click', (e) => {\n        e.preventDefault();\n\n        const $target = $(e.currentTarget);\n        const column = $target.index();\n        const sortKey = $target.data('sort').key;\n        const sortDirection = $target.hasClass('sorted-asc') ?\n          -1 : 1;\n        const content = buildRows(\n          prepRows(json).sort((a, b) => comparator(\n            a[sortKey],\n            b[sortKey],\n            sortDirection\n          ))\n        );\n\n        $('#t-3')\n          .find('tbody')\n          .html(content);\n\n        $target\n          .siblings()\n          .addBack()\n          .removeClass('sorted-asc sorted-desc')\n          .end()\n          .end()\n          .addClass(\n            sortDirection == 1 ?\n              'sorted-asc' : 'sorted-desc'\n          );\n      });\n})\n.catch((err) => {\n  console.error(err);\n}); \n\n```", "```js\n.forEach((element) => {\n  $(element)\n    .parent()\n    .append(element);\n}); \n\n```", "```js\n$('#t-3')\n  .find('tbody')\n  .html(content);\n\n```", "```js\n$(() => {\n  $('table')\n    .each((i, table) => {\n      $('<h3/>', {\n        'class': 'table-title',\n        id: `table-title-${i}`,\n        text: `Table ${i + 1}`,\n        data: { index: i },\n        click(e) {\n          e.preventDefault();\n          $(table).fadeToggle();\n        },\n        css: { glowColor: '#00ff00', cursor: 'pointer' }\n      }).insertBefore(table);\n    });\n}); \n\n```", "```js\n(($) => {\n  $.cssHooks.glowColor = {\n    set(elem, value) {\n      elem.style.textShadow = value == 'none' ?\n        '' : `0 0 2px ${value}`;\n    }\n  };\n})(jQuery);\n\n```"]