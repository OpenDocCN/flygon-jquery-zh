- en: Chapter 11. HTML5 and jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the new HTML5 semantics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving speed and taking your application offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Web Workers for intensive tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using local and session storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2D drawing with Canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying Gaussian blur on a SVG image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking your location with the Geolocation API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music with the `<audio>` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing videos with the `<video>` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduces new semantics and many new cool features, such as Application
    Cache, 2D Canvas, Geolocation, Local and Session Storage, Web Workers, and support
    for audio and video. The jQuery Mobile framework is built on HTML5 and CSS3, and
    provides excellent support for these new semantics and new features. This chapter
    introduces some of these features that you can use in your jQuery Mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many resources on the web for learning HTML5\. To mention a few, you
    can read more at HTML5 Rocks ([http://www.html5rocks.com/en](http://www.html5rocks.com/en)),
    HTML5 Demos ([http://www.html5demos.com](http://www.html5demos.com)), and the
    Mozilla Developer Network ([https://developer.mozilla.org/en-US/docs/HTML/HTML5](https://developer.mozilla.org/en-US/docs/HTML/HTML5)).
  prefs: []
  type: TYPE_NORMAL
- en: The support for HTML5 elements and features on various browsers and platforms
    is varied. You will have to take care while using a particular feature and ensure
    that it works on your target platforms. This level of support continues to improve
    with every passing day.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://www.caniuse.com](http://www.caniuse.com) has a good reference on the
    updated status of platform support available for the various HTML5 features.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the new HTML5 semantics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 defines new semantics to better organize an HTML document into more logical
    sections. This recipe shows you how to use the new HTML5 semantics to define your
    jQuery Mobile app. The following HTML5 elements are covered in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`section`: This defines the section in a document. Headers, footers, and the
    page content are all sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header`: This defines the document header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer`: This defines the document footer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aside`: This defines the additional content related to the main content of
    the document, usually placed as a sidebar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`article`: This defines the content related to the document, but it can also
    stand alone and can be independently distributed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nav`: This is a section providing navigation links and can contain one or
    more anchor links.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/semantics` folder. You
    can launch this code using the URL: `http://localhost:8080/11/semantics/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` that uses the new HTML5 semantics for the page; do not use
    the `<div>` tag here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `main.html`, and add the `#main` page to it using a `<section>` tag with
    the `data-role='page'` attribute. Add the `<header>` tag with `data-role='header'`
    to create the page header. Next, add a `<section>` tag with `data-role='content'`
    to create the page content section. Finally, add the footer with the `<footer>`
    tag with the `data-role='footer'`attribute. You now have the page with a header,
    content, and footer ready. You will note that `<div>` has not been used so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `<aside>` and `<article>` elements to the page content, as shown in
    the code. Since there are multiple articles, you can group them in a `<section>`
    element. Finally, add a `<nav>` element with two button links to the page footer.
    Add the `ui-btn-right` class to move the second button to the right side of the
    screen. Now, when you launch the app, the following screen will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 supports many more new elements, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`figure`: This is used to contain images, photos, diagrams, illustrations,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`figcaption`: This defines the caption for `<figure>.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hgroup`: This is used to group a set of header elements (`<h1>`,`<h2>`, and
    so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mark`: This is used to highlight the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meter`: This is used to specify a numeric value within a min-max range. You
    can also specify a threshold value (low and high).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress`: This is used to indicate progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: This is used to mark up a date/time value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About using <div>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to HTML5, `<div>` was used as the container to group elements. But this
    was not very descriptive. The HTML5 document structure is much more descriptive
    and meaningful with header, footer, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using HTML5, use `<div>` to group elements that do not fit the description
    of any of the new HTML5 elements, such as `<section>`.
  prefs: []
  type: TYPE_NORMAL
- en: Using <section> with jQuery Mobile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for HTML5 semantics is varied and improving in the numerous platforms
    available on the market today. As of v1.1.1, the jQuery Mobile framework recommends
    using the `<div>` element with the `data-role` attribute to specify the various
    page components, such as header and footer. This is to ensure compatibility with
    the older versions of browsers, such as IE8, and also to support the maximum number
    of devices and platforms. This would definitely change in a near future version
    of jQuery Mobile, when support for the older browsers is dropped. Till then, use
    the new HTML5 elements, keeping your target users in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Improving speed and taking your application offline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduced a new feature called **Application Cache** that allows your
    web app to cache network resources locally. You can also control and configure
    this cache much better than the earlier browser caching techniques. With Application
    Cache, your mobile app can work better, even in situations where there is slow
    or no network coverage. Your app is faster, as it can find many of the resources
    stored locally instead of fetching them from the server. This also helps the user
    with lower data transfer costs that would be charged by the service provider.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to use the Application Cache feature in your jQuery
    Mobile app. It also shows you how to use a locally stored jQuery Mobile library
    instead of fetching the library files from the CDN.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/appcache` folder. You will
    have to host this code on a web server to see how Application Cache works. The
    `sources` folder contains a `nodejs` web server that you can use to run this app.
    You can launch this code using the URL: `http://localhost:8080/11/appcache/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html`, and specify the manifest file in the `<html>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following three links to the page content in `main.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `jqmcookbook.appcache` manifest file and specify the files
    that are to be cached:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `cached.html` file, which gets cached by the app, and
    is available for offline access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `online.html` file, which does not get cached and is fetched
    from the network every time it is accessed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following `offline.html` file that gets cached and is used as a
    fallback when the `online.html` page is not accessible over the network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the following `network.html` file that does not get cached,
    and is always fetched from the network; it does not use any fallback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `main.html`, and specify `jqmcookbook.appcache` as the manifest file
    in its `<html>` tag. This indicates to the browser that the HTML file should be
    cached. It also indicates that the manifest file must be processed for finding
    all the resources that are to be cached locally. Add three links for the `cached.html`,
    `online.html`, and `network.html` pages, as shown. These will be used as the resources
    that will be cached in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `jqmcookbook.appcache` manifest file with the text `CACHE MANIFEST`
    specified in its first line. You can add comments to the manifest file, and they
    start with the `#` character. Now, add the resources to be cached by your app
    to the manifest file. Each filename must be on a separate line, and you can use
    relative or absolute paths. The Cache Manifest file has three sections identified
    by the `CACHE`, `FALLBACK`, and `NETWORK` headers.
  prefs: []
  type: TYPE_NORMAL
- en: Define the default `CACHE` section and list the files that should be cached
    locally. Add `main.html` and `cached.html` to this section. When you launch the
    app and click on the first button, it opens `cached.html` regardless of whether
    the device is online or offline.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Images, icons, stylesheets, JavaScript, and other static files are the resources
    that you should cache locally.
  prefs: []
  type: TYPE_NORMAL
- en: Cached files are downloaded only at the first time. When the app tries to access
    any of these files, they are always fetched from the cache first or, only if not
    available, they are fetched from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to cache the main HTML file (with the manifest defined in
    its `<html>` tag) in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, define the `FALLBACK` section with two filenames in each line. Specify
    `online.html` as the first file, and then specify the fallback as `offline.html`.
    Now, when you click on the second button in the app, `online.html` is shown only
    if the device is online. If the device goes offline, then `offline.html` is automatically
    shown from the cache. Here, the first file is always fetched from the network
    and is never cached.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, define the `NETWORK` section with `network.html` listed in it. Use
    this section to define the list of files that should never be cached in your app.
    These files are always fetched from the network. Now, when you click on the third
    button, `network.html` is shown only if the device is online, and an error is
    shown if the device is offline.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see the list of currently cached files in your browser using the developer/debugging
    tools that most browsers provide today. The following screenshot shows the Chrome
    Developer Tool's view of the resources that have been cached for the `main.html`
    file in this recipe. The files listed in the manifest are all seen in the **Application
    Cache** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/7225_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Restriction on the cache size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a browser limitation on how much data you can store locally. Usually
    it is 5 to 10 MBs, and requires the user's permission to go over this limit. Some
    browsers, such as Chrome, allow you to set this value as unlimited. So, cache
    files with care and include the resources that you access often. Also include
    resources that you need to take your app offline.
  prefs: []
  type: TYPE_NORMAL
- en: Refreshing the Application Cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each time the `main.html` file is accessed, the remote manifest file is fetched
    and is compared with the local manifest file. Only if the manifest has changed
    (this could be even just a comment), the new manifest file is fetched. Then the
    cache will be cleared and the entire set of cached files will be refreshed from
    the server. The flip side to this is that, just adding a single new file to the
    manifest file will trigger a full refresh, even if none of the other files have
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using a version number in the comment of the manifest file is a good way of
    keeping the cached files updated.
  prefs: []
  type: TYPE_NORMAL
- en: The MIME type of the manifest file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should always serve the manifest file with the **MIME** type of text/cache-manifest.
    You can name this manifest anything. Your server should be able to recognize this
    MIME type. If it does not, you should add this MIME type to your server configuration.
    The nodejs web server that is shipped with the sources for this cookbook, already
    supports the text/cache-manifest MIME type.
  prefs: []
  type: TYPE_NORMAL
- en: The Ajax pre-filter workaround
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Application Cache does not work properly on some browsers and the Ajax pre-filter
    workaround is required in this case. In these browsers, a successful Ajax call
    returns a `0` HTTP status on success. To work around this, you should use a jQuery
    Ajax pre-filter and set the `isLocal` attribute to `true`. The detailed github
    discussion thread on using the `isLocal` workaround is available at [https://github.com/jquery/jquery-mobile/issues/1579](https://github.com/jquery/jquery-mobile/issues/1579).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using Web Workers for intensive tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Pages and Dialogs"), *Pages and Dialogs*,
    The *Prefetching pages for faster navigation* and The *Using the DOM cache to
    improve performance* recipes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Web Workers for intensive tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run a script that does some complex or lengthy activity, the browser
    thread freezes and does not respond till the task is complete. This can be overcome
    by using a Web Worker—a background independent thread that is used to run JavaScript.
    The browser thread is not blocked, and thus can continue to respond to user actions.
    This recipe shows you how to use Web Workers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/webworkers` folder. You
    can launch this code using the URL: `http://localhost:8080/11/webworkers/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be performed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` with a checkbox and a slider as its page content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following script to trigger a long running loop when the checkbox is
    clicked. When checked, the loop is run in a Web worker and there is no UI freeze,
    and you can continue to use the page. When the checkbox is unchecked, immediately
    everything freezes till the loop is done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the `webworker.js` JavaScript file to handle the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `main.html`, and add a slider and a checkbox with `id='countchk'` to
    the content of `#main`. Also, add an empty `#msgdiv` attribute to display the
    messages. Bind the `change` event of the checkbox to an event handler in the `pageinit`
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: When the checkbox is selected, trigger the loop in a Web Worker. Initiate the
    Web Worker by calling `new Worker()`, and pass it the name of the JavaScript `webworker.js`
    file. Define the `onmessage` event handler to handle messages received by the
    worker. You can display this message in `#msgdiv`. Finally, invoke the worker
    by posting a `start` message to it. This message can be anything, and the code
    must be written in the worker to handle it. In the file `webworker.js`, define
    the `onmessage` callback to handle the incoming message from the browser thread.
    Run the loop and return an appropriate message to the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you launch the page and select the checkbox, the loop is initiated in
    a Web Worker. You can use the slider and see the messages being updated in the
    page even though the loop is still running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the checkbox is not selected, the loop runs in the main browser thread
    itself. Now, the entire UI freezes even before the checkbox can reflect your click,
    and the UI responds only after the loop is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Support for Web Workers might not be available in all browsers. You can check
    for the Web Worker support in your app by calling the following code, which checks
    for the presence of the `Worker` property of the `window` object. If undefined,
    the feature is not available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using Modernizr to check for Web Worker support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Modernizr** (available at [http://www.modernizr.com](http://www.modernizr.com))
    is a very popular and handy library that can be used to detect the support for
    Web Workers and other HTML5 and CSS3 features in your browser. It provides **polyfills**
    or **fallbacks** in case a particular property is not supported in a browser.
    It comes with an **MIT** **license** , and can be freely used. The `Modernizr.webworkers`
    property would be defined and available if your browser supports Web Workers.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Improving speed and taking your application offline* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using local and session storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cookies** was the mechanism used to store client-side information earlier.
    But a cookie can only store up to 4 KB of data, which is sent to the server with
    every single request. **Web Storage** is the client-side storage standard introduced
    with HTML5\. It has two types: **Local Storage** and **Session Storage** . Data
    stored in Session Storage is available till the user''s session is active, and
    is lost once the session ends. Local Storage data is persisted across sessions.
    This recipe shows you how to use Local Storage and Session Storage.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/storage` folder. You can
    launch this code using the URL: `http://localhost:8080/11/storage/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` with its page content having three text fields and a **Save**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following script to persist the text field contents by clicking on
    the **Save** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, restore the persisted values when the page is shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the page, and later close and reopen the page to see how these persisted
    values behave over a single session and across multiple sessions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add three texts with IDs: `nostore`, `sessionstore`, and `localstore`. Add
    a button with `id=''savebtn''`, and bind its `click` event to a callback in the
    `pageinit` event handler. In the callback, persist the text fields by calling
    the `setItem()` method with unique keys (`localval` and `sessionval`) on the `window.sessionStorage`
    and `window.localStorage` objects respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: To restore these persisted values when the page reloads or refreshes, add an
    event handler to the `pageshow` event. Pass the `localval` key to the `window.localStorage.getItem()`
    function to read from local storage. Pass the `sessionval` key to `window.sessionStorage.getItem()`
    to read from session storage. Set these values to the respective text fields.
  prefs: []
  type: TYPE_NORMAL
- en: When the app loads, enter the text values and click on the **Save** button to
    persist them.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, refresh the browser to reload the page. The session is still alive, and
    you will see the local and session storage values get restored. The first field
    is cleared as it was not persisted, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, close the app and reopen it. This time, the session is terminated.
    You will see that only the **Local Storage** data is shown and the other two text
    fields are cleared:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Support for Web Storage might not be available in all browsers. You can check
    if the `window` object has a valid `localstorage` or `sessionStorage` property
    to verify if you can use the feature by running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the free `Modernizr` library to test for Web Storage support
    by checking if the `Modernizr.localstorage` and the `Modernizr.sessionstorage`
    properties are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the Web Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can open the developer tools in your browser and inspect the current set
    of key-values stored in your browser for the Local and Session Storage. The following
    screenshot shows the Local Storage key-value that was saved in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspecting the Web Storage](img/7225_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the key-value stored using **Session Storage**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspecting the Web Storage](img/7225_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WebSQL Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WebSQL Storage is another feature that was defined in HTML5 to store client-side
    data. It uses SQLite queries to perform the data operations. Both IE and Firefox
    do not support this feature. This specification is no longer being maintained
    and might be dropped going forward.
  prefs: []
  type: TYPE_NORMAL
- en: IndexedDB Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **IndexedDB** **Storage** is another form of client-side storage using indexed
    data queries. Only Firefox and Chrome browsers support this feature well at the
    time of writing this recipe. Older IE versions, Safari, and Opera do not support
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 2D drawing with Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Canvas** is a rectangular region in your web page where you can draw 2D shapes
    using JavaScript, and also render bitmap images. It is used for graphs, animations,
    images, photo compositions, real-time video processing, and games. This recipe
    shows you how to use the Canvas in your jQuery Mobile app.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/canvas` folder. You can
    launch this code using the URL: `http://localhost:8080/11/canvas/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` with its page content having a `canvas` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following script to get the 2D context, and then draw two rectangles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create `main.html`, and add a `<canvas>` element with `id=''mycanvas''` to
    the `#main` page with `width` and `height` of `500` pixels. The text **Canvas
    is not supported on your browser** is shown if the browser does not support the
    Canvas feature. Next, add a script to the `pageinit` callback function to get
    the 2D context (`cxt`) of the `mycanvas` element. Define the `fillStyle` of `cxt`
    with a grey shade `#5f98c5`. Now, draw a filled rectangle using `fillRect()`,
    passing the origin, length, and breadth as parameters. Next, use `strokeRect()`
    to draw a rectangle outline without any fill. The screen is now displayed, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe just gives a basic introduction to the Canvas element, and shows
    you how to use it in your jQuery Mobile app. The Canvas is a very powerful element
    and supports a wide array of APIs. You can set colors, styles, gradients, patterns,
    fonts, and text alignment. You can draw geometric shapes, such as lines, rectangles,
    paths, arcs, and bezier curves. The canvas supports transformation APIs, such
    as scale, rotate, translate, and transform. You can draw images and also manipulate
    them at a pixel level. Canvas helps in photo composition. You can also save the
    drawing state of the canvas in a stack, and restore any previous saved drawing
    state from the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The elements drawn on a canvas take in absolute coordinates. So, take care while
    using these values, keeping in mind the actual screen size of your target devices.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Applying Gaussian blur on a SVG image* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying Gaussian blur on a SVG image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scalable Vector Graphics** (**SVG**) is a family of specifications for 2D
    Scalable Vector Graphics. They are XML-based and can be static or dynamic (animated
    or interactive). This recipe shows you how to use a SVG image in your app, and
    apply a Gaussian filter when you click on it.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/svg` folder. The SVG image
    is available in the `code/resources/images` folder. You can launch this code using
    the URL: `http://localhost:8080/11/svg/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` with a SVG element in its page content. Draw a SVG rectangle
    and display the SVG image within the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the Guassian filter to the SVG image when the image is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create `main.html`, and add a `<svg>` element to its page content. Specify
    the SVG namespace and version, as shown in the code. Create a rectangle using
    the `<rect>` element, and specify its attributes, such as the width, height, and
    x and y positions, and also set its `stroke` style. Next, add an `<image>` element
    with `id=''svgimg''` pointing to the SVG image, and specify the image''s location,
    position, and size to be used. When you load the page, the following screenshot
    will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, define the Gaussian filter by adding a `<filter>` element with `id=''gausfilter''`
    inside a `<defs>` element. Add the `<feGaussianBlur>` element inside `<filter>`,
    and set a standard deviation of `5`. Finally, bind the `click` event on the `#svgimg`
    image to an event handler in the `pageinit` callback function. Here, add the `filter=''gausfilter''`
    attribute to the `<image>` tag using the jQuery `attr()` call. Now, when you click
    on the SVG image, the Gaussian blur gets applied, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG supports vector graphics, raster graphics, and text elements. It allows
    you to transform, clip paths, apply alpha masks, and filter effects on the SVG
    images. The SVG image used in this recipe was designed and contributed to the
    *Open Clipart* website at [http://openclipart.org](http://openclipart.org), by
    ChrisDesign ([http://chrisdesign.wordpress.com](http://chrisdesign.wordpress.com)).
    The Open Clipart website also has thousands of free SVG images available in the
    public domain.
  prefs: []
  type: TYPE_NORMAL
- en: SVG Tiny specification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SVG specification has a mobile version, and it is called the **SVG Tiny**
    (**SVGT**) specification. Currently, SVGT v1.2 is the W3C recommendation. It has
    good support on most of the mobile devices and platforms, and support for it continues
    to improve by the day.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *2D drawing with Canvas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking your location with the Geolocation API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Geolocation API** is a separate specification and is part of the HTML5
    stack. You can use JavaScript and locate the client device location using various
    techniques, such as IP address, Wi-Fi, GSM/CDMA cell IDs, or device Global Positioning
    System (GPS). This recipe shows you how to find the current location using the
    Geolocation API in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/geolocation` folder. You
    can launch this code using the URL: `http://localhost:8080/11/geolocation/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: Create `main.html` with an empty `div` tag to display the geolocation information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Invoke the `getCurrentPosition()` method to obtain the current location using
    a `show_pos()` callback function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, display the current location in the `show_pos()` callback function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `main.html`, and add an empty `div` tag with `id='geopos'` to the `#main`
    page to display the location information. Use the `pageinit` event handler to
    first check if the `navigator.geolocation` object is available. If available,
    invoke the `getCurrentPosition()` method with a callback function, `show_pos()`,
    to get the location information. The `show_pos()` callback function can access
    the position (`pos`) object, which has the various properties of the current location.
    Access `pos.coords` to obtain information, such as the latitude, longitude, altitude,
    and accuracy. The `pos` object also has an associated timestamp for the current
    location reading. Now, display the location details in the `#geopos` attribute
    of `div`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you launch the app, the browser first asks your permission to access the
    location information. Once you agree, the following location details are shown
    on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Geolocation API specification mandates that the user location information
    is confidential, and that the browser should warn and obtain the user's permission
    before accessing or sharing this information.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, the `getCurrentPosition()` call pings for the user location
    only once, and displays the information using the `show_pos()`callback function.
    But, if you wish to track a moving device, you can access continuous location
    readings using the `watchCurrentPosition()` call. The syntax remains the same,
    but this method continuously and periodically keeps pinging for the device location
    and invokes the `show_pos()` callback every time. This method also populates the
    `pos.coords.speed` and `pos.coords.heading` attributes to give feedback on the
    speed and direction of the moving device. The user is prompted for permission
    to share the location details only on the first call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Google Gears
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to the Geolocation API specification, the Google Gears JavaScript library
    was very popular for fetching location information. Google Gears subsequently
    contributed quite a bit to the development of the Geolocation API and is now deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation on desktop browsers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The location information obtained on desktop browsers is based on the IP and
    MAC address details obtained from the ISP servers. So, this information has a
    wide accuracy margin, sometimes in the range of a few kilometers, whereas mobile
    devices rely on the network towers and on GPS devices (if enabled) for positioning.
    Thus mobile devices can very accurately pinpoint the position, altitude, speed,
    and heading information within a range of a few meters.
  prefs: []
  type: TYPE_NORMAL
- en: Playing music with the <audio> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduced a new `<audio>` element that can be used to play audio files
    directly in the browser. Prior to this, browsers had to use plugins, such as Flash
    Player, Real Player, or Quick Time to play audio files. The `<audio>` element
    provides a lightweight alternative, and this recipe shows you how to use it in
    your app to play audio files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/audio` folder. The audio
    snips are available in the `code/resources/audio` folder. You can launch this
    code using the URL: `http://localhost:8080/11/audio/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` with the `<audio>` element in its page content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the `<audio>` element to the `#main` page with the `controls`, `autoplay`,
    and `preload` attributes. The `controls` attribute displays the play button, volume
    slider, and other controls. The `preload='auto'` option indicates that the browser
    can start streaming the audio file in the background as soon as the page is ready.
    The `autoplay` attribute tells the browser that it can directly start playing
    the audio file when downloaded and ready.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<audio>` element also supports a `loop` attribute, which keeps the audio
    playing in a continuous loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different browsers support different audio formats, and the first supported
    audio format is picked and played. So, add URL links to the audio file in the
    `.mp3`, `.oga`, and `.webma` formats using the `<source>` element, as shown in
    the code. One of these three audio formats will be recognized by most browsers.
    Finally, add an error message, `Browser does not support audio tag`, at the end.
    This message is displayed if the browser does not support the `audio` element.
    Now, when you load the page, the screenshot similar to the following is seen,
    and the audio file starts to play:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Older browsers, such as IE8, do not support the `<audio>` element. You will
    have to use a flash fallback mechanism in this case.
  prefs: []
  type: TYPE_NORMAL
- en: For a note on audio formats and codecs, using the flash fallback and HTML5 media
    players, refer to the next recipe on the `<video>` element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Viewing videos with the <video> element* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing videos with the <video> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduced a new `<video>` element to play video files directly in the
    browser. Prior to this, browsers had to use plugins, such as Flash Player, Real
    Player, or Quick Time to play video files. The `<video>` element is a lightweight
    alternative, and this recipe shows you how to use it in your app to view videos.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the full code of this recipe from the `code/11/video` folder. The video
    snips are available in the `code/resources/video` folder. You can launch this
    code using the URL: `http://localhost:8080/11/video/main.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `main.html` with the `<video>` element in its page content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the `<video>` element to the `#main` page with the `controls`, `autoplay`,
    and `preload` attributes. The `controls` attribute displays the play button, volume
    slider, full screen button, and other controls. The `preload='auto'` option indicates
    that the browser can start streaming the video file in the background as soon
    as the page is ready. The `autoplay` attribute tells the browser that it can directly
    play the video when ready. Also, add the `width` and `height` attributes to size
    the video in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different browsers support different video formats, and the first supported
    video format is picked and played. So, add URL links to the video files in the
    `.mp4`, `.ogv`, and .`webmv` formats using the `<source>` element, as shown in
    the code. One of these three video formats will be recognized by most browsers.
    Finally, add an error message, `Browser does not support video tag`, at the end.
    This message is displayed if the browser does not support the video element. Now,
    when you load the page, a screenshot similar to the following is shown, and the
    video file starts to play:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7225_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<video>` tag also supports a few additional attributes, such as `loop`
    (to play the video in a continuous loop), `muted` (to turn off the audio), and
    `poster` (the URL of the image to be displayed at the beginning as a poster, before
    the video begins to play).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set `preload` to `auto` to automatically download the media file, as some browsers
    do not support `preload` due to security reasons.
  prefs: []
  type: TYPE_NORMAL
- en: The flash fallback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Older browsers, such as IE8, do not support the `<video>` and `<audio>` elements.
    You can still play HTML5 audio and video in unsupported browsers by using a flash
    player as the fallback mechanism. You have to embed the player using the `<object>`
    tag at the end of the `<video>` or `<audio>` element. The browser in this case
    does not recognize the new HTML5 tags, and falls through to play the audio/video
    using the flash fallback.
  prefs: []
  type: TYPE_NORMAL
- en: The Codecs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are multiple audio/video formats that are popular on the web today. The
    support is varied in different browsers, which support only specific audio/video
    codecs. You have to ensure that your app works on maximum platforms, by including
    different formats of the same audio/video files, if necessary, as shown in this
    recipe. Detailed information on this matter, including tables showing the support
    matrix, is available at [http://diveintohtml5.info/video.html](http://diveintohtml5.info/video.html).
  prefs: []
  type: TYPE_NORMAL
- en: The Audio and Video API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Audio API** and **Video API** are now available for you to directly control
    the `<audio>` and `<video>` elements using JavaScript. They allow you to trigger
    actions (play, pause, and so on) and listen to events (playing, ended, and so
    on).'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 media players
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML5 tags by themselves give you very plain looking UI and controls. You
    can enhance the look and feel and add additional features using the Audio and
    Video API. Instead, with minimal effort, you can also use any of the popular libraries
    that are available, such as **jPlayer** ([http://jplayer.org](http://jplayer.org)),
    **MediaElement.js** ([mediaelementjs.com](http://mediaelementjs.com)), **JW Player**
    ([http://longtailvideo.com](http://longtailvideo.com)), **Video.js** ([http://videojs.com](http://videojs.com)),
    and **Audio.js** ([http://kolber.github.com/audiojs/](http://kolber.github.com/audiojs/)).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing music with the <audio> element* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
