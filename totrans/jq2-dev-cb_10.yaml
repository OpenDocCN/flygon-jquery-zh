- en: Chapter 10. Working with jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic mobile website template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a complete static website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a dynamic mobile website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the quick call functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the send SMS functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mobile-friendly lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using touch-oriented events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating mobile-compatible forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a complete registration and login system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a complete mobile web app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery Mobile is a beautifully crafted framework built to make it easier to
    create mobile-friendly websites and applications. jQuery Mobile incorporates themeable
    UI elements tailored for the mobile experience and provides custom events targeting
    special events on touch screen devices.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides an introduction to jQuery Mobile and insights into its
    capabilities. In this chapter, you will learn how to create a basic mobile website
    that utilizes common elements such as buttons and lists. You will then go on to
    learn about some of the mobile-specific features such as **Touch to Call**.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start this chapter, ensure you have downloaded the latest release
    of the jQuery Mobile framework from the jQuery website ([http://jquerymobile.com/download](http://jquerymobile.com/download)).
    Create a folder named `chapter10` where you will save all your recipe files for
    this chapter. Within this folder, create a folder named `jquery-mobile` and place
    the main jQuery Mobile JavaScript and CSS files in it, including the `images`
    folder, which will hold all the icon sprites referenced in the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The version of jQuery Mobile used within this chapter is 1.3.2, but most recipes
    will work with newer releases.
  prefs: []
  type: TYPE_NORMAL
- en: For some recipes in this chapter, you will require a web server running PHP
    and MySQL. This web server could be either a local development server or one hosted
    within the cloud. You will also need access to a MySQL admin interface such as
    PHPMyAdmin so you can run SQL scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic mobile website template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you what the basic layout for a simple jQuery Mobile web
    page looks like. You will also be able to use this HTML page as a template for
    future jQuery mobile projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the `chapter10` folder that you created earlier, create `recipe-1.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Insert the following HTML code into `recipe-1.html` to create a very basic
    jQuery Mobile single page website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Ensure you update references to the jQuery libraries and CSS to reflect your
    downloaded files. Open `recipe-1.html` in a web browser and you will see how quickly
    you can create a basic mobile-friendly web page with jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first glance, the template page doesn't look much different from a typical
    HTML web page. The HTML5 standardized document type is declared with `<!DOCTYPE
    html>` and the required CSS and JavaScript are included within the head of the
    document.
  prefs: []
  type: TYPE_NORMAL
- en: What does differ is the viewport's `meta` tag, which is not always present in
    typical HTML pages. This tells the browser how it should set the page dimensions
    and zoom level. If these are not set, most mobile devices will use a virtual width,
    making the web page look zoomed out.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `data-` attribute is a new HTML5 implementation, allowing for custom element
    attributes while still providing valid markup. These `data-*` attributes allow
    you to store arbitrary information about a particular element, and jQuery Mobile
    utilizes this ability.
  prefs: []
  type: TYPE_NORMAL
- en: With jQuery Mobile, you use the `data-role` attribute to indicate the purpose
    of elements. In the simple template we created in this recipe, we used the page,
    header, content, and footer roles to create the structure for a simple page. Each
    of these roles are self-explanatory, but they will also become clearer throughout
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with all jQuery implementations, there is a wealth of documentation available
    ([http://jquerymobile.com](http://jquerymobile.com)) that all developers should
    utilize. To get the most out of jQuery Mobile, ensure you read the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Building a complete static website*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a complete static website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to quickly create a simple static website using
    jQuery Mobile. Using the template created in the previous recipe, it only takes
    adding additional elements with the correct roles to create extra pages and the
    navigation between them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-2.html` in the `chapter10` folder you created earlier and ensure
    you have your newly created jQuery Mobile template ready.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a functional mobile website using jQuery Mobile, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the jQuery Mobile template you created earlier into `recipe-2.html` and
    remove everything within the `<body>` tags as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following code in between the `<body>` tags to create the home page
    for the simple static website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create an about page that is linked to the home page, add the following
    code after the home page declaration but still within the `<body>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat the previous step with the following code to add the final contact page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-2.html` in a web browser and you will be presented with the mobile
    website, and you will be able to use the buttons on the home page to navigate
    to and from the about and contact pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe''s code, you will see the `data-role` attribute used many times
    to indicate the function of many of the HTML elements. To declare multiple pages,
    you simply re-use the basic page structure that was used within the template and
    change the contents as required. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is the basic structure for the about page used within this recipe. The
    main `div` element is indicated as a page using `data-role="page"`. To allow for
    navigation to this page, a unique ID is defined as `about` in the same way you
    would any HTML element (`id="about"`). There is the additional attribute of `data-title`
    on the page division that makes it possible to overwrite the content of the `<title>`
    tag in the document head so that the page title can be changed on a per-page basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use an anchor element to create an internal link to one of the pages
    created in this way, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When users click on the link, they will be presented with the page that has
    the unique ID `about`, indicated within the `href` attribute as `#about`. The
    default page transition will also be used to provide a smooth navigation effect.
    The `data-role="button"` attribute is used to style the element into a button
    and the `data-theme="a"` attribute specifies which theme to use for styling. Read
    the mentioned documentation to see what themes are available by default and also
    how to create your own.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a basic mobile website template*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building a dynamic mobile website*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a dynamic mobile website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we created a basic website that would allow you to provide
    content to a user and update it manually relatively easy. In most situations,
    this would not be enough. Most websites today rely on some form of database to
    provide them with rich, new content on a regular basis, and it should be no different
    with mobile websites. This recipe will show you how to use PHP with jQuery Mobile
    to create dynamic pages with content served from a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You are going to need to create the following directory structure in the web
    root of your web server. In the following figure, `www` is the web root; this
    may be different for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/0896OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the web root of your web server (`www`), create an `includes` folder and
    the files `index.html` and `categories.php`. Within the `includes` folder, create
    a subfolder named `jquery-mobile` and ensure all the jQuery Mobile library files
    have been copied into it. Also, within the `includes` folder, create `script.js`
    and add the jQuery library (`jquery.min.js`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a dynamic mobile website using PHP, carefully perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Re-using the structure that was created as part of the template in the first
    recipe, add the following code to `index.html`. This will create a home page and
    an additional blank page with the ID of `categorypage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following PHP code to `categories.php` to be able to provide content
    on request to the jQuery Mobile site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To catch the user request for one of the dynamic pages, add the following jQuery
    code to `script.js`, which will listen for the `pagebeforechange` event. This
    allows us to intercept just before the user is sent to the category page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To be able to generate the dynamic page, content from the PHP script is required.
    Add the following JavaScript function to the end of `script.js` to make an AJAX
    request to collect this data and generate the markup for the dynamic page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your newly created mobile website via your web browser (for example, `http://localhost/`)
    and you will be presented with the home page, which provides a button for three
    different categories. Click on one of these buttons to be taken to a new page
    with the content displayed served from the PHP script you have just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML code that is used to create the mobile site in this recipe differs
    little from the previous static mobile site. The only difference is that there
    is only one additional page with no title or content. This is because the additional
    page will be re-used to create multiple pages dynamically, and its title and content
    will be set based on the user request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML code within `index.html` creates the home page with three buttons
    labeled **Colours**, **Shapes**, and **Sounds**. Each of these buttons is a link
    to the same internal page with some additional information, as shown in the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of the buttons provide a different value for the `cat` variable representing
    the different category pages. When the user clicks on one of these pages, the
    default behavior is for jQuery Mobile to navigate the user to this internal page.
    As we are creating these internal pages dynamically, we need to intercept this
    behavior, collect the requested category content from a PHP script, and then generate
    the page. To do this, we bind to the `pagebeforechange` event as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As we only want to intercept certain page requests, there are a few checks
    we perform before we ask for the dynamic content. We can get the request URL from
    the `data` object provided to the event handler function. We first check that
    the URL is a string as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is a string, it is parsed to a URL object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the URL object has been created, it is possible to perform two final checks
    to see if the requested page is one of the category pages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using the `search()` function, it is possible to search for the string `#categorypage`
    to check if it is the category page being requested, and then again to check that
    a `cat` variable has also been provided.
  prefs: []
  type: TYPE_NORMAL
- en: If these checks pass, the `displayCategory()` function is called to collect
    and render the content for the dynamic page. `e.preventDefault()` is also used
    to stop jQuery Mobile from navigating the user to the requested page before it
    has been generated with the dynamic content.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the `displayCategory()` function, there are a series of variables
    declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The first two take values from the request URL, the requested category, and
    the page ID (that is, `#categorypage`).
  prefs: []
  type: TYPE_NORMAL
- en: The page ID is then used to select the page DOM element from `index.html` using
    the typical jQuery selector. Then, using the `page` element, it is possible to
    find and store the DOM elements for the page header and content, which we can
    manipulate later using standard jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: An AJAX request using jQuery's `$.ajax()` function is then used to make a POST
    request to `categories.php`, specifying the value of `catName`, which was taken
    from the request page URL.
  prefs: []
  type: TYPE_NORMAL
- en: This `categories.php` PHP script holds a multidimensional array that stores
    data for the three different categories. This PHP script takes the posted category
    and checks to see if there is a matching category within the `$categories` array
    using `isset()`. If there is, the `$response` array's data value is updated to
    include the data for the requested category. If there is no data for the requested
    category, the `$response` array's success value is set to `false` and an error
    message is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the PHP script sets the content type and charset before it encodes
    the `$response` array as JSON and outputs it.
  prefs: []
  type: TYPE_NORMAL
- en: The AJAX request made from the `displayCategory()` function will receive this
    JSON data and process it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'By checking if `response.success` is true, it is possible to determine if there
    is some data to display for the requested category. If there is, the page''s title
    can be added along with the HTML code created for the content, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that the URL reflects the page the user is viewing, the jQuery `data()`
    function is used to set the `url` attribute on the `categorypage` element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the `changePage()` function is called to navigate the user to the newly
    generated page, where they will be presented with the requested content served
    from the PHP script. The `changePage()` function will also insert an entry into
    the browser history to provide typical browser navigation behavior.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP script in this recipe that provides the content to populate the additional
    category pages holds this content within a PHP array. This is just for demonstrative
    purposes and could easily be the content that is stored within a database accessible
    by the PHP script.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Building a complete static website*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the quick call functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 allows developers to tell the browser to launch an application to make
    a phone call in the same way you would do for an e-mail. This recipe will show
    you how to do this with a jQuery Mobile button so that when users click on this
    button, their default call application will open with a prepopulated telephone
    number.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the `chapter10` folder, create `recipe-4.html` for use within this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To allow users to be able to click on a button to make a phone call without
    having to copy and paste a number into their call application, perform the following
    simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-using the mobile website template, add the following HTML code into `recipe-4.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a button into the `content` section of the home page with the `tel:` attribute
    that will launch the call application once pressed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-4.html` in Google Chrome and pressing the **Call Me!** button
    will present you with an alert informing you that the website is requesting an
    external application to be opened. Opening the web page on your mobile browser
    will open your device's default call application, allowing you to make a call
    with the number specified on the button element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For many years, the `mailto:` attribute has been available to allow websites
    to open the user''s default mail client. An example is shown in the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: HTML5 allows some additional attributes that work in a similar way to allow
    for additional functionality. The `tel:` attribute is one of them. Browsers that
    support this attribute will open the default calling application installed on
    the device or computer when the user clicks on the link. Note that to open Skype,
    a popular VOIP application, you may need to use an alternative attribute called
    `callto:`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Implementing the send SMS functionality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the send SMS functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe covered making a call directly from your mobile website.
    Making it easy for the user to send an SMS is also a useful feature. This recipe
    will show you how to add a button that, when clicked, will open the default SMS
    client on the user's device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create `recipe-5.html` in the `chapter10` folder you created before starting
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is easy to allow users to be able to quickly send an SMS message to you
    via your mobile website. Perform the following simple steps to learn how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once more, using the jQuery Mobile template created in the first recipe of
    this chapter, create a simple mobile website within `recipe-5.html` using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following text and anchor element within the `content` section of the
    home page in `recipe-5.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-5.html` on a mobile device and click on the **SMS Me!** button.
    Your default SMS client will open with the recipient field already populated with
    the number specified in the HTML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the new `tel:` attribute provided by HTML5, the `sms:` attribute
    is also available. This will tell compatible devices to open the default SMS client
    with the telephone number specified. An example is shown in the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This anchor element also has the `data-role` attribute and the value of a button
    so that jQuery Mobile adds the appropriate styling for a simple button.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the telephone number, it is also possible to specify some text
    to be automatically added to the message body; change the anchor element as follows
    to add this functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Implementing the quick call functionality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mobile-friendly lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There have been various recipes throughout this cookbook that utilize HTML lists
    to present data in a simple and effective way. jQuery Mobile allows developers
    to quickly add mobile-and touch-friendly lists to their jQuery Mobile website.
    This recipe provides you with multiple examples of the more common types of lists
    made available by jQuery Mobile. You can copy and re-use the code for these lists
    at your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the `chapter10` folder you created earlier, create a single HTML file
    called `recipe-6.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand how to add different types of lists that are mobile-friendly,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a basic jQuery Mobile site by adding the following HTML to `recipe-6.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create the most common list type—a basic linked list—add the following code
    in the `content` division element in `recipe-6.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To create a nested list, add the following HTML structure within the `content`
    division element. Make note of the comment within the HTML that, for this list
    to work correctly, you will need to serve `recipe-6.html` from a web server. The
    reason for this is given in the *How to do it...* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When displaying content within a list, there may be a need to allow the user
    to interact with each list item in multiple ways. jQuery Mobile allows the developer
    to easily add buttons alongside the list elements with icons to reinforce their
    functionality. Use the `data-split-icon` attribute to add this functionality to
    a list as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Long lists can become cumbersome to navigate. jQuery Mobile allows the developer
    to quickly add a filter option to any list, which will allow the user to look
    for the list items they require. To add a list with this functionality, use the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-6.html` within a web browser will present you with a range of
    list examples, as shown in the following screenshot, that you can use at your
    convenience in future projects:![How to do it…](img/0896OS_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `data-role="listview"` attribute and value, it is possible to turn
    a basic HTML list into a mobile-friendly implementation. jQuery Mobile, as it
    does with buttons and other elements, will automatically add the styling.
  prefs: []
  type: TYPE_NORMAL
- en: If you refer to the documentation ([http://jquerymobile.com/demos/1.2.1/docs/lists/docs-lists.html](http://jquerymobile.com/demos/1.2.1/docs/lists/docs-lists.html)),
    you will get a complete list of all of the available list types along with detailed
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The majority of the examples used in this recipe are simple and self-explanatory.
    The nested list part of the recipe has some additional functionality that may
    not be obvious. With most mobile devices, the screen space is very limited, especially
    in portrait mode. Because of this, it would not make sense to allow nested lists
    to act in their traditional way, which is to expand to the right with a different
    indentation, as illustrated in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Top Level Item 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top Level Item 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top Level Item 3 – With Sublevel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second Level Item 1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Second Level Item 2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To save space and provide a better user experience, when you add a nested list,
    jQuery Mobile will create an additional page with the sublist items within. When
    the user selects a list item that has a list within itself, they are taken to
    an additional page where the sublevel items are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this recipe, the additional page created for the sublevel
    items does not work unless the page is served from a web server using HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: One of the more powerful examples within this recipe is the ability to quickly
    add a filter to your lists. Simply by adding the `data-filter="true"` attribute
    and value on the HTML list, jQuery Mobile automatically adds the filter input
    to the top of the list, allowing the user to filter out unwanted list items.
  prefs: []
  type: TYPE_NORMAL
- en: Using touch-oriented events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with typical events available with jQuery, such as `click` and `hover`,
    jQuery Mobile makes touch-centric events available to the developer. Using these
    events, it is possible to add extra functionality to your mobile application for
    these additional user interactions. This recipe provides samples for many of these
    useful events that will allow you to re-use them at your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the web root of your web server, create `recipe-7.html` and `recipe-7.js`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn which touch-centric events are available and how to use them, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a basic mobile website with an empty list by adding the following HTML
    to `recipe-7.html`. Make sure you update the references to the included libraries
    where required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the top of `recipe-7.js`, add the following function, which will add a new
    list item to the list you have just created within `recipe-7.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add a new list item when the user performs a tap, add the following JavaScript
    code to `recipe-7.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To listen for the `taphold` event and add a new list item, add the following
    code directly under the previous `.bind()` statement within the `$(function(){})`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The same can be done to listen for the `swipe` event. Append the following
    `.bind()` definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To clear the list when the user swipes left, append the following JavaScript
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, to detect when the user changes the device''s orientation, add the
    following code after the `swipeleft` bind definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With a mobile- and touch-compatible device, open `recipe-7.html` and perform
    a range of touch events to see the appropriate responses added to the list. When
    you swipe left, the list should empty, and when you change the device's orientation,
    a new list item will be added, indicating the new orientation (portrait or landscape).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By using the following code, it is possible to listen for various events that
    jQuery Mobile makes available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: To see the full list of events that are available, read the documentation ([http://jquerymobile.com/demos/1.2.1/docs/api/events.html](http://jquerymobile.com/demos/1.2.1/docs/api/events.html))
    on the jQuery Mobile website, which provides a comprehensive list with examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this recipe, the `addEvent()` function takes a string that it will append
    to the list element created within the simple mobile website in `recipe-7.html`.
    When you manipulate a jQuery Mobile list with JavaScript, you must call the `refresh`
    method to ensure that the styling is reapplied to the newly added elements. This
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Knowing when the user changes the device''s orientation can be useful to rearrange
    elements on the page to improve the user experience. With jQuery Mobile, this
    is very easy to do. Simply bind to the `orientationchange` event and ready the
    `orientation` property of the `event` object to determine what the new orientation
    is, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note that unlike the other events in this recipe, this had been bound to `window`
    and not `document`, as `document` is unaware of the browser or device orientation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Interacting with the User by Making Use of
    jQuery Events"), *Interacting with the User by Making Use of jQuery Events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating mobile-compatible forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery Mobile provides a wide array of form components that are similar to the
    jQuery UI offering but optimized for mobile devices. This recipe provides examples
    of the more commonly used form elements so that you can re-use them at your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the `chapter10` folder you created earlier, create `recipe-8.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn what form elements are made available by jQuery Mobile and how to
    use them, perform each of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple jQuery Mobile website to hold all the examples. Add the following
    HTML code to `recipe-8.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code inside the `content` division element you have just
    added to create a range of text input elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create two different varieties of select menus, add the following code under
    the text inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create checkboxes and radio buttons, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, to create some additional elements—a switch and slider—add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-8.html` in a web browser will present you with a range of different
    form elements. You can then easily select and re-use the code for any of the element
    types, as shown in the following screenshot:![How to do it…](img/0896OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each type of jQuery Mobile element used within this recipe is explained in detail
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Text input
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'jQuery Mobile provides different text input elements. The typical text input
    and text area elements are easily created by adding a label and either an `input`
    or `textarea` element inside a `div` element with the `fieldcontain` class, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: To create a search input, simply add `data-type="search"` to the `input` element.
    This adds a search icon to the `input` element and also provides a clear button
    once the user has entered some text.
  prefs: []
  type: TYPE_NORMAL
- en: Select menu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two select menus provided as examples in this recipe look identical at face
    value. When you select the first simple example, you are provided with a dropdown
    that looks like a typical select menu on a normal non-mobile-optimized website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second example, which has the additional `data-native-menu="false"` attribute
    added, provides a different selection menu once clicked. This additional menu
    makes it easier to make a selection using a touch interface. The following screenshot
    provides a comparison of the two types of select menus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Select menu](img/0896OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Checkboxes and radio buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a `fieldset` element with the `data-role="controlgroup"` attribute, it
    is very easy to create checkboxes and radio buttons, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: To create a set of radio buttons, you can re-use the preceding code, changing
    the `type` attribute to `radio` and ensuring they all have the same value within
    the `name` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these interface elements, jQuery Mobile makes it possible to
    have an inline equivalent. Simply add the `data-type="horizontal"` attribute onto
    the `fieldset` element to get the inline version of either checkboxes or radio
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Additional
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final two elements provided as part of this recipe are a switch and a slider.
    The `switch` element is essentially a select menu with only two options, but presented
    in a more touch-friendly manner. The `slider` element is created by adding the
    `data-type="range"` attribute to a number input (as shown in the following code),
    which allows a user to easily enter and change a numeric value on a form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the examples provided as part of this recipe are displayed at the default
    size. jQuery Mobile provides all its form elements with an additional smaller
    size for situations where the default is a little too large.
  prefs: []
  type: TYPE_NORMAL
- en: To use the mini equivalent, add the attribute `data-mini="true"` to elements
    requiring the smaller size.
  prefs: []
  type: TYPE_NORMAL
- en: Building a complete registration and login system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to create a simple register and login system from
    scratch using jQuery Mobile and PHP with a MySQL database. This recipe will form
    the base for a complete web application in the next recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should already have a PHP and MySQL server available that will be utilized
    to complete this recipe. Within the web root of your web server, create `index2.html`
    and `script2.js`, which will hold the main functionality of the application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a complete registration and login system, ensure you follow each
    of the following instructions carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `index2.html` to create a simple jQuery Mobile
    website and home page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following HTML to add a login page to `index2.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A registration page can also be created using the following HTML code, ensuring
    the page code is added within the `body` section of the HTML document in `index2.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final page to add is the member page. Create this using the following HTML
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the following SQL code, create a database called `chapter10` and a table
    called `user` within your MySQL database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create `connect.db.php` in the web root of your web server and add the following
    PHP code to connect to the `chapter10` database. Update the database username
    and password if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To be able to add new users to the `user` table, create `register.php` within
    the web root of your web server and add the following PHP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To allow users to log in with their newly created account, create `login.php`
    within the web root of your web server and add the following PHP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the logout functionality, create `logout.php` within the same directory
    as `login.php` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To allow a user to be able to submit their information for registration, add
    the following JavaScript code to `script2.js` within the jQuery on-load block
    `($(function(){});`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To react when the user attempts to log in from the login page, add the following
    JavaScript code to `script2.js` under the code you have just added for registration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To allow the user to be able to click on the logout button and be logged out,
    add the following code to `script2.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To prevent access to the members page, add the following code to check if the
    user is logged in when they try to navigate to this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code uses the `getUser()` function to determine if the user has
    been logged in or not. Add the following function to the end of `script2.js`,
    ensuring it is added outside the `$(function(){});` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add some basic styling to the error messages within the web root of your
    web server, create a file named `styles.css` and add the following CSS code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visiting your web server that is serving `index2.html` will allow you to register
    an account. If you attempt to visit the members page without being logged in,
    you will get a message saying you must be logged in and will then be sent back
    to the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each section of code created within this recipe is explained in detail in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The HTML within `index2.html` creates a simple jQuery Mobile website with the
    following four pages:'
  prefs: []
  type: TYPE_NORMAL
- en: The home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The register page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The members page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The home page provides links to both the login and register pages, and each
    of these pages link to each other respectively. The members page has a logout
    button that allows the user to log out once they have gotten access to the members
    page. The HTML code is simple, and each element has been explained in detail in
    the previous recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SQL code that is provided as part of this recipe can be used to create the
    required `chapter10` database and the `user` table, which stores the user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are four PHP files created within this recipe. The first is `connect.db.php`,
    which establishes a connection to the MySQL database and is included within the
    other three PHP files. The PHP `mysqli` class is used to connect and query the
    MySQL database throughout the PHP files in this recipe. You can find more information
    about this class on PHP.net ([http://www.php.net/mysqli](http://www.php.net/mysqli)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `register.php` file takes a set of values via a POST request. These values
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Username`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Password again`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PHP script performs basic validation for all three inputs to ensure that
    the username specified is between 3 and 32 characters long and that a password
    has been provided that is at least 6 characters in length. It also ensures that
    both passwords match and queries the database to ensure the requested username
    has not already been taken.
  prefs: []
  type: TYPE_NORMAL
- en: If it passes all validations, a new user is inserted into the database, which
    will then allow this user to log in using the specified details. It is important
    to note that the password is encrypted using the PHP `crypt()` function with the
    default settings. This is a simple encryption method, and greater encryption techniques
    should be used in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: The `login.php` script takes a username and password via a POST request and
    queries the user table to see if there are any matching user credentials; if so,
    a PHP session is created for that user and a user object returned to the client.
  prefs: []
  type: TYPE_NORMAL
- en: The `logout.php` script simply destroys the PHP session if one exists, logging
    out the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these PHP scripts return data in a standard format that has been used
    multiple times throughout this cookbook. At the top of each script, an array is
    created as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script is successful and no errors are needed to be output, the success
    value is changed to `true` and the `errors` array left empty. In the case of the
    `register.php` script, when one of the inputs fail validation, an associative
    array is returned with the key matching the input. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This is so that the JavaScript on the client knows which input to place the
    error message under, making it easier for the user to understand what changes
    they need to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the response array is output, it is converted to a JSON object, and the
    content type and charset is set appropriately using the PHP `header()` function,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JavaScript used within this recipe is simple and nothing new. There are
    three `click` event handlers created for the register, login, and logout buttons.
    The callback function provided to each of these event handlers collects data from
    the associated form and uses the jQuery `$.ajax()` function to make a POST request
    to the `register.php`, `login.php`, or `logout.php` scripts respectively. AJAX
    with jQuery has been covered extensively in [Chapter 3](ch03.html "Chapter 3. Loading
    and Manipulating Dynamic Content with AJAX and JSON"), *Loading and Manipulating
    Dynamic Content with AJAX and JSON*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each of the AJAX requests, the `beforeSend()` function is used to open
    and show a spinner image to the user, indicating a request is being made. This
    spinner image is then removed on the success of the AJAX request. This is shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, as shown in the following code, within the `success()` function for each
    of the AJAX requests, the `$.mobile.showPageLoadingMsg()` function is used to
    display a message to the user for various reasons, either on error or for information
    regarding a successful registration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The first argument to the function is the theme, the second is the message you
    wish to display, and setting the third argument to `true` will remove the spinner
    image, just displaying the simple text message.
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously mentioned, the `login.php` script returns an object that represents
    the newly logged-in user. As the client JavaScript has no sense of PHP sessions,
    this user object needs to be stored locally so that the client is aware of the
    logged-in user. To do this, local storage is used, as shown in the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Local storage will only allow you to store a string, but we need to store an
    entire object. To get around this, we convert the object to a JSON string, which
    can then be converted to an object again when retrieved from local storage. The
    preceding example uses the `JSON.stringify()` function to convert the user object
    to a string and stores it in local storage under the name `user`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getUser()` function is then used to retrieve and convert the string value
    to an object, or return `false` if there is no currently logged-in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: When the AJAX call to the `logout.php` script that destroys the server session
    is successful, `localStorage.removeItem("user")` is also used to remove the user
    object on the client.
  prefs: []
  type: TYPE_NORMAL
- en: The final element of the JavaScript within this recipe is restricting access
    to the members page. Note that any restriction enforced using client-side code
    can be bypassed by any user with the right knowledge. This type of client-side
    restriction is only used to enhance the user experience, and it is always a requirement
    that the server side prevent access to any actions that users shouldn't be able
    to perform.
  prefs: []
  type: TYPE_NORMAL
- en: Within the *Building a dynamic mobile website* recipe, the jQuery Mobile `pagebeforechange`
    event was used to detect the user trying to access a certain page. This same functionality
    is used within this recipe to catch when the user is trying to access the members
    page. The `getUser()` function is then used to determine if the user is logged
    in or not. If they are not logged in, they are prevented from navigating to the
    members page and sent back to the home page after being told they must be logged
    in to access the members page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, to submit any of the forms on the website, the user is required to
    click on or press the associated button. To improve on this, it would be beneficial
    if the user could press the *Enter* key or the mobile-equivalent go button from
    within any of the inputs in the form.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Building a dynamic mobile website*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a complete mobile web app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to create a simple but complete web app that allows
    registered users to write notes that can be accessed on all devices. The notes
    app extends upon the previous login and register recipe to allow the logged-in
    user to create and manage a note or a to-do list.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start this recipe, ensure you have completed the previous recipe,
    *Building a complete register and login system*. You will still need a web server
    running PHP and MySQL to complete this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a complete mobile web app that can be accessed on all mobile and
    desktop devices, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To store the user-created notes, another database table is required. Use the
    following SQL code to create a table within the `chapter10` database called `note`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While most of the pages defined within `index2.html` stay the same, we need
    to update the members page to have a button that takes the user to their current
    notes. Update the members page with the following HTML in `index2.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to create the notes page that this new button takes the user to.
    Use the following HTML code to create the notes page, adding it after the members
    page in `index2.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the notes page, the user will be able to view their current notes, so
    there needs to be a way to create new notes. Using the following HTML code, add
    the create note page to `index2.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the new database table created and the HTML UI updated for the additional
    functionality, we now need to create the PHP that provides the interaction to
    the database. To enable a user to create a new note, within the web root of your
    web server, create a file named `addNote.php` and insert the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To populate the notes page with the user''s current notes, we need to be able
    to retrieve the notes from the database. Create a file named `getNotes.php` and
    add the following PHP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The user also needs to be able to remove unwanted notes. For this, within the
    web root of your web server, create a file named `deleteNote.php` and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With all the backend code in place, we can now add JavaScript to link the user
    interface and this backend code together. First of all, we need to make a few
    changes to the original JavaScript code from the previous recipe within `script2.js`.
    At the top of `script2.js`, but still within the jQuery on-load block `$(function(){});`,
    add the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `success()` function for the logout AJAX call, just before `$.mobile.changePage("#home");`,
    add the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `pagebeforechange` event handler, we need to add some code so that
    we can display the currently logged-in user''s username within the members page.
    Update the code as follows, adding `$(''.username'').html(user.username);`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the required JavaScript updates made, we need to add the additional functionality.
    To allow the user to add a new note, insert the following code into `script2.js`
    to catch when the user clicks on the save note button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To populate the notes page with any currently available notes, we need to add
    some additional functionality to the `pagebeforechange` event handler. Update
    the code as follows (some code has been hidden for illustrative purposes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The currently available notes that are listed need to be clickable to allow
    users to delete them. Add the following code within `script2.js` to listen for
    a click on one of the current note list items to then make an AJAX call to the
    `deleteNote.php` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following function outside the jQuery on-load block (`$(function(){});`),
    which constructs a list item for a note:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By visiting `index2.html` served from a web server, you will be able to register
    an account and then log in, just as with the previous recipe. Once logged in,
    tapping on the **View Notes** button will take you to a page with an empty list.
    Click on the **Add note** button to add a new note. Once a new note has been added,
    you will be taken back to the current note's list with your new note showing.
    You can remove this note by clicking on it and confirming that you wish to delete
    it. You can access your notes on multiple devices across logged-in sessions.![How
    to do it…](img/0896OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each section of the code for this recipe is explained in detail in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML code within this recipe adds a few extra pages so that the logged-in
    user can create a note and view the previous ones. The notes page uses a listview
    with a filter that was shown within the *Adding mobile-friendly lists* recipe
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simple SQL code within this recipe creates an additional table called `note`
    that is used to store all of the user's notes. A foreign key relationship is also
    defined between the `user_id` field on the `note` table and the `id` field on
    the `user` table.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All PHP scripts within this recipe use the same database connection file and
    structure as the previous recipe. There are an additional three PHP scripts created
    for this recipe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addNote.php`: This script takes a POST request with the text for a note. It
    then checks to see if there is a currently logged-in user using the PHP `$_SESSION`
    super global. If there is a logged-in user, the provided text is validated to
    ensure it is between 0 and 1024 characters in length. If it is, it is inserted
    into the database with the logged-in user''s ID and an added date. To get the
    database ID for the newly created note item, `$mysqli->insert_id` is used. This
    is then returned within the `note` object, which is sent back to the requesting
    script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteNote.php`: This script, like `addNote.php`, takes a POST request with
    a note ID as a parameter. It also checks to ensure there is a logged-in user and,
    if so, will then use a simple SQL query to delete the specified note from the
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getNotes.php`: By using the logged-in user''s ID, all notes for that user
    are retrieved from the database and converted to JSON so that they can populate
    a list element using JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If a PHP script requires access to session data, the `session_start()` function
    must be called at the top of the script, before any other code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the top of `script2.js`, the `_currentNotes` variable is declared as shown
    in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This is because the current note's list is required throughout the code, and
    by re-using the same variable, jQuery is not forced to reselect the element multiple
    times.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dynamically populate the `#current-notes` list element with the currently
    logged-in user''s notes from the database, the `pagebeforechange` event is exploited
    once again. With an additional check as part of an `if...else` statement, it is
    possible to determine when the user tries to go to the notes page, as illustrated
    by the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user does visit this page using `_currentNotes.data("initialized")`,
    it is possible to check if the list has already been populated. If the initialized
    `data` attribute has already been set, then it has been populated, and there is
    no need to go and get all the data from the database again. If the initialized
    attribute has not been set to `true`, an AJAX call is made to collect the current
    notes and populate the list as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The `_currentNotes.data("initialized", true);` line is used to set the initialized
    attribute to `true` so that when the user returns to the page, the script knows
    not to recollect the data. The AJAX call is made to the `getNotes.php` script
    and then a new list item is created using the `createNoteItem()` function for
    every returned `note` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If jQuery Mobile has already initiated the `#current-notes` list (meaning the
    user has already been to the page once before), the listview will need to be refreshed.
    This is done using the following code, taken from the `success()` function of
    the AJAX call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The create note and delete note functionalities within this recipe are very
    simple and have been covered numerous times throughout this book. As an overview,
    when either the save note button or the note list item is clicked, an AJAX call
    is made to the `addNote.php` or `deleteNote.php` script respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'When adding a new note, the following code is used to prepend the new note
    item to the current note''s list and send the user back to the notes page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'When deleting a note, the following code is used to remove the deleted note
    item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Because jQuery Mobile adds a lot of additional elements to the DOM for styling
    the list, the `closest()` function is used to find the list element when the anchor
    (within the list) is clicked. Additionally, note that `$(document).on('click',
    '.delete-note'` is used as opposed to `$('.delete-note').click()` so that the
    `click` event handler is triggered for dynamically added elements. This was covered
    in [Chapter 2](ch02.html "Chapter 2. Interacting with the User by Making Use of
    jQuery Events"), *Interacting with the User by Making Use of jQuery Events*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides a very simple example of a complete mobile web application.
    There are many aspects that could be improved upon but were left out to ensure
    this recipe was kept as concise as possible.
  prefs: []
  type: TYPE_NORMAL
- en: One element that could be improved upon would be the security aspects of the
    `deleteNote.php` script. The script will currently allow the logged-in user to
    delete any note provided the correct ID is specified. A user with some knowledge
    could hijack the request by specifying a note ID of their choice, potentially
    deleting a note from another user. This can easily be avoided by checking if the
    specified note ID belongs to the logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Interacting with the User by Making Use of
    jQuery Events"), *Interacting with the User by Making Use of jQuery Events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building a complete registration and login system*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
