- en: Chapter 3. Crafting Buttons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Making simple checklists
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the spacing within buttonsets
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filling space with buttons automatically
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting buttons within a group
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using effects with the button hover state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button icons and hiding text
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **button** widget is an easy way to decorate the HTML button and link elements
    in your user interface. With a simple call to the button widget, we're able to
    decorate the standard elements with the theme framework found in jQuery UI. Additionally,
    there are two types of buttons. There is the singular notion of a button, the
    more popular use case. But there is also the notion of a **buttonset**—used in
    cases where we would like to decorate checkboxes and radio buttons found in typical
    HTML forms.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we take a much closer look at what the button entails, covering
    some usage scenarios by example. We'll go from the simple usage, such as creating
    a checklist and sorting buttons, to more advanced usage, such as applying effects
    and automatically filling space. Along the way, you'll learn how the widget framework
    supports developers in extending the button where it doesn't quite do what they
    need it to.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Making simple checklists
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checklists are easy enough to do in plain old HTML, all you really need are
    some checkboxes and some labels beside them. If you're using a widget framework
    such as jQuery UI, however, we can enhance that list with ease. The button widget
    knows how to behave when applied to an `input` element of type `checkbox`. So
    let's start off with a basic list and see how we can apply the button widget to
    the `input` elements. We'll also see if we can take the user interactivity a step
    further with some state and icon enhancements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by creating a simple HTML `div` to hold our checklist. Inside, each
    item is represented by an `input` element of type `checkbox`, along with a `label`
    for the element.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this markup, we actually have a functioning checklist UI, albeit, a less-than-usable
    one. We can use the toggling capability of the jQuery UI button widget to encapsulate
    the `label` and the `checkbox` together as a checklist item.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll introduce the following JavaScript code to collect our `checkbox` inputs
    and use their `labels` to assemble the **toggle button** widget.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With that, you have a toggle-button checklist, complete with icons to assist
    in conveying the state. When the user clicks on the toggle-button, it goes into
    "on" state, which is depicted by the change in background color, and other theme
    properties. We've also added icons that toggle along with the button state.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2186_03_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our event handler, fired when the DOM is ready, requires only one line of code
    to turn the `input` elements on the page into toggle buttons. Within the button
    constructor, we're specifying that the default icon to use is the `ui-icon-bullet`
    icon class from the theme framework. The button widget knows that we're creating
    a toggle button because of the underlying HTML element. Since these are checkboxes,
    the widget will change its behavior when the button is clicked—in the case of
    a `checkbox`, we want the button to give the appearance of toggling on and off.
    Additionally, the button widget knows which `label` belongs to which button based
    on the `for` attribute. For example, the label for `for="first"` will be assigned
    to the button with `id="first"`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Next we apply the `change` event handler to all our buttons. This handler is
    the same for each button, so we can bind it to all buttons at once. The job of
    this handler is to update the button icon. We don't have to change anything else
    about the button state because the default button implementation will do that
    for us. All we need to do in our event handler is check the state on the `checkbox`
    itself. If checked, we show the `ui-icon-check` icon. Otherwise, we show the `ui-icon-bullet`
    icon.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the spacing with buttonsets
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The jQuery UI toolkit gives developers a container widget used for working with
    groups of buttons called a **buttonset**. You would use a buttonset for things
    like groups of checkboxes or groups of radio buttons—things that form a collaborative
    set.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The default appearance of the buttonset is of a unified whole. That is, the
    goal is to form a seemingly single widget out of several buttons. By default,
    the buttonset widget has no spacing controls for the developer. The buttons within
    the set, by default, are all stacked up against one another. This may not be what
    we're after, depending on the context of the buttonset widget in our overall user
    interface.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To better illustrate the spacing constraints we''re presented with, let''s
    build a buttonset widget and look at the result before we go about trying to resolve
    the issue. We''ll use the following group of radio buttons as our markup:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And we''ll create the buttonset widget as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is what our buttonset looks like. Notice that this widget still exhibits
    radio button functionality. Here the third item is selected, but will become deselected
    if I were to click elsewhere in the widget.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/2186_03_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, there is nothing wrong with the default presentation of the buttonset widget.
    The only potential challenge we might face is if we have a spacing theme happening
    elsewhere in the application—the stacked against one another look of the widget
    just might not fit in from an aesthetic perspective. We can tackle this issue
    with relatively little effort by extending the widget with an option that allows
    us to "explode" the buttons so that they're no longer touching.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: We'll implement this new exploding `buttonset` capability by extending the buttonset
    widget and adding a new option that will enable this behavior. The HTML stays
    the same as previous, but here is the new JavaScript code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过扩展按钮集小部件并添加一个新选项来实现这种新的爆炸式`buttonset`功能，该选项将启用这种行为。HTML与以前相同，但这是新的JavaScript代码。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ll want to include the following CSS on the page—including it via a new
    stylesheet is the recommended practice here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在页面中包括以下CSS——通过新样式表的方式包含它是推荐的做法：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![How to do it...](img/2186_03_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_03_03.jpg)'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our extension of the buttonset widget adds the `exploded` option, allowing the
    programmer using the widget to specify whether they would like the individual
    buttons separated from one another or not. We also override the `refresh()` method
    here in order to alter the display if the `exploded` option is `true`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对按钮集小部件的扩展添加了`exploded`选项，允许使用该小部件的程序员指定他们是否希望将各个按钮分开还是不分开。我们还在这里重写了`refresh()`方法，以便在`exploded`选项为`true`时修改显示。
- en: To do this, we create a jQuery object representing all the individual buttons
    in the buttonset. The reason we're using `map()` here is because of a work-around
    required with `checkbox` and `radio` buttons. The `ui-buttonset-exploded` class
    adds the `margin` that we're looking for between the buttons—it explodes them
    outward. Next, we remove the `ui-corner-left` and `ui-corner-right` classes from
    any of the buttons, and add the `ui-corner-all` class to each button that gives
    them each their own independent borders.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们创建代表按钮集中所有单独按钮的jQuery对象。这里我们使用`map()`的原因是因为`checkbox`和`radio`按钮需要一个解决方法。`ui-buttonset-exploded`类添加了我们在按钮之间寻找的`margin`，它将它们向外扩展。接下来，我们移除任何按钮的`ui-corner-left`和`ui-corner-right`类，并将`ui-corner-all`类添加到每个按钮上，使它们各自具有独立的边框。
- en: Filling space with buttons automatically
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动填充空间的按钮
- en: The width of any given button widget is controlled by what goes inside it. What
    this amounts to is either the primary or secondary icons, or neither, plus the
    text. The actual rendered width of the button itself isn't concretely specified,
    but instead is determined by the browser. Of course, this is a desirable feature
    of any widget—relying on the browser to compute dimensions. This approach scales
    well when there are lots of widgets in the UI to consider, and when there are
    lots of browser resolution configurations to consider.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 任何给定按钮小部件的宽度由其中的内容控制。这相当于主要或次要图标，或二者都没有，再加上文本。按钮本身的实际呈现宽度没有具体规定，而是由浏览器确定。当然，这是任何小部件的令人满意的特性——依赖浏览器计算尺寸。这种方法在需要考虑界面中有很多小部件，以及需要考虑有很多浏览器分辨率配置的情况下，很好地实现了比例缩放。
- en: There are, however, a few cases where the automatic width set forth by the browser
    isn't desirable. Think about several buttons in the same context, perhaps a `div`
    element. In all likelihood, these buttons will not render as having the same width,
    when this is in fact a desired property. Just because one button in the group
    has slightly more or slightly less text doesn't mean that we don't want them to
    share a consistent width.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些情况下，浏览器自动设置的宽度并不理想。想象一下在同一上下文中的几个按钮，也许是一个`div`元素。很可能，这些按钮不会呈现为具有相同宽度，而这实际上是一种期望的属性。仅仅因为组中有一个按钮具有稍多或稍少的文本，并不意味着我们不希望它们共享一致的宽度。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: The goal here is to treat the widest button within a group of buttons as the
    target width. The siblings of the group get notified when a new button is added,
    potentially creating a new target width if it is the widest. Let's illustrate
    the problem further by looking at the default button functionality and what it
    means in terms of width.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的目标是将按钮组中最宽的按钮视为目标宽度。当添加新按钮时，按钮组的同级按钮会收到通知，如果它是最宽的话，可能会创建一个新的目标宽度。让我们通过查看默认按钮功能以及它在宽度方面的含义来更详细地说明问题。
- en: Here is the HTML we'll use to create the button widgets.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将使用来创建按钮小部件的HTML。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We're explicitly marking each button as a block-level element so we can easily
    contrast the widths. Notice, too, that the buttons are all siblings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们明确将每个按钮标记为块级元素，这样我们就可以轻松地对比宽度。同时请注意，按钮都是同级的。
- en: The following JavaScript turns each button element into a button widget.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下JavaScript将每个按钮元素转换为按钮小部件。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the first two buttons are of the same length while the last
    button uses more text and is the widest.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，前两个按钮的长度相同，而最后一个按钮使用更多文本且最宽。
- en: '![Getting ready](img/2186_03_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now extend the button widget with some new behavior that allows the
    developer to synchronize the width of each button within a group. The modified
    JavaScript code to extend the button widget looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here you can see that the buttons communicate with one another to establish
    the correct width for each sibling within the group. In other words, the first
    two buttons altered their widths as a result of the last button being added to
    the group.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2186_03_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The extension to the button widget we've just added creates a new `matchWidth`
    option, which, if `true`, will change the width of this button to match that of
    the widest in this group if necessary.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Our extension of the `_create()` method calls the default `_create()` button
    implementation, and then we tell all our siblings to `refresh()`. We include this
    button in the list of siblings by using `addBack()`—the reason being, we might
    have to adjust our own width if there is already someone bigger than us. Alternatively,
    if we're now the widest sibling, we have to tell everyone so that they can adjust
    their widths.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: The `refresh()` method calls the base `refresh()` implementation, then figures
    out whether the width of this button should be updated or not. The first step
    is to generate a width array for all siblings in the group, including ourselves.
    With an array of widths, we can pass it to `Math.max()` to get the maximum width.
    If the current width of this button is less than the widest button in the group,
    we adjust to the new width.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we're not actually collecting or changing the width of the button
    element itself, but rather, the `span` element within. This `span` has the `ui-button-text`
    class, and is the element of variable width we're interested in. If we took the
    other route of simply measuring the button's width, we could end up with some
    messy margin issues that leave us in a state worse than we were in to begin with.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You'll notice in the previous example that the text of the resized buttons remained
    centered. We could, if so inclined, introduce a small CSS adjustment when making
    button width changes that would keep the button text aligned.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that within the `_refresh()` method, we're now stating that the `text-align`
    CSS property is `left`. Additionally, we have to add a new `_destroy()` method
    to clean up this property when the button is destroyed. The end result is the
    same as our previous example, except now the button text is aligned.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/2186_03_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Sorting buttons within a group
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the `sortable()` interaction widget to provide the user which some
    flexibility. Why not let the user move buttons around? Especially given the small
    amount of code it takes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll use a list to organize our buttons, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We'll use the following CSS to fix the list layout to better display button
    widgets.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The JavaScript code to make this happen is actually quite miniscule—we create
    the buttons, then we apply the sortable interaction widget.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使此功能生效的 JavaScript 代码实际上非常小——我们创建按钮，然后应用可排序的交互小部件。
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: At this point, we're able to drag-and-drop buttons—but only within the designated
    container element, in this case, `ul`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们能够拖放按钮——但只能在指定的容器元素内，此处为`ul`。
- en: '![How to do it...](img/2186_03_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2186_03_07.jpg)'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first thing we're doing in this example, once the document is ready, is
    creating the button widgets. We're using anchors as the underlying element, which
    works just as well as `button` elements. You'll notice too, that we've structured
    the button widgets on the page inside of an unordered list. The styles added to
    the page just remove the list indentation and the bullets. But the `ul` element
    is what we're targeting for the sortable interaction. By default, the sortable
    widget looks for all child elements and makes them the sortable items, in our
    case, these are `li` elements. The `opacity` option specified in the example tells
    `sortable` to change the visual opacity of the element being dragged.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一旦文档准备就绪，我们首先要做的事情是创建按钮小部件。我们使用锚点作为底层元素，它与`button`元素一样有效。您还会注意到，我们将按钮小部件结构化在无序列表中显示在页面上。页面添加的样式只是移除了列表的缩进和项目符号。但是我们的目标是`ul`元素，用于可排序的交互。默认情况下，可排序小部件查找所有子元素并将它们作为可排序项目，在我们的情况下，这些是`li`元素。示例中指定的`opacity`选项告诉`sortable`改变正在拖动的元素的视觉不透明度。
- en: Using effects with the button hover state
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮悬停状态的效果
- en: The button widget utilizes the various states found in the jQuery UI theme framework.
    For example, when the user hovers over a button widget, this event triggers a
    handler inside the button widget that applies the `ui-state-hover` class to the
    element, changing its appearance. Likewise, when the mouse leaves the widget,
    a different handler removes that class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮小部件利用了 jQuery UI 主题框架中找到的各种状态。例如，当用户悬停在按钮小部件上时，此事件会触发按钮小部件内的处理程序，将`ui-state-hover`类应用于元素，从而更改其外观。同样，当鼠标离开小部件时，另一个处理程序会移除该类。
- en: This default functionality of the button widget works fine—it just uses the
    `addClass()` and `removeClass()` jQuery functions to apply the hover class. As
    the user moves around and considers what he/she wants to do next, the mouse is
    likely to move in and out of button widgets; this is where we tweak the experience
    by providing the user with some subtle effects.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮小部件的默认功能很好用——它只是使用`addClass()`和`removeClass()` jQuery函数来应用悬停类。当用户四处移动并考虑下一步要做什么时，鼠标可能会在按钮小部件上移进移出；这就是我们通过提供一些微妙的效果来调整体验的地方。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this example, we'll just create three simple button elements that will serve
    as the button widgets. This way, we can experiment with moving the mouse pointer
    over several buttons.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建三个简单的按钮元素，它们将作为按钮小部件。这样，我们就可以尝试将鼠标指针移动到几个按钮上。
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's extend the capabilities of the default button widget to include a new
    option called `animateHover` that when `true`, animates the addition and removal
    of the `ui-state-hover` class.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们扩展默认按钮小部件的功能，包括一个名为`animateHover`的新选项，当设置为`true`时，会对`ui-state-hover`类的添加和移除进行动画处理。
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We've added a new option to the button widget called `animateHover`. When `true`,
    buttons will animate the addition or removal of the CSS properties found in `ui-state-hover`
    class. This is all done by overriding the `_create()` method, called when the
    button widget is first instantiated. Here, we're checking if the `animateHover`
    option is `false`, after we call the original `_create()` method that performs
    routine button initialization tasks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为按钮小部件添加了一个名为`animateHover`的新选项。当设置为`true`时，按钮将对`ui-state-hover`类的添加或移除进行动画处理。这是通过覆盖首次实例化按钮小部件时调用的`_create()`方法来完成的。在这里，我们检查`animateHover`选项是否为`false`，然后在调用执行常规按钮初始化任务的原始`_create()`方法之后执行。
- en: If the option is set, the first job is unbinding the original `mouseenter` and
    `mouseleave` event handlers from the button. These handlers are what, by default,
    simply add or remove the hover class. This is exactly what we want to change,
    so once the original handlers are removed, we're free to register our own using
    `_on()`. This is where we use the `stop()`, `addClass()`, and `removeClass()`
    functions. The jQuery UI effects extensions apply to the `addClass()` and `removeClass()`
    functions if a duration is given after the class name, which we've done here.
    We want the adding of the `ui-state-hover` class to take `200` milliseconds and
    the removal of the class to take `100` milliseconds since the initial hover is
    more noticeable by the user. Finally, the `stop( true, true )` call is a common
    technique in jQuery for ensuring animations don't overlap and cause jittery behavior
    from the user perspective.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Button icons and hiding text
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With buttons, developers can choose to render icon-only buttons. This is accomplished
    by telling the button we don't want the text displayed. This is easy enough to
    do and serves a number of use cases—often, depending on context, an icon will
    suffice in explaining its action. What's more, we can add the button label back
    any time we wish with a simple option change. We can do this because the button
    text is part of the underlying HTML component. With icons, however, things become
    a little trickier because they're an adornment on the button. We can't turn the
    icons on and off as we can do with the text—the entire icon specification needs
    to be applied once again.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Something to aim for, then, would be a method to specify the icons in the button
    constructor, but remember them once turned off. This way, the icons will behave
    as though they're part of the original DOM element.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll start with creating the structure necessary for three icon buttons. We'll
    also introduce two links that alter the state of each button.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll provide the button widget with our icon toggling capability by adding
    a new `icon` option. The idea, remember, is to provide the same capability as
    the `text` option, except for icons.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initially, the three buttons are created with `text` disabled, even though the
    button text still exists as part of the underlying DOM element. Next, we set the
    `icon` option for each of the three buttons. When the page first loads, you should
    just see icon buttons.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2186_03_08.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: The two links on the page, **no icons** and **icons** remove and add icons to
    the button widgets, respectively. The function callback for each link does this
    by setting a value for the custom `icon` option we've added to the `button` widget.
    Clicking on the **no icons** link would result in the button icons being removed,
    and replaced with their text.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2186_03_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: By clicking on the **icons** link, we're re-enabling the `icons` option we had
    set previously for each button. This is done by changing our custom `icon` button,
    so if we click on that link now, we can see that our icons are restored, without
    having to specify what icons were used.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**图标**链接，我们重新启用了先前为每个按钮设置的`icons`选项。这是通过更改我们的自定义`icon`按钮完成的，因此现在如果我们点击该链接，我们可以看到我们的图标已恢复，而无需指定使用了哪些图标。
- en: '![How it works...](img/2186_03_10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2186_03_10.jpg)'
- en: You'll notice that by setting the `icon` value to `true`, we didn't hide the
    text, as was the case in the original state of the buttons. We can still do this
    by manually setting `text` to `false`, but that should be a manual process, and
    not a modification by our button extension.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，通过将`icon`值设置为`true`，我们没有隐藏文本，这在按钮的原始状态下是这样的。我们仍然可以通过手动将`text`设置为`false`来做到这一点，但这应该是一个手动过程，而不是我们的按钮扩展修改。
- en: Our extension adds a new `_hiddenIcons` attribute where we can store the value
    of the `icons` option when the `icon` option is set to `false`. We perform the
    bulk of our work in `_setOption()`, which is called any time a developer wants
    to set an option on the widget. We only care about the new `icon` option we've
    added. First, we check if we're disabling the icons, in which case, we store a
    copy of the `icons` option in the `_hiddenIcons` attribute so that it can be restored
    at another time. We also set the `text` option to `true`, so that the text will
    display if hidden. It would be a bad idea to hide the button icon and the text
    at the same time. Finally, we actually hide the icons by unsetting the `icons`
    option.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的扩展添加了一个新的`_hiddenIcons`属性，用于在`icon`选项设置为`false`时存储`icons`选项的值。我们的大部分工作都在`_setOption()`中进行，这是在开发人员想要在小部件上设置选项时调用的。我们只关心我们添加的新`icon`选项。首先，我们检查是否禁用了图标，如果是，则将`icons`选项的副本存储在`_hiddenIcons`属性中，以便以后可以恢复它。我们还将`text`选项设置为`true`，这样如果隐藏了文本，文本就会显示。同时隐藏按钮图标和文本是一个坏主意。最后，我们通过取消设置`icons`选项来实际隐藏图标。
- en: If, on the other hand, we're enabling icons, we need to look them up in the
    `_hiddenIcons` attribute and set them as the `icons` button option. The `_create()`
    implementation we're overriding here simply stores the icons setting in `_hiddenIcons`
    and hides them if this has been specified when the widget is first created.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们启用了图标，我们需要在`_hiddenIcons`属性中查找它们，并将它们设置为`icons`按钮选项。我们在这里覆盖的`_create()`实现只是将图标设置存储在`_hiddenIcons`中，并在首次创建小部件时隐藏它们（如果已指定）。
