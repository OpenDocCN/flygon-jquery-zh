["```js\n(($) => { \n  // Code goes here \n})(jQuery); \n\n```", "```js\n(($) => { \n  $.sum = (array) => { \n    // Code goes here \n  }; \n})(jQuery); \n\n```", "```js\n$.sum(); \n\n```", "```js\n(($) => {\n  $.sum = array =>\n    array.reduce(\n      (result, item) =>\n        parseFloat($.trim(item)) + result,\n      0\n    );\n})(jQuery); \n\n```", "```js\n<table id=\"inventory\"> \n  <thead> \n    <tr class=\"one\"> \n      <th>Product</th> <th>Quantity</th> <th>Price</th> \n    </tr> \n  </thead> \n  <tfoot> \n    <tr class=\"two\" id=\"sum\"> \n      <td>Total</td> <td></td> <td></td> \n    </tr> \n    <tr id=\"average\"> \n      <td>Average</td> <td></td> <td></td> \n    </tr> \n  </tfoot> \n  <tbody> \n    <tr> \n      <td><a href=\"spam.html\" data-tooltip-text=\"Nutritious and        \n      delicious!\">Spam</a></td> <td>4</td> <td>2.50</td> \n    </tr> \n    <tr> \n      <td><a href=\"egg.html\" data-tooltip-text=\"Farm fresh or        \n      scrambled!\">Egg</a></td> <td>12</td> <td>4.32</td> \n    </tr> \n    <tr> \n      <td><a href=\"gourmet-spam.html\" data-tooltip-text=\"Chef        \n      Hermann's recipe.\">Gourmet Spam</a></td> <td>14</td> <td>7.89         \n      </td> \n    </tr> \n  </tbody> \n</table> \n\n```", "```js\n$(() => {\n  const quantities = $('#inventory tbody')\n    .find('td:nth-child(2)')\n    .map((index, qty) => $(qty).text())\n    .get();\n  const sum = $.sum(quantities);\n\n  $('#sum')\n    .find('td:nth-child(2)')\n    .text(sum);\n});\n\n```", "```js\n(($) => {\n  $.sum = array =>\n    array.reduce(\n      (result, item) =>\n        parseFloat($.trim(item)) + result,\n      0\n    );\n\n  $.average = array =>\n    Array.isArray(array) ?\n      $.sum(array) / array.length :\n      '';\n})(jQuery); \n\n```", "```js\n$(() => {\n  const $inventory = $('#inventory tbody');\n  const prices = $inventory\n    .find('td:nth-child(3)')\n    .map((index, qty) => $(qty).text())\n    .get();\n  const average = $.average(prices);\n\n  $('#average')\n    .find('td:nth-child(3)')\n    .text(average.toFixed(2));\n});\n\n```", "```js\n(($) => {\n  $.extend({\n    sum: array =>\n      array.reduce(\n        (result, item) =>\n          parseFloat($.trim(item)) + result,\n        0\n      ),\n    average: array =>\n      Array.isArray(array) ?\n        $.sum(array) / array.length :\n        ''\n  });\n})(jQuery); \n\n```", "```js\n(($) => {\n  $.mathUtils = {\n    sum: array =>\n      array.reduce(\n        (result, item) =>\n          parseFloat($.trim(item)) + result,\n        0\n      ),\n    average: array =>\n      Array.isArray(array) ?\n        $.mathUtils.sum(array) / array.length :\n        ''\n  };\n})(jQuery); \n\n```", "```js\n$.mathUtils.sum(array); \n$.mathUtils.average(array); \n\n```", "```js\njQuery.fn.myMethod = function() { \n  alert('Nothing happens.'); \n}; \n\n```", "```js\n$('div').myMethod(); \n\n```", "```js\n(function($) {\n  $.fn.swapClass = function(class1, class2) {\n    if (this.hasClass(class1)) {\n      this\n        .removeClass(class1)\n        .addClass(class2);\n    } else if (this.hasClass(class2)) {\n      this\n        .removeClass(class2)\n        .addClass(class1);\n    }\n  };\n})(jQuery);\n\n$(() => {\n  $('table')\n    .click(() => {\n      $('tr').swapClass('one', 'two');\n    });\n});\n\n```", "```js\n(function($) {\n  $.fn.swapClass = function(class1, class2) {\n    this\n      .each((i, element) => {\n        const $element = $(element);\n\n        if ($element.hasClass(class1)) {\n          $element\n            .removeClass(class1)\n            .addClass(class2);\n        } else if ($element.hasClass(class2)) {\n          $element\n            .removeClass(class2)\n            .addClass(class1);\n        }\n      });\n  };\n})(jQuery); \n\n```", "```js\n(function($) {\n  $.fn.swapClass = function(class1, class2) {\n    return this\n      .each((i, element) => {\n        const $element = $(element);\n\n        if ($element.hasClass(class1)) {\n          $element\n            .removeClass(class1)\n            .addClass(class2);\n        } else if ($element.hasClass(class2)) {\n          $element\n            .removeClass(class2)\n            .addClass(class1);\n        }\n      });\n  };\n})(jQuery); \n\n```", "```js\n(function($) {\n  $.fn.shadow = function() {\n    return this.each((i, element) => {\n      const $originalElement = $(element);\n\n      for (let i = 0; i < 5; i++) {\n        $originalElement\n          .clone()\n          .css({\n            position: 'absolute',\n            left: $originalElement.offset().left + i,\n            top: $originalElement.offset().top + i,\n            margin: 0,\n            zIndex: -1,\n            opacity: 0.1\n          })\n          .appendTo('body');\n      }\n    });\n  };\n})(jQuery); \n\n```", "```js\n$(() => { \n  $('h1').shadow(); \n}); \n\n```", "```js\n(($) => {\n  $.fn.shadow = function(options) {\n    return this.each((i, element) => {\n      const $originalElement = $(element);\n\n      for (let i = 0; i < options.copies; i++) {\n        $originalElement\n          .clone()\n          .css({\n            position: 'absolute',\n            left: $originalElement.offset().left + i,\n            top: $originalElement.offset().top + i,\n            margin: 0,\n            zIndex: -1,\n            opacity: options.opacity\n          })\n          .appendTo('body');\n      }\n    });\n  };\n})(jQuery);\n\n```", "```js\n$(() => {\n  $('h1')\n    .shadow({ \n      copies: 3, \n      opacity: 0.25 \n    }); \n}); \n\n```", "```js\n(($) => {\n  $.fn.shadow = function(opts) {\n    const defaults = {\n      copies: 5,\n      opacity: 0.1\n    };\n    const options = $.extend({}, defaults, opts); \n\n    // ... \n  }; \n})(jQuery); \n\n```", "```js\n$(() => { \n  $('h1')\n    .shadow({ \n      copies: 3 \n    }); \n}); \n\n```", "```js\n$(() => { \n  $('h1').shadow(); \n}); \n\n```", "```js\n(($) => {\n  $.fn.shadow = function(opts) {\n    const defaults = {\n      copies: 5,\n      opacity: 0.1,\n      copyOffset: index => ({\n        x: index,\n        y: index\n      })\n    };\n    const options = $.extend({}, defaults, opts);\n\n    return this.each((i, element) => {\n      const $originalElement = $(element);\n\n      for (let i = 0; i < options.copies; i++) {\n        const offset = options.copyOffset(i);\n\n        $originalElement\n          .clone()\n          .css({\n            position: 'absolute',\n            left: $originalElement.offset().left + offset.x,\n            top: $originalElement.offset().top + offset.y,\n            margin: 0,\n            zIndex: -1,\n            opacity: options.opacity\n          })\n          .appendTo('body');\n      }\n    });\n  };\n})(jQuery);\n\n```", "```js\n$(() => { \n  $('h1').shadow({ \n    copyOffset: index => ({\n      x: -index,\n      y: -2 * index\n    }) \n  }); \n}); \n\n```", "```js\n(() => { \n  $.fn.shadow = function(opts) { \n    const options = $.extend({}, $.fn.shadow.defaults, opts); \n    // ... \n  }; \n\n  $.fn.shadow.defaults = { \n    copies: 5, \n    opacity: 0.1, \n    copyOffset: index => ({\n      x: index,\n      y: index\n    }) \n  }; \n})(jQuery); \n\n```", "```js\n$(() => { \n  $.fn.shadow.defaults.copies = 10;\n  $('h1')\n    .shadow({\n      copyOffset: index => ({\n        x: -index,\n        y: index\n    })\n  });\n}); \n\n```", "```js\n(($) => {\n  $.widget('ljq.tooltip', {\n    _create() {\n      this._tooltipDiv = $('<div/>')\n        .addClass([\n          'ljq-tooltip-text',\n          'ui-widget',\n          'ui-state-highlight',\n          'ui-corner-all'\n        ].join(' '))\n        .hide()\n        .appendTo('body');\n      this.element\n        .addClass('ljq-tooltip-trigger')\n        .on('mouseenter.ljq-tooltip', () => { this._open(); })\n        .on('mouseleave.ljq-tooltip', () => { this._close(); });\n    }\n  });\n})(jQuery); \n\n```", "```js\n(() => { \n  $.widget('ljq.tooltip', { \n    _create() { \n      // ... \n    }, \n\n    _open() {\n      const elementOffset = this.element.offset();\n      this._tooltipDiv\n        .css({\n          position: 'absolute',\n          left: elementOffset.left,\n          top: elementOffset.top + this.element.height()\n        })\n        .text(this.element.data('tooltip-text'))\n        .show();\n    },\n\n    _close() { \n      this._tooltipDiv.hide(); \n    } \n  }); \n})(jQuery); \n\n```", "```js\n(($) => {\n  $.widget('ljq.tooltip', { \n    _create() { \n      // ... \n    }, \n\n    destroy() {\n      this._tooltipDiv.remove();\n      this.element\n        .removeClass('ljq-tooltip-trigger')\n        .off('.ljq-tooltip');\n      this._superApply(arguments);\n    },\n\n    _open() { \n      // ... \n    }, \n\n    _close() { \n      // ... \n    } \n  }); \n})(jQuery); \n\n```", "```js\n_open() {\n  if (this.options.disabled) {\n    return;\n  }\n\n  const elementOffset = this.element.offset();\n  this._tooltipDiv\n    .css({\n      position: 'absolute',\n      left: elementOffset.left,\n      top: elementOffset.top + this.element.height()\n    })\n    .text(this.element.data('tooltip-text'))\n    .show();\n}\n\n```", "```js\noptions: { \n  offsetX: 10, \n  offsetY: 10, \n  content: element => $(element).data('tooltip-text') \n}, \n\n```", "```js\n_open() {\n  if (this.options.disabled) {\n    return;\n  }\n\n  const elementOffset = this.element.offset();\n  this._tooltipDiv\n    .css({\n      position: 'absolute',\n      left: elementOffset.left + this.options.offsetX,\n      top:\n        elementOffset.top +\n        this.element.height() +\n        this.options.offsetY\n    })\n    .text(this.options.content(this.element))\n    .show();\n} \n\n```", "```js\nopen() { \n  this._open(); \n},\nclose() { \n  this._close(); \n}\n\n```", "```js\n_open() {\n  if (this.options.disabled) {\n    return;\n  }\n\n  const elementOffset = this.element.offset();\n  this._tooltipDiv\n    .css({\n      position: 'absolute',\n      left: elementOffset.left + this.options.offsetX,\n      top:\n        elementOffset.top +\n        this.element.height() +\n        this.options.offsetY\n    })\n    .text(this.options.content(this.element))\n    .show();\n  this._trigger('open');\n},\n\n_close: function() { \n  this._tooltipDiv.hide(); \n  this._trigger('close'); \n} \n\n```"]