- en: Chapter 4. Working with Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists are a great way to provide menus to users on a mobile website. jQuery
    Mobile provides a wealth of list options, from simple lists to lists with custom
    thumbnails and multiple user actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Talk about how to create lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create linked and sub-menu style lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create different styles of lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you''ve (hopefully!) come to learn jQuery Mobile takes an approach of *enhancement*
    when it comes to UI. You take ordinary, simple HTML, add a bit of markup (sometimes!),
    and jQuery Mobile will do the heavy lifting of enhancing the UI. The same process
    applies to lists. We''ve all worked with simple lists in HTML before, the following
    code snippet is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And we all know how they are displayed (a bulleted list in the case of the
    previous code snippet). Let''s take that list and drop it in a simple jQuery Mobile
    optimized page. `Listing 4-1` takes a typical page and drops in our list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Given this HTML, jQuery Mobile gives us something nice right away, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lists](img/7263_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can enhance that list though with a simple change. Take the ordinary`<ul>`
    tag from `listing 4-1`, and add a `data-role="listview"` attribute, as shown in
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code you download from Github, you can find this modification in `test2.html`.
    The change, though, is rather dramatic, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lists](img/7263_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the items no longer have the bullets in front, but they are
    much larger and easier to read. Things get even more interesting when we begin
    to add links to our list. In the following code snippet I''ve added a link to
    each list item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again you can find the complete file this was taken from in the ZIP file
    you downloaded earlier. This one may be found in `test3.html`. The following screenshot
    shows how this code is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lists](img/7263_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the new arrow image. This was automatically added when jQuery Mobile
    detected a link in your list. Now you've turned a relatively simple HTML unordered
    list into a simple menu system. This, by itself, is pretty impressive, but as
    we will see throughout the remaining chapter, jQuery Mobile provides a wealth
    of rendering options to let you customize your lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wonder how complex a menu system you can create. Because HTML itself
    supports nested lists, jQuery Mobile will also render them as well. `Listing 4-2`
    demonstrates an example of a nested list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The HTML used in the nested lists, in the previous example aren''t special
    in any way. It''s standard. But jQuery Mobile will take the inner lists and actually
    hide the content. Even without links in the *upper* level LI items, they become
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lists](img/7263_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on one of the menu items loads the inner menu. If you run this in
    your own mobile device (or in your browser), notice the URL changes too, they
    create a bookmarkable view into the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lists](img/7263_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with list feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery Mobile provides multiple different styles of lists, as well as different
    features that can be applied to them. For the next part of this chapter we'll
    cover some of these options available. These aren't in any particular order and
    are presented as a gallery of options available to you. You probably will not
    (and should not!) try to use all of these within one application, but it's good
    to keep in mind the various types of list styles jQuery Mobile has available.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Inset lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the simplest, and slickest changes you can make to your lists is to turn
    them into **Inset lists**. These are lists that do not take up the full width
    of the device. Taking the initial list we modified with `data-role="content"`,
    we can simply add another attribute, `data-inset="true"`, for the following code
    block (found in `test5.html):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is now very different from the earlier example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Inset lists](img/7263_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating list dividers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another interesting UI element you may wish to add to your lists are dividers.
    These are a great way to separate a long list into something that is a bit easier
    to scan. Adding a list divider is as simple as adding a `li` tag that makes use
    of `data-role="list-divider"`. The following code snippet shows a simple example
    of this element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code block, note the two new `li` tags making use of the `list-divider`
    role. In this example, I''ve used these to separate the list of people into two
    groups. You can find the complete template in `test6.html`. The following screenshot
    shows how this is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating list dividers](img/7263_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating lists with count bubbles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yet another interesting UI trick you can perform with jQuery Mobile lists are
    *count bubbles*. This is a UI enhancement that adds a simple number to the end
    of each list item. The numbers are wrapped in a *bubble* like look which is commonly
    used for e-mail-style interfaces. In the following code snippet, the count bubble
    is used to signify the number of cookies consumed at a technical conference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code snippet, we make use of a `span` tag with a class of `ui-list-count`
    to wrap the numbers representing the amount of cookies eaten by each person. A
    simple HTML change, but consider how nicely it gets rendered, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lists with count bubbles](img/7263_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can find a complete example of this feature in `test7.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Using thumbnails and icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another common need with lists is to include images. jQuery Mobile supports
    both thumbnails (smallish images) and icons (even smaller images) that display
    well within the list control. Let''s first look at including thumbnails within
    your list. Assuming you already have nicely sized images (our examples are all
    160 pixels wide by 160 pixels high), you can simply include them within each `li`
    element as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing special is done with the image, no data attribute or class is added.
    jQuery Mobile will automatically left align the image and place the item text
    aligned to the top of each `li` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using thumbnails and icons](img/7263_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the previous demonstration in `test8.html`. So what about icons?
    To include an icon in your code, add the class `ui-li-icon` to your image. (Note
    that the beginning of the class is `ui`, not `ul.)` The following code snippet
    is an example of that with our same list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: jQuery Mobile does shrink images when used with this class, but in my experience,
    the formatting was better when the image was resized beforehand. Doing so also
    improves the speed of your web page as the smaller images should result in quicker
    download times. The images above are all 16 pixels wide and high each. And the
    result is...
  prefs: []
  type: TYPE_NORMAL
- en: '![Using thumbnails and icons](img/7263_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can find the previous example in `test9.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Split Button lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another interesting feature of jQuery Mobile lists is the Split Button list.
    This is simply a list with multiple actions. There''s a main action activated
    when the user clicks on the list item and a secondary action available via a button
    at the end of the list item. For this example, let''s start with the screenshot
    first and then show how it''s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Split Button lists](img/7263_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, each list item has a secondary icon at the end of the row.
    This is an example of a split item list and is defined by simply adding a second
    link to a list item. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the second link''s text, **Delete**, is actually replaced by the
    icon. You can specify an icon by adding the data attribute `split-icon` to your
    `ul` tag, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this example may be found in `test10.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Using a search filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our last and final list feature we will look at search filters. The lists
    we''ve worked with so far have been pretty short. Longer lists though may make
    it difficult for users to find what they are looking for. jQuery Mobile provides
    an incredibly simple way to add a search filter to your lists. By adding `data-filter="true"`
    to any list, jQuery Mobile will automatically add a search field on top that filters
    as you type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a search filter](img/7263_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you begin typing in the previous field, the list automatically filters out
    the results as you type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a search filter](img/7263_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the search is case-insensitive and matches anywhere in the list
    item. You can specify placeholder text for the search form by using `data-placeholder-text="Something"`
    in your `ul` tag. You can also specify a specific theme for the form using `data-filter-theme`.
    Finally, you can use JavaScript to add your own custom list filtering logic on
    a case by case basis.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed how to work with list views in jQuery Mobile. We saw
    how to turn a regular HTML list into a mobile optimized list and we demonstrated
    the numerous types of list features available with the framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take what we've learned already and build a real
    (albeit a bit simple) mobile-optimized website for a hotel.
  prefs: []
  type: TYPE_NORMAL
