- en: Chapter 6. WordPress and jQuery's UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re now ready to take a look at jQuery''s most popular plugin: UI. UI of
    course, stands for **User Interface**. The jQuery UI plugin takes many of the
    most popular tasks that the developers have already made simple through jQuery,
    and makes them even simpler. I know, it''s hard to imagine it getting any easier,
    but that''s exactly what this plugin does. Most importantly, while the enhanced
    effects are nice, the UI plugin provides interface widgets and an easy way to
    style or "theme" them without the need for coding up specific interface elements
    such as tabs, dialog boxes, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll:'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the UI plugin and how to get started with it quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to apply jQuery UI widgets to our WordPress site, make it more intuitive,
    easier to understand content, and encourage users to take action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to implement popular UI features and widgets with common WordPress
    features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know jQuery's UI plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can take a tour of the jQuery UI plugin by heading on over to [http://www.jqueryui.com](http://www.jqueryui.com).
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting to know jQuery''s UI plugin](img/1742_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The UI plugin offers a set of standardized widgets, interactions, and effects.
    Let's take a look at each type of offering in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The term "widget" within jQuery is a bit different from a WordPress widget,
    which is a small plugin designed to sit nicely in a sidebar of a theme. Within
    jQuery''s UI plugin, widgets describe a set of fully-featured, user interface
    controls that are commonly needed in projects and created by jQuery developers.
    The UI widgets save jQuery developers a lot of time writing jQuery statements
    and chaining functions together to create the same interface and effect. Here
    are the interface widget''s jQuery UI offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accordion:** This widget expands and collapses content that is broken into
    logical sections by clicking on the headers of each section. Only one section
    can be opened at any given time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autocomplete** (1.8+): This is a new feature available in version 1.8\. The
    **Autocomplete** widgets provide suggestions while you type into the field. The
    suggestion source is provided as a basic JavaScript array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Button** (1.8+): Also new to 1.8 is the **Button** widget. This lets you
    take different types of markup and apply the UI''s button styling and functionality
    to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datepicker:** The **Datepicker** widget can be applied a standard form input
    field. Focus on the input field opens an interactive calendar in a small overlay.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dialog:** This widget is an overlay positioned within the page. It has a
    title bar and a content area, and can be moved, resized, and closed with the ''x''
    icon by default or by additional button parameters passed to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Progressbar:** The **Progressbar** widget is designed to simply display the
    current percentage complete for a process passed to it through a value parameter.
    It scales to fit inside its parent container by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slider:** The jQuery UI **Slider** widget turns objects, such as empty `div`
    tags into sliders. There are various options such as multiple handles, and ranges
    that can then be passed to other objects and functions. You can mouse or use the
    arrow keys to change the slider''s position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tabs:** The **Tabs** widget is used to break content into multiple sections
    that can be swapped by clicking the tab header to save space, much like an accordion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jQuery UI interactions takes a collection of the more common complex jQuery
    behaviors that developers need to create, most often for projects, and packages
    them into convenient and easy-to-use functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Draggable:** This interaction makes the selected elements draggable by mouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Droppable:** This interaction works with the draggable elements and makes
    the selected ones droppable (meaning that they accept being dropped on by the
    draggable elements).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resizable:** This interaction makes the selected elements resizable by adding
    visual "handles" to the object. You can specify one or more handles as well as
    min and max width and height.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selectable:** This interaction allows elements to be selected by dragging
    a "lasso" or box with the mouse over the elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sortable:** This makes the selected elements sortable by dragging with the
    mouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main feature is the `.effect()` function, but the standard animation functions
    and shortcuts that are available in jQuery are enhanced with the jQuery UI plugin''s
    "effects core". This core also includes the ability to color, animate, and also
    include additional easing options; so, if you include it into your project, you
    won''t need the Color or Easing plugins that we''ve been working with previously.
    The jQuery effects comprise:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Effect:** This function allows you to assign an effect from a set of 15 to
    any object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show:** This enhanced show method optionally accepts jQuery UI advanced effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hide:** This enhanced hide method optionally accepts jQuery UI advanced effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle:** This enhanced toggle method optionally accepts jQuery UI advanced
    effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color animation:** The Color plugin that we learned about in [Chapter 5](ch05.html
    "Chapter 5. jQuery Animation within WordPress"), *jQuery Animation within WordPress*,
    is included into the jQuery UI effects core. Again, it simply extends the `animate`
    function to be able to animate colors as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add class:** Adds the specified class to each of the set of matched elements
    with an optional transition between the states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove class:** Removes all or a specified class from each of the set of
    matched elements with an optional transition between the states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle class:** Adds the specified class if it is not present, and removes
    the specified class if it is present, using an optional transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Switch class:** Switches from the class defined in the first argument to
    the class defined as second argument, using an optional transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery UI plugin versions bundled in WordPress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the jQuery UI plugin''s main **widget** and **interaction** cores are
    available bundled into your WordPress installation. If you''re using WordPress
    2.9.2, you''ve got jQuery 1.3.2 bundled in and the UI plugin core is 1.7.1 and
    you''ve also got the following jQuery UI widgets and interactions available: **Dialog,
    Draggable, Droppable, Resizable, Selectable, Sortable**, and **Tabs**.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're using WordPress 3.0+, you've got jQuery 1.4.2 bundled in with your
    installation with the UI core 1.7.3 bundled in. Again, this is with the same widgets
    and interactions as mentioned in the previous paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: If you'd like to take advantage of the UI plugin's *effects* or, if you're using
    jQuery 1.4.2 and want to take advantage of the UI plugin's 1.8+ features, you'll
    need to include a copy of the UI plugin version 1.8+ separately through your own
    download from the jQuery's UI site or through Google's CDN.
  prefs: []
  type: TYPE_NORMAL
- en: Picking and choosing from the jQuery's UI site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The advantage of downloading from the jQuery's UI site is you can pick and choose
    only what you need for your project. If you go to the download page at [http://www.jqueryui.com/download](http://www.jqueryui.com/download),
    you'll see on the right-hand side that you can pick version **1.7.3** or **1.8.4**
    and click on the **Download** button; this will give you everything.
  prefs: []
  type: TYPE_NORMAL
- en: '![Picking and choosing from the jQuery''s UI site](img/1742_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For development purposes, you can just download the whole thing. The ZIP file
    is over 4 MB but that includes a development bundle directory chock full of examples
    and documentation; none of that would get loaded into your project.
  prefs: []
  type: TYPE_NORMAL
- en: With all options selected, the actual UI plugin's `.js` file you'll load into
    your WordPress project is about 200 KB, and you can count on adding about another
    100 KB to the project for your CSS theme depending on what you choose from the
    site or how you rolled your own. If you know exactly what features you're using,
    you can shave off some kilobytes by only selecting what you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The download page is great because it won''t let you deselect anything that
    is dependent on another feature you''ve selected, and that you''d like to use.
    This is a screenshot of an alert for selecting something you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picking and choosing from the jQuery''s UI site](img/1742_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Make sure you download the correct UI plugin version for your version of
    jQuery!**'
  prefs: []
  type: TYPE_NORMAL
- en: If your project is using WordPress 2.9.2, the bundled version is of jQuery 1.3.2,
    so you'll want to make sure you download the UI plugin version 1.7.3\. If you're
    using the Google CDN or your own jQuery download version 1.4+, you can download
    and work with the jQuery UI plugin version 1.8+.
  prefs: []
  type: TYPE_NORMAL
- en: 'Making it look right: Easy UI theming'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No matter where you're pulling in the UI plugin from, your own download, the
    Google CDN, or the WordPress bundled UI options, you'll need to provide your own
    styles for it. You can include one of many great themes into your project or easily
    "roll" your own to best match your site's design.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the jQuery''s UI site select **Themes** from the navigation bar, or go to:
    [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making it look right: Easy UI theming](img/1742_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can tweak the resulting theme's CSS stylesheet directly or by simply loading
    the jQuery UI stylesheet up *before* your WordPress stylesheet. Using the WebDeveloper's
    **Toolbar** or **Firebug** in Firefox, it's very easy to see what styles the UI
    is producing and overwrite them in your main WordPress stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: Including the jQuery UI plugin features into your WordPress site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you should be pretty comfortable including jQuery plugins into your
    WordPress sites. Because *specific components* of the UI plugins are available
    bundled in WordPress, we'll review getting them into your project in a few different
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Including jQuery's UI from WordPress' bundle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The jQuery''s UI plugin bundled into WordPress is separated out into individual
    `.js` files. You''ll have to register the UI core file in your project first,
    as well as each widget or specific interaction that you''d like to include in
    your project. Again, the only widgets and interactions available are: **Dialog,
    Draggable, Droppable, Resizable, Selectable, Sortable**, and **Tabs**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To register the core in your WordPress theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, register a particular widget you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Just repeat the above code for additional widgets. The widget `.js` file names
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Again, the full list of bundled JavaScripts for WordPress can be found in the
    codex: [http://codex.wordpress.org/Function_Reference/wp_enqueue_script](http://codex.wordpress.org/Function_Reference/wp_enqueue_script).'
  prefs: []
  type: TYPE_NORMAL
- en: Including from the Google CDN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can include jQuery''s UI plugin very similarly to including jQuery via
    the Google CDN. The UI plugin path is: [http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.0/jquery-ui.min.js](http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.0/jquery-ui.min.js).
    Note the bold version number here. You can change it to the version of the UI
    plugin that you require. If you''re using jQuery version 1.3.2, be sure to target
    1.7.2\. If you''re using 1.4.2, you can target 1.8.0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s refresh on how to use `wp_register_script` to call up a script available
    from the bundle from Google''s CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You should note that although we're deregistering the bundled `jquery-ui-core`
    file, what we're loading in from the Google CDN is the *complete* jQuery UI plugin
    with access to all its widgets, interactions, and effects. It might be wise to
    add a comment in your code so that the other developers will know that they don't
    need to register individual widgets and interactions from the bundle into the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Loading up your own custom download from your theme or plugin directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''ve included the UI into your theme or a plugin directory you''ll load
    it up, again using `wp_enqueue_script`, using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Including a local copy of the UI plugin from a theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Again, by adding `array('jquery')` at the end of the script, this lets WordPress
    know that jQuery is required, just in case it hasn't already been registered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a local copy of the UI plugin from a WordPress plugin use the `wp_register_script`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget your styles!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No matter where you're pulling the UI plugin from, WordPress, Google's CDN,
    or your own download, you'll need to include CSS styles for the UI plugin. If
    you didn't play around with the theme roller earlier, go back now and do so. Select
    a theme or amend one of the themes with the theme roller or just roll your own
    from scratch to create widgets that look great with your site's existing design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done that, you can take your selected theme or custom rolled theme
    and place it in your theme or a plugin directory. Make sure to include the images
    directory that comes with the theme. You can then include it using a direct link
    into your `header.php` theme file or use the `wp_enque_style` function we''ve
    used before to include it into a plugin or your theme through the `functions.php`
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a UI theme directly in your WordPress theme, by linking to it directly,
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Include a UI theme into a WordPress theme from the theme's `functions.php` page
    using `wp_enqueue_style:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Including a UI theme into a WordPress plugin using `wp_enqueue_style`, is similar
    to the above example, but be sure to use `WP_PLUGIN_DIR` to target your plugin
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Enhancing effects with jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'd think that after taking the time to select a theme or roll our own, we'd
    jump into putting widgets to use. We will! But first, while animations and interactions
    are still fresh in our mind from [Chapter 5](ch05.html "Chapter 5. jQuery Animation
    within WordPress"), *jQuery Animation within WordPress* (though, don't worry if
    you're skipping around), you'll be interested to learn that it's as easy as setting
    up most of those animations and effects, things can be made quite a few times
    snazzier with the UI plugin.
  prefs: []
  type: TYPE_NORMAL
- en: First up, these effects *are not bundled* with WordPress at the time of this
    writing. So, in order to use these UI effects, you'll need to include the UI plugin
    through your own download or from the Google CDN.
  prefs: []
  type: TYPE_NORMAL
- en: Effects made easy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What the UI plugin does is add in a single new function called `.effect()` that
    offers, 15 or so, new and slick animation effects. Most notably, `blind`, which
    rolls things up like a blind; `shake`, which adds a little shake; and `explode`,
    which manages to "break" the object up and shoots pieces of it out in several
    directions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s apply the `shake` effect to headers in our posts when we mouse-over
    them. In addition to registering and/or including the necessary jQuery and jQuery
    UI plugin files in our WordPress project, you should have also included a `custom-jquery.js`
    file to your theme to work with. Once you''ve done that, include the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can (sort of) see this effect in action in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Effects made easy](img/1742_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Easing is just as easy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Beyond the `.effects` function, the UI plugin then *extends* jQuery's existing
    `.animate` function as well as shortcut functions such as `.hide, .show, .toggle,
    .addClass, .removeClass`, and `.toggleClass`. with the great Easing plugin (introduced
    by *Robert Penner*) we looked at in [Chapter 5](ch05.html "Chapter 5. jQuery Animation
    within WordPress"), *jQuery Animation with WordPress*. So, if you're using the
    jQuery UI plugin and have included the effects core into your download, there's
    no need to include the Easing plugin separately into your project.
  prefs: []
  type: TYPE_NORMAL
- en: Color animation with jQuery UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the Easing plugin included, jQuery UI also has the Color animation
    plugin already built into it. In [Chapter 5](ch05.html "Chapter 5. jQuery Animation
    within WordPress"), *jQuery Animation within WordPress*, we used the Color plugin
    that was bundled in with our WordPress installation. However, if you're going
    to use the downloaded version or Google CDN version of the UI plugin anyway, as
    with the Easing plugin, you just saved yourself the need to use it separately
    or register it from the WordPress bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it out in our project, which doesn''t have the Color plugin registered
    but is referencing our downloaded UI plugin version 1.8, let''s animate the colors
    of our header text with the `easeOutBounce` easing option applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It then animates up to a light blue color, as seen in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Color animation with jQuery UI](img/1742_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, back down to grey:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Color animation with jQuery UI](img/1742_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You've noticed that using the color animation and easing features in the jQuery
    UI plugin's effects core is no different than using it as the separate Color animation
    or Easing plugins. Again, there shouldn't be any difference other than which version,
    the standalone plugin or the UI plugin, is more convenient and useful to your
    WordPress project.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the user interface of your WordPress site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can see that the UI demos at jQueryUI.com certainly look cool, but now that
    we've got the UI plugin loaded up in to our project, how do we go about really
    putting these features to use on a WordPress project? Different types of interfaces
    can help us organize and relate to various types of information more easily and
    reduce confusion. WordPress' theme API allows for various types of information
    to be displayed within the site's design in logical chunks, mostly posts and lists.
    Let's see if we can enhance any of that information with UI features.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve seen that the UI plugin offers: accordions, tabs, dialog boxes, date
    pickers, as well as easy ways to implement drag-and-drop and sorting. Also, if
    you''re using the latest version, 1.8 or higher (as the examples in this chapter
    are), there are cool widgets such as **Autocomplete** and **Button**. Let''s pick
    up another hypothetical client and see how some minor interface enhancements can
    help their site out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Turning posts into tabs'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've probably seen tabs being used more and more in sites lately. The main
    reason for using tabs within your site, is that it allows users to easily see
    a set of related content, one chunk at a time (this is why "tab style" site navigation
    is also popular). It also allows you, as a designer, to contain the content into
    a convenient module, saving valuable screen space.
  prefs: []
  type: TYPE_NORMAL
- en: In our [Chapter 5](ch05.html "Chapter 5. jQuery Animation within WordPress"),
    *jQuery Animation with WordPress*, we learned how to stack up sticky posts so
    they rotated, slide-show style. While animating posts works well with the unrelated
    content that you want to ensure, everyone gets a glimpse at, loading content up
    into tabs means the content is somehow related, and yes, you also want to conserve
    space, perhaps getting that information above the fold so that the user is more
    likely to take it in.
  prefs: []
  type: TYPE_NORMAL
- en: Your newest hypothetical client has three pieces of information that are related
    to understanding their company. This content doesn't change much, but he would
    like the site's users to be able to get an overview of the information, along
    with the option to download a white paper up front, without scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: The client already has this content on his site. The posts are assigned to a
    unique category called **Our Structure**. The posts are rather old by now and
    don't even show up on the site's main page, so the client has been manually linking
    to the perma-links for the posts in various other pages on the site.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, we decide that it would benefit us to leverage a little help
    from the WordPress theme.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up custom loops in the WordPress theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start by going into the client's theme and setting a loop that pulls only
    from the **Our Structure** category. Then, using jQuery UI we'll display those
    posts in a set of tabs that is viewable mostly "above the fold" ensuring site
    visitors get an overview of the organization's most important information up front
    and general post items will flow below.
  prefs: []
  type: TYPE_NORMAL
- en: 'First up, in the `index.php` page, we''ll create a new loop, above the existing
    `loop.php` include that only displays the **Our Structure** category. Before we
    do this though, we''ll head over to the jQuery UI site and take a look at the
    demo of how tabs are set up: [http://jqueryui.com/demos/tabs/](http://jqueryui.com/demos/tabs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Essentially we see that demo tabs have a `ul` that lists the titles, wrapped
    in `href` calls to `id` anchors that point to the content's `div`. This means
    our theme actually will require *two* custom WordPress loops to accommodate this
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll set them up in our `index.php` template file, right above our main content
    `loop.php` include, *inside* the `#content` div in the theme we''re using, which
    is the default theme. The first loop will set up our custom `#ourStructure` div
    with the `ul` list of titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, under the previous loop, but still inside the `#ourStructure` div, we''ll
    run the loop one more time, focusing now on the post''s titles and content as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This gives us a result that looks like the next screenshot. While not super
    pretty, it's functional, and it certainly gets that important info up there and
    allows the user to link down to the `id` instance's anchor name.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up custom loops in the WordPress theme](img/1742_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll then enhance that markup with jQuery''s UI tabs like so, by targeting
    the `#ourStructure` div, in our `custom.js` file we set up the following jQuery
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Yes. Hard to believe, but thanks to the flexibility of WordPress and the work
    we got the theme to do for us, that's *all* the jQuery we need!
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up custom loops in the WordPress theme](img/1742_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Not bad! The content is now contained up top using the jQuery UI theme we chose,
    called "Smoothness" to compliment our WordPress theme best (again, we're using
    the default WordPress theme that comes with 3.0 as of the writing of this book).
    Let's look at some other uses for the UI plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing tabs entirely with jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We achieved the above tab scenario by tweaking the WordPress theme to include
    a `ul` list of titles in HTML and then the post content within div tags below.
    This worked well as it generated a `ul` list with `href` links to anchor names
    that would still present the content and work functionally in a non-JavaScript
    enabled browser.
  prefs: []
  type: TYPE_NORMAL
- en: However, for other situations where WordPress is already presenting the content
    you need (for example, a list of `h2` or `h3` headings and content already tucked
    inside a *single* post or page), or you just don't have access to edit the theme,
    it might be easier to generate the DOM objects needed for the UI `.tab` feature
    by applying a little jQuery beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: For a list of `h3` headers and `p` paragraph tags added to a single page or
    WordPress post, we can still wrap that content in the UI tab widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screenshot depicts the **About** page, which already has all the content
    inside it; we just need to "massage" it to best meet the jQuery UI tab requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing tabs entirely with jQuery](img/1742_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we'll target the specific page. WordPress can output unique IDs to pages
    as well as a host of class names; you'll have to **View Source** on the HTML output
    of your WordPress theme to the browser and see if the theme leverages this feature
    (most good WordPress themes will). This ability can help us target only the content
    we want to affect. For example, if all we want to enhance is our **About** page,
    we can view source and see that the post's unique ID is `#post-104`. This allows
    us to target the post we want to add tabs to, by first prepending a `ul` list
    of `h3` titles.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the `ul` list, we'll need to wrap everything in a new, selectable
    div with an ID of `#aboutUs`. Then, we'll cycle through each `h3` item to create
    individual `li` list items with anchor links and wrap each following `h3` and
    `p` tag with an anchor-named `id` div of their own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the bold comments in the code to follow along:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Refreshing the page now displays this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing tabs entirely with jQuery](img/1742_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, the more you understand about your WordPress theme and jQuery, the more
    power you have to decide which route is quicker or better in terms of deciding
    whether to manipulate the theme to aid your jQuery enhancement, or if it's better
    to just use pure jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Accordion-izing the sidebar'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Accordions pretty much have the same functionality as tabs. Mostly they're just
    vertical rather than horizontal. As with tabs, you'll want to use them to "group"
    similar information together into a tidier space, allowing the site user to take
    in the information in logical chunks and not have to wander down through the site
    or scroll.
  prefs: []
  type: TYPE_NORMAL
- en: In the default theme that we've been working with, our page navigation on the
    sidebar has some information that we'd like people to be able to see at a glance
    and not have the headings pushed down past the fold where they may miss them.
    By grouping sections into accordions that drop down and display additional information
    and links, we save some room and ensure when a page loads that users can at least,
    see the important organizational headers and know that there is more information
    they may want to expand and view.
  prefs: []
  type: TYPE_NORMAL
- en: The accordion widget works great with lists, which is what the sidebar is. The
    widget also, as you can tell by the example code at [http://jQueryUI.com/demos/accordion](http://jQueryUI.com/demos/accordion),
    recognizes and works with headers and paragraph or `div` tags set in a consistent,
    hierarchical order. You can also use various options to set specific DOM objects
    as headers and navigation elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our default theme''s WordPress sidebar is one big `ul` list inside a `div`.
    Perfect for the accordion widget, but since we set up some custom CSS to make
    the page list display more like navigation buttons, we want to target the next
    two lists in the list *below* the page navigation list items. Not to worry, it''s
    easy to target and select the following list items and apply the accordion widget
    to them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The widget''s default state is to display the top accordion open. The client
    would like it to be completely closed. To achieve this, we''ll add some parameters
    to the widget, including `active: -1`, which is normally used to select which
    bar to open, but by setting it to `-1`, they''ll all be closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Our sidebar under our page navigation is now accordion-ized in a nice style
    that matches our page's tabs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Accordion-izing the sidebar](img/1742_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These accordion headers are closed when the page loads, making it easy for the
    site user to chose which one to explore.
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Accordion-izing the sidebar](img/1742_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's now move on to making our client's last enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Adding a dialog box to a download button with icons'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dialog boxes are great ways to alert and direct people's attention to really
    important information, making sure they understand the next steps that they need
    to take, as well as confirming an action.
  prefs: []
  type: TYPE_NORMAL
- en: Our client is very happy with the tabbed information on the home page and the
    condensed accordion side bar. They just need one more enhancement. The first tab
    on the home page offers a PDF download of a white paper that contains information
    about their methodology, products, and their various uses. As you can see by the
    next screenshot, the client wants users to understand they're downloading copyrighted
    information and that the document can not be freely distributed.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, they''ve placed some disclaimer
    language right before the download link to the PDF file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Adding a dialog box to a download button with icons](img/1742_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In general, that's all their legal department claims they need, but they'd like
    it to be a little more clear. We can enhance this download process further by
    making the download link more prominent using the button widget, and turning the
    previous **Disclaimer** text into a dialog box. The user will then have to select
    **I Agree** on the dialog box to get the PDF download to continue and the client
    can rest assured that the majority of the people downloading their white paper
    through a JavaScript-enabled browser are definitely aware of the disclaimer.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s set up that **Disclaimer** text to go inside our dialog box.
    We''ll target the paragraph and apply the dialog widget as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you reload your page, you''ll see that the **Disclaimer** text now appears
    in a dialog box as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Adding a dialog box to a download button with icons](img/1742_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The dialog box''s default is to align the text "center". This is great for
    one line of text, but our paragraph looked a little strange so we''ve added a
    style to our `.wrapAll` HTML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we really don''t want the dialog box to appear immediately, so we''ll
    set its option of `autoOpen` to `false`. We also want confirmation buttons to
    appear, as well as a title in the dailog''s top bar. The dialog widget can also
    accommodate buttons, so we''ll add them in, along with their functionality as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The above works great—or at least we think it does. Now that the dialog's `autoOpen`
    option is set to `false`, we can't tell! We'll need the **Download PDF** link
    to kick-off the dialog box and while we're at it, we'll need to make sure that
    the link's `href` doesn't kick-off the PDF download.
  prefs: []
  type: TYPE_NORMAL
- en: If you've been paying attention, you're probably ready to use the `.removeAttr()`
    function to remove the `href` attribute from the link and render it powerless.
    That's a good idea; however, in the previous code snippet, we reference the `href`
    attribute of the link. That reference doesn't kick-off until after the box has
    appeared, which would be *after* we removed it from the object, which means our
    `window.location.href` JavaScript won't have a clue where to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our best bet is to use another great function called `preventDefault()`, which
    will leave all the attributes of the link intact, but prevent it from acting like
    a clicked link. Let''s add in this new link functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Last, before we refresh our page and take a peek, let's go ahead and make the
    PDF download link look a little more "clickable". Because we're using jQuery version
    1.4.2 from the Google CDN, and the 1.8 version of the jQuery UI plugin, we can
    do this by selecting the link and adding button widget to it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're not using version 1.8 of the UI plugin, this step is optional. You
    can simply use CSS styles or the `.css()` function to style the link to your liking.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll simply **chain** the `.button()` widget function on to our existing
    link selection, *after* the `.click()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can refresh your page and check out the new button, as shown in the next
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Adding a dialog box to a download button with icons](img/1742_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As great as the button-ized link looks, it doesn't take much to go one step
    further and add a few icons so it's clear what clicking on the button will get
    people, and encourage them to take action.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery UI plugin themes come with a host of **framework icons**. If you
    included the `image` directory relative to your jQuery UI stylesheet, you have
    access to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The button widget allows for icons to be placed in a "primary" and "secondary"
    position. The primary position is to the left of the button, and the secondary
    is to the right, after any button text. Let''s add the "circle-arrow-s" icon and
    the "document" icon to our button as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s our "iconic" button and dialog box once people hit the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Adding a dialog box to a download button with icons](img/1742_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Want to find out what icons are available for widgets? Check out the theme
    roller: [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/).
    At the bottom of the page you''ll see all the framework icons. Rolling over them
    will display their `title` tag info which contains the name you want to place
    in your jQuery statements to reference them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Adding a dialog box to a download button with icons](img/1742_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last thing to test with this enhancement, is that clicking on **I Agree**
    kicks-off the download, which as you can see by the following screenshot, works!
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Adding a dialog box to a download button with icons](img/1742_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is actually an impressive amount of interactivity to add to a site, and
    yet at the same time, it degrades and works just fine the way it was without JavaScript.
    It's a really great use of jQuery and the jQuery UI plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's our look at the jQuery UI plugin and just a few of the ways it can really
    benefit a WordPress site. There are dozens, possibly hundreds of them and more,
    it just depends on your site or project and its needs.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, jQuery runs on the client-side, in the browser, and WordPress serves
    up the finished HTML pages to the browser. This means that you have the power
    to not only enhance WordPress content, but also most WordPress plugins, such as
    cforms II, and most sidebar widgets should be easy to enhance with jQuery and
    the jQuery UI plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we had a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: The UI plugin and various ways to include it and get started with it in WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how applying UI elements to our WordPress site makes it more intuitive,
    easier to understand, and encourages users to take action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common ways to implement popular UI features with common WordPress features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now move on to the next chapter and see about using jQuery to help us
    create AJAX interactions.
  prefs: []
  type: TYPE_NORMAL
