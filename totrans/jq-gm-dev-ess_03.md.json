["```js\ngf = {\n    baseRate: 30\n};\n\ngf.initialize = function(options) {\n    $.extend(gf, options);\n} \n```", "```js\ngf.startGame = function(progressCallback) {\n    /* ... */\n    var preloadingPoller = setInterval(function() {\n        /* ... */\n        if (counter == total) {\n            //we are done!\n            clearInterval(preloadingPoller);\n            endCallback();\n            setInterval(gf.refreshGame, gf.baseRate);\n        } else {\n            /* ... */\n        }\n    }, 100);\n};\n```", "```js\ngf.refreshGame = function (){\n    // update animations\n    var finishedAnimations = [];\n\n    for (var i=0; i < gf.animations.length; i++) {\n\n        var animate = gf.animations[i];\n\n        animate.counter++;\n        if (animate.counter == animate.animation.rate) {\n            animate.counter = 0;\n            animate.animation.currentFrame++;\n            if(!animate.loop && animate.animation.currentFrame > animate.animation.numberOfFrame){\n                finishedAnimations.push(i);\n            } else {\n                animate.animation.currentFrame %= animate.animation.numberOfFrame;\n                gf.setFrame(animate.div, animate.animation);\n            }\n        }\n    }\n    for(var i=0; i < finishedAnimations.length; i++){\n        gf.animations.splice(finishedAnimations[i], 1);\n    }\n\n    // execute the callbacks\n    for (var i=0; i < gf.callbacks.length; i++) {\n        var call  = gf.callbacks[i];\n\n        call.counter++;\n        if (call.counter == call.rate) {\n            call.counter = 0;\n            call.callback();\n        }\n    }\n} \n```", "```js\n/**\n * Sets the animation for the given sprite.\n **/\ngf.setAnimation = function(divId, animation, loop){\n    var animate = {\n animation: animation,        \n div: divId,\n\n        loop: loop,\n        counter: 0\n    }\n\n    if(animation.url){\n        $(\"#\"+divId).css(\"backgroundImage\",\"url('\"+animation.url+\"')\");\n    }\n\n    // search if this div already has an animation\n    var divFound = false;\n    for (var i = 0; i < gf.animations.length; i++) {\n        if(gf.animations[i].div == divId){\n            divFound = true;\n            gf.animations[i] = animate\n        }\n    }\n\n    // otherwise we add it to the array\n    if(!divFound) {\n        gf.animations.push(animate);\n    }\n} \n```", "```js\ngf.callbacks = [];\n\ngf.addCallback = function(callback, rate){\n    gf.callbacks.push({\n        callback: callback,\n        rate: Math.round(rate / gf.baseRate),\n        counter: 0\n    });\n}\n```", "```js\ngf.animation = function(options) {\n    var defaultValues = {\n        url : false,\n        width : 64,\n        numberOfFrames : 1,\n        currentFrame : 0,\n        rate : 1\n    }\n    $.extend(this, defaultValues, options);\n    if(options.rate){\n        // normalize the animation rate\n        this.rate = Math.round(this.rate / gf.baseRate);\n    }\n    if(this.url){\n        gf.addImage(this.url);\n    }\n}\n```", "```js\ngf.keyboard = [];\n// keyboard state handler\n $(document).keydown(function(event){\n    gf.keyboard[event.keyCode] = true;\n});\n$(document).keyup(function(event){\n    gf.keyboard[event.keyCode] = false;\n});\n```", "```js\nif(gf.keyboard[37]){ //left\n    newPos -= 5;\n}\nif(gf.keyboard[39]){ //right\n    newPos += 5;\n}\n```", "```js\nvar fragment = $(\"<div>fragment</div>\");\n```", "```js\n$(\"#myDiv\").append(fragment);\n```", "```js\n$(\"#myDiv\").append(fragment.clone());\n```", "```js\ngf.spriteFragment = $(\"<div style='position: absolute'></div>\");\ngf.addSprite = function(parentId, divId, options){\n    var options = $.extend({}, {\n        x: 0,\n        y: 0,\n        width: 64,\n        height: 64\n    }, options);\n    $(\"#\"+parentId).append(gf.spriteFragment.clone().css({\n            left:   options.x,\n            top:    options.y,\n            width:  options.width,\n            height: options.height}).attr(\"id\",divId));\n}; \n```", "```js\ngf.addSprite = function(parentId, divId, options){\n    /* ... */\n    $(\"#\"+parentId).append(gf.spriteFragment.clone().css({\n            left:   options.x,\n            top:    options.y,\n            width:  options.width,\n            height: options.height}).attr(\"id\",divId).data(\"gf\",options));\n}\n```", "```js\ngf.x = function(divId,position) {\n    if(position) {\n        $(\"#\"+divId).css(\"left\", position); \n $(\"#\"+divId).data(\"gf\").x = position;\n    } else {\n return $(\"#\"+divId).data(\"gf\").x; \n    }\n}\ngf.y = function(divId,position) {\n    if(position) {\n        $(\"#\"+divId).css(\"top\", position); \n $(\"#\"+divId).data(\"gf\").y = position;\n    } else {\n return $(\"#\"+divId).data(\"gf\").y; \n    }\n}\n```", "```js\ngf.x = function(divId,position) {\n    if(position) {\n        var data = $(\"#\"+divId).data(\"gf\");\n        var y = data.y;\n        data.x = position;\n        $(\"#\"+divId).css(\"transform\", \"translate(\"+position+\"px, \"+y+\"px)\");\n    } else {\n        return $(\"#\"+divId).data(\"gf\").x; \n    }\n}\ngf.y = function(divId,position) {\n    if(position) {\n        var data = $(\"#\"+divId).data(\"gf\");\n        var x = data.x;\n        data.y = position;\n        $(\"#\"+divId).css(\"transform\", \"translate(\"+x+\"px, \"+position+\"px)\"); \n    } else {\n        return $(\"#\"+divId).data(\"gf\").y; \n    }\n}\n```"]