["```js\n<div id=\"applicationHost\">\n  <!-- application runs inside applicationHost container -->\n</div>\n```", "```js\n<div class=\"splash\">\n  <!-- this will be shown while application is starting -->\n  <div class=\"message\">\n    Durandal Starter Kit\n  </div>\n  <i class=\"fa fa-spinner fa-spin\"></i>\n</div>\n```", "```js\n<script src=\"img/require.js\" data-main=\"app/main\"></script>\n```", "```js\nrequirejs.config\n({\n  paths: {\n    'text': '../lib/require/text',\n    'durandal':'../lib/durandal/js',\n    'plugins' : '../lib/durandal/js/plugins',\n    'transitions' : '../lib/durandal/js/transitions',\n    'knockout': '../lib/knockout/knockout-3.1.0',\n    'bootstrap': '../lib/bootstrap/js/bootstrap',\n    'jquery': '../lib/jquery/jquery-1.9.1'\n  },\n  shim: {\n    'bootstrap': {\n      deps: ['jquery'],\n      exports: 'jQuery'\n    }\n  }\n});\n```", "```js\ndefine([\n  'durandal/system', \n  'durandal/app', \n  'durandal/viewLocator'], function (system, app, viewLocator) {\n    //main module code goes here\n});\n```", "```js\n    system.debug(true);\n    ```", "```js\n    app.title = 'Durandal Starter Kit';\n    ```", "```js\n    app.configurePlugins({\n      router: true,\n      dialog: true\n    });\n    ```", "```js\n    app.start().then(function() {\n      //This code is executed when application is ready.\n\n      //We can choose use framework conventions\n      viewLocator.useConvention();\n      app.setRoot('viewmodels/shell', 'entrance');\n    });\n    ```", "```js\n    define(['plugins/router', 'durandal/app'], function (router, app) {\n      return {\n        //We complete this in next points\n      };\n    });\n    ```", "```js\n    return {\n      router: router\n    };\n    ```", "```js\n    return {\n      router: router,\n      search: function() {\n        //easy way to show a message box in Durandal\n        app.showMessage('Search not yet implemented...');\n      },\n    };\n    ```", "```js\n    define(['plugins/router', 'durandal/app'], function (router, app) {\n      return {\n        router: router,\n        search: function() { ... },\n        activate: function () {\n          router.map([{ \n            route: '', \n            title:'Welcome', \n            moduleId: 'viewmodels/welcome', \n            nav: true \n          }, {\n            route: 'flickr', \n            moduleId: 'viewmodels/flickr', \n            nav: true \n          }]).buildNavigationModel();   \n          return router.activate();\n          }\n        };\n    });\n    ```", "```js\n<div>\n  <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n    <!-- nav content we will explain then -->\n  </nav>\n  <div class=\"page-host\" data-bind=\"router: { transition:'entrance' }\"></div>\n</div>\n```", "```js\n    system.defer = function (action) {\n      var deferred = Q.defer();\n      action.call(deferred, deferred);\n      var promise = deferred.promise;\n      deferred.promise = function() {\n        return promise;\n      };\n      return deferred;\n    };\n    ```", "```js\nhttp.get = function(url, query) {\n  return Q.when($.ajax(url, { data: query }));\n}\n```", "```js\n//moduleA\ndefine([],function(){\n  var moduleA = {};\n\n  //ModuleA code\n\n  return moduleA;\n});\n//moduleB (in a different file)\ndefine(['moduleA'],function(moduleA){\n  //we can use ModuleA to extend moduleB, e.g:\n\n  var moduleB = $.extend({}, moduleA);\n\n  //Create moduleB unique functionality.\n  return moduleB;\n});\n```", "```js\n    <div>\n      <div data-bind=\"compose: 'navigation.html'\"></div>\n      <div class=\"page-host\" data-bind=\"router: { transition:'entrance' }\"></div>\n    </div>\n    ```", "```js\n<div>\n  <div data-bind=\"compose: 'viewmodel/navigation'\"></div>\n  <div class=\"page-host\" data-bind=\"router: { transition:'entrance' }\"></div>\n</div>\n```", "```js\n<div>\n  <div data-bind=\"compose: navigationObservable\"></div>\n  <div class=\"page-host\" data-bind=\"router: { transition:'entrance' }\"></div>\n</div>\n```", "```js\ndata-bind=\"compose: { model:someModelProperty, view:someViewProperty }\"\n```", "```js\n<!-- ko compose: activeItem--><!--/ko-->\n```", "```js\n    div data-bind=\"compose: { model: model, onError: errorHandlerFunction }\"></div>\n    ```", "```js\n    app.configurePlugins({\n      router: true,\n    });\n    ```", "```js\n    router.map([{...},{...}]).buildNavigationModel();\n    return router.activate();\n    ```", "```js\nrouter.map([\n  {route:[''/*default route*/,'catalog'], title:'catalog', moduleId:'viewmodels/catalog', nav: true},\n  {route:'cart', title:'cart', moduleId:'viewmodels/cart', nav: true},\n  {route:'product/:id', title:'Product detail', moduleId:'viewmodels/product-detail', nav:false},\n  {route:'product/:id*action', moduleId:'viewmodels/product', nav:false, hash:'#product/:id'},\n]).buildNavigationModel();\nreturn router.activate();\n```", "```js\n    route.map([{route:''}]);\n    ```", "```js\n    route.map([{route:'catalog'}]);\n    ```", "```js\n        route.map([{route: 'product/:id'}]);\n        ```", "```js\n        route.map([{route: 'product(/:id)'}]);\n        ```", "```js\n    route.map({route:'product/:id*actions'});\n    ```", "```js\n    route.mapUnknowRoutes(notfound,'not-found');\n    ```", "```js\n<ul class=\"nav navbar-nav\" data-bind=\"foreach: router.navigationModel\">\n  <li data-bind=\"css: { active: isActive }\">\n    <a data-bind=\"attr: { href: hash }, text: title\"></a>\n    </li>\n</ul>\n<ul class=\"nav navbar-nav navbar-right\">\n  <li class=\"loader\" data-bind=\"css: { active: router.isNavigating }\">\n    <i class=\"fa fa-spinner fa-spin fa-2x\"></i>\n  </li>\n</ul>\n```", "```js\n    <a data-bind=\"attrs:{href:'#/product/1'}\">product 1</a>\n    ```", "```js\n    router.navigate('#/product/1');\n    ```", "```js\n    router.navigate('#/product/1',false);\n    ```", "```js\n    router.navigate('#/product/1',{ replace: true, trigger: false });\n    ```", "```js\n// product.js viewmodel\ndefine(['plugins/router', 'knockout'], function(router, ko) {\n  var childRouter = router.createChildRouter()\n    .makeRelative({\n      moduleId:'product',\n      fromParent:true,\n      dynamicHash: ':id'\n    }).map([\n      { route: 'create', moduleId: 'create', title: 'Create new product', type: 'intro', nav: true },\n      { route: 'update', moduleId: 'update', title: 'Update product', type: 'intro', nav: true},\n    ]).buildNavigationModel();\n  return {\n    //the property on the view model should be called router\n    router: childRouter \n  };\n});\n```", "```js\n    app.on('product:new').then(function(product){\n      ...\n    });\n    ```", "```js\n    var subscription = app.on('product:new').then(function(product){\n      ...\n    });\n    subscription.off();\n    ```", "```js\n    app.trigger('product:new', newProduct);\n    ```", "```js\napp.on('all').then(function(payload){\n  //It will listen all events\n});\n```", "```js\n    define([\n      'durandal/system', \n      'durandal/app', \n      'durandal/viewLocator',\n      'bootstrap'\n    ],  function (system, app, viewLocator, bs) {\n      //Code of main.js module\n    });\n    ```", "```js\n    app.configurePlugins({\n      widget: true\n    });\n    ```", "```js\n    <div class=\"panel-group\" data-bind=\"foreach: { \n      data: settings.items }\">\n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" data-bind=\"\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-bind=\"attr:{'data-target':'#'+id}\">\n              <span data-part=\"header\" data-bind=\"html: $parent.getHeaderText($data)\">\n              </span>\n            </a>\n          </h4>\n        </div>\n        <div data-bind=\"attr:{id:id}\" class=\"panel-collapse collapse\">\n          <div class=\"panel-body\">\n            <div data-part=\"item\" data-bind=\"compose: $data\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    ```", "```js\ndefine(['durandal/composition','jquery'], function(composition, $) {\n  var ctor = function() { };\n\n  //generates a simple unique id\t\n  var counter = 0;\n\n  ctor.prototype.activate = function(settings) {\n    this.settings = settings;\n    this.settings.items.forEach(function(item){\n      item.id=counter++;\n    });\n  };\n  ctor.prototype.getHeaderText = function(item) {\n    if (this.settings.headerProperty) {\n      return item[this.settings.headerProperty];\n    }\n\n    return item.toString();\n  };\n\n  return ctor;\n});\n```", "```js\napp.configurePlugins({\n  widget: {\n    kinds: ['accordion']\n  }\n});\n```", "```js\n    router.map([\n    { route: '', title:'Welcome', moduleId: 'viewmodels/welcome', nav: true },\n    { route: 'flickr', moduleId: 'viewmodels/flickr', nav: true },\n    { route: 'accordion', moduleId: 'viewmodels/accordion', nav: true }\n    ]).buildNavigationModel();\n    ```", "```js\n    <div>\n      <h2 data-bind=\"text:title\"></h2>\n      <div data-bind=\"accordion: {items:projects, headerProperty:'name'}\">\n        <div data-part=\"header\">\n          <span data-bind=\"text:name\"></span>\n        </div>\n        <div data-part=\"item\">\n          <span data-bind=\"text:description\"></span>\n        </div>\n      </div>\n      <div class=\"btn btn-primary\" data-bind=\"click:add\">\n        Add new project\n      </div>\n    </div>\n    ```", "```js\n    define(['plugins/http', 'durandal/app', 'knockout'], function (http, app, ko) {\n      return {\n        title: 'Accordion',\n        projects: ko.observableArray([]),\n        activate: function () {\n          this.projects.push(\n          {name:'Project 1',description:\"Description 1\"});\n          this.projects.push(\n          {name:'Project 2',description:\"Description 2\"});\n          this.projects.push(\n          {name:'Project 3',description:\"Description 3\"});\n        },\n        add: function () {\n          app.trigger('accordion:add',\n          {name:'New Project',description:\"New Description\"});\n        }\n      };\n    });\n    ```", "```js\n    ctor.prototype.activate = function(settings) {\n      this.settings = settings;\n\n      var _settings = this.settings;//save a reference to settings\n      var items = this.settings.items();//get data from observable\n\n      items.forEach(function(item){//manipulate data\n        item.id=guid();\n      });\n\n      this.settings.items(items);//update observable with new data\n\n      //listen to add event and save a reference to the listener\n      this.addEvent = app.on('accordion:add').then(function(data){\n        data.id = guid();\n        _settings.items.push(data);\n      });\n    };\n    ```", "```js\n    ctor.prototype.detached = function () {\n      //remove the suscription \n      this.addEvent.off();\n    }\n    ```"]