["```js\n;(function ($) {\n\n    var name = 'pluginName';\n    Plugin.prototype = {\n        defaults: {\n\n        }\n    };\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        var $scope = this;\n        $scope.$element = $(element);\n        $scope.element = element;\n        $scope.options = $.extend({}, this.defaults, options);\n        $scope.init = function () {\n\n        }\n    }\n\n    $.fn[name] = function (options) {\n        return this.each(function () {\n            new Plugin(this, options).init();\n        });\n    }\n})(jQuery);\n```", "```js\n$.fn[name] = function (options) {\n   return this.each(function () {\n      new Plugin(this, options).init();\n   });\n}\n```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chapter 8 :: Recipe 2</title>\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/jquery.tooltip.js\"></script>\n        <script src=\"img/recipe-2.js\"></script>\n    </head>\n    <body>\n    <p><input type=\"text\" class=\"hasTooltip\" data-title=\"This is a tooltip on an input box\" /></p>\n    <p><a href=\"http://www.google.com/\" target=\"_blank\" class=\"hasTooltip\" title=\"External link to http://www.google.com/\">Google.com</a></p>\n    <button class=\"hasTooltip\" data-title=\"A button with a tooltip\">Button</button>\n    </body>\n    </html>\n    ```", "```js\n    var name = 'tooltip';\n    Plugin.prototype = {\n    defaults: {\n                'height': 30,\n                'fadeInDelay': 200\n    }\n    };\n    ```", "```js\n    $scope.init = function() {\n    $scope._text = (typeof $scope.$element.data('title') != \"undefined\") ? $scope.$element.data('title') : $scope.$element.prop(\"title\");\n                //Only display the tooltip if a title has been specified\n                if (typeof $scope._text != \"undefined\") {\n                    var $html = $(\"<div class='tooltip-frame'>\"\n                        +   \"<div class='tooltip-arrow'></div>\"\n                        +   \"<div class='tooltip-text'>\" + $scope._text + \"</div>\"\n                        + \"</div>\");\n\n                    $html.css({\n                        'position': 'absolute',\n                        'text-align': 'center',\n                        'height': $scope.options.height,\n                        'line-height': $scope.options.height + \"px\",\n                        'left': $scope.$element.offset().left + $scope.$element.outerWidth() + 15,\n                        'top': $scope.$element.offset().top + ($scope.$element.outerHeight() / 2) - ($scope.options.height / 2),\n                        'background-color': 'rgba(0, 0, 0, 0.81)',\n                        'color': '#FFF',\n                        'padding': '0 10px 0 10px',\n                        'border-radius': '5px',\n                        'opact': 'none'\n                    }).find('.tooltip-arrow').css({\n                            'width': 0,\n                            'height': 0,\n                            'border-top': '10px solid transparent',\n                            'border-bottom': '10px solid transparent',\n                            'border-right': '10px solid rgba(0, 0, 0, 0.81)',\n                            'position': 'absolute',\n                            'left': '-10px',\n                            'top': (($scope.options.height / 2) - 10)\n                        });\n\n                    $scope.$element.on(\"mouseover\", function(){\n                        $html.fadeIn($scope.options.fadeInDelay);\n                        $scope.$element.after($html);\n                    }).on(\"mouseout\", function(){\n                        $html.remove();\n                    });\n                }\n            }\n    ```", "```js\n    $(function(){\n        $('.hasTooltip').tooltip();\n    });\n    ```", "```js\nvar $html = $(\"<div class='tooltip-frame'>\"\n       +   \"<div class='tooltip-arrow'></div>\"\n       +   \"<div class='tooltip-text'>\" + $scope._text + \"</div>\"\n       + \"</div>\");\n```", "```js\n$(function(){\n    $('.hasTooltip').tooltip();\n});\n```", "```js\n$(function(){\n    $('.hasTooltip').tooltip({\n       'height': 50,\n          'fadeInDelay': 500              \n    });\n});\n```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chapter 8 :: Recipe 3</title>\n        <link href=\"slider.css\" rel=\"stylesheet\" type=\"text/css\" />\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/jquery.slider.js\"></script>\n        <script src=\"img/recipe-3.js\"></script>\n    </head>\n    <body>\n    <div class=\"mySlider\">\n        <div>Slider Content 1</div>\n        <img src=\"img/british-countryside.jpg\" />\n        <div>Slider Content 3</div>\n        <div>Slider Content 4</div>\n    </div>\n    </body>\n    </html>\n    ```", "```js\n    var name = 'slider';\n    Plugin.prototype = {\n       defaults: {\n          width: 600,\n          height: 250\n    }\n    };\n    ```", "```js\n    $scope.init = function () {\n    $scope.$element.addClass(\"slider-frame\").css({\n       width: $scope.options.width,\n       height: $scope.options.height\n    });\n    $scope.$element.append('<ul class=\"slider-nav\"></ul>');\n    var _sliderItems = $scope.$element.find('div, img');\n    _sliderItems.wrapAll(\"<div class='slider-content'></div>\");\n    $scope.$element.find('.slider-content').css({\n       width: $scope.options.width * _sliderItems.length,\n       position: 'relative'\n    });\n    _sliderItems.css({\n       float: 'left',\n       width: $scope.options.width,\n       height: $scope.options.height\n    });\n    var _sliderNav = $scope.$element.find('.slider-nav');\n    for (var i = 0; i < _sliderItems.length; i++) {\n       _sliderNav.append(\"<li><a href='#\" + i + \"' \" + ((i == 0) ? \"class='active'\" : \"\") + \">\" + (i + 1) + \"</a></li>\");\n    }\n    _sliderNav.on(\"click\", \"li a\", function(){\n       var index = this.hash.replace(\"#\", \"\");\n       _sliderNav.find('li a').removeClass(\"active\");\n       $(this).addClass(\"active\");\n       $scope.$element.find('.slider-content').animate({\n          left: -(index * $scope.options.width) + \"px\"\n       });\n    });\n    }\n    ```", "```js\n    $(function(){\n        $('.mySlider').slider();\n    });\n    ```", "```js\n    .slider-frame {\n        overflow: hidden;\n        position: relative;\n        margin: auto;\n        border: solid 1px #CCC;\n    }\n    .slider-nav {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: 35px;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        text-align: center;\n    }\n    .slider-nav li {\n        display: inline-block;\n        margin-right: 5px;\n    }\n    .slider-nav li a {\n        display: block;\n        color: #FFF;\n        text-decoration: none;\n        border-radius: 30px;\n        background-color: #333;\n        width: 25px;\n        height: 25px;\n        text-align: center;\n        line-height: 25px;\n    }\n    .slider-nav li a:hover {\n        background-color: #000;\n    }\n    .slider-nav li a.active {\n        background-color: #FFF;\n        color: #333;\n    }\n    ```", "```js\n$scope.$element.addClass(\"slider-frame\").css({\nwidth: this.options.width,\nheight: this.options.height\n});\n```", "```js\nvar _sliderItems = $scope.$element.find('div, img');\n_sliderItems.wrapAll(\"<div class='slider-content'></div>\");\n$scope.$element.find('.slider-content').css({\nwidth: $scope.options.width * _sliderItems.length,\nposition: 'relative'\n});\n```", "```js\n_sliderItems.css({\n   float: 'left',\n   width: $scope.options.width,\n   height: $scope.options.height\n});\n```", "```js\nvar _sliderNav = $scope.$element.find('.slider-nav');\nfor (var i = 0; i < _sliderItems.length; i++) {\n   _sliderNav.append(\"<li><a href='#\" + i + \"' \" + ((i == 0) ? \"class='active'\" : \"\") + \">\" + (i + 1) + \"</a></li>\");\n }\n```", "```js\n_sliderNav.on(\"click\", \"li a\", function(){\n   var index = this.hash.replace(\"#\", \"\");\n   _sliderNav.find('li a').removeClass(\"active\");\n   $(this).addClass(\"active\");\n   $scope.$element.find('.slider-content').animate({\n      left: -(index * $scope.options.width) + \"px\"\n});\n});\n```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chapter 8 :: Recipe 4</title>\n        <link href=\"rssreader.css\" rel=\"stylesheet\" type=\"text/css\" />\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/jsapi\"></script>\n        <script type=\"text/javascript\">\n            google.load(\"feeds\", \"1\");\n        </script>\n        <script src=\"img/jquery.rssreader.js\"></script>\n        <script src=\"img/recipe-4.js\"></script>\n    </head>\n    <body>\n    <div class=\"myRSSContent\"></div>\n    </body>\n    </html>\n    ```", "```js\n    @import url(http://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400);\n    .rssreader-frame {\n        background-color: #333;\n        border-radius: 5px;\n        border: solid 1px #1f1f1f;\n        padding: 0 10px 10px 10px;\n        font-family: 'Source Sans Pro', sans-serif !important;\n    }\n    .rssreader-frame h1 {\n        margin: 5px 0 5px 0;\n        padding: 0;\n        font-size: 22px;\n        color: #FFF;\n        line-height: 30px;\n        font-weight: 200;\n    }\n    .rssreader-frame ul {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n    .rssreader-frame ul h4 {\n        margin: 0;\n        position: relative;\n        font-weight: 200;\n        color: #E1E1E1;\n    }\n    .rssreader-frame p.description {\n        margin: 0 -10px 10px -10px;\n        padding: 0 10px 10px 10px;\n        color: #CCC;\n        font-size: 12px;\n        border-bottom: solid 1px #494949;\n    }\n    .rssreader-frame ul h4 a {\n        line-height: 25px;\n        margin-right: 110px;\n        display: block;\n        text-decoration: none;\n        color: #8bd;\n    }\n    .rssreader-frame ul h4 .entry-date {\n        width: 100px;\n        position: absolute;\n        right: 0;\n        top: 0;\n        height: 25px;\n        line-height: 25px;\n        text-align: right;\n    }\n    .rssreader-frame ul li p {\n        color: #666;\n        margin: 0 0 10px 0;\n        padding: 0 0 10px 0;\n        border-bottom: dotted 1px #494949;\n    }\n    ```", "```js\n    var name = 'rssreader';\n    Plugin.prototype = {\n    defaults: {\n        url: 'http://feeds.bbci.co.uk/news/technology/rss.xml',\n        amount: 5,\n        width: null,\n        height: null\n       }\n    };\n    ```", "```js\n            $scope.init = function () {\n                $scope.$element.addClass(\"rssreader-frame\");\n                if ($scope.options.width != null) {\n                   $scope.$element.width($scope.options.width);\n                }\n                var feed = new google.feeds.Feed($scope.options.url);\n                feed.setNumEntries($scope.options.amount);\n                feed.load(function(result) {\n                    if (!result.error) {\n                        var _title = $(\"<h1>\" + result.feed.title + \"</h1>\");\n                        var _description = $(\"<p class='description'>\" + result.feed.description + \"</p>\");\n                        var _feedList = $(\"<ul class='feed-list'></ul>\");\n                        for (var i = 0; i < result.feed.entries.length; i++) {\n                            var entry = result.feed.entries[i];\n                            var date = new Date(entry.publishedDate);\n                            var dateString = date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear();\n                            var _listElement = $(\"<li></li>\");\n                            _listElement.append(\"<h4><a href='\" + entry.link + \"'>\" + entry.title + \"</a><div class='entry-date'>\" + dateString + \"</div></h4>\");\n                            _listElement.append(\"<p>\" + entry.content + \"</p>\");\n                            _feedList.append(_listElement);\n                        }\n                        $scope.$element.append(_title);\n                        $scope.$element.append(_description);\n                        $scope.$element.append(_feedList);\n                        if ($scope.options.height != null && (_feedList.outerHeight() + _title.outerHeight()) > $scope.options.height) {\n                            _feedList.css({\n                                'height': ($scope.options.height - _title.outerHeight()),\n                                'overflow-y': 'scroll',\n                                'padding-right': 10\n                            });\n                        }\n                    }\n                });\n            }\n    ```", "```js\n    $(function(){\n        $('.myRSSContent').rssreader({\n            width: 400,\n            height: 300\n        });\n    });\n    ```", "```js\nvar feed = new google.feeds.Feed($scope.options.url);\nfeed.setNumEntries($scope.options.amount);\n```", "```js\nfeed.load(function(result) {\nif (!result.error) {\n// -- HIDDEN CODE\n}\n}\n```", "```js\nvar _title = $(\"<h1>\" + result.feed.title + \"</h1>\");\nvar _description = $(\"<p class='description'>\" + result.feed.description + \"</p>\");\nvar _feedList = $(\"<ul class='feed-list'></ul>\");\n```", "```js\n$scope.$element.append(_title);\n$scope.$element.append(_description);\n$scope.$element.append(_feedList);\n```", "```js\nif ($scope.options.height != null && (_feedList.outerHeight() + _title.outerHeight()) > $scope.options.height) {\n   _feedList.css({\n   'height': ($scope.options.height - _title.outerHeight()),\n   'overflow-y': 'scroll',\n   'padding-right': 10\n});\n}\n```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chapter 8 :: Recipe 5 - Image Crop Plugin</title>\n        <link href=\"includes/imagecrop.css\" rel=\"stylesheet\" type=\"text/css\" />\n        <link href=\"includes/recipe-5.css\" rel=\"stylesheet\" type=\"text/css\" />\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/jquery.imagecrop.js\"></script>\n        <script src=\"img/recipe-5.js\"></script>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h3>#1: Select Image</h3>\n            <input type=\"file\" id=\"selectedImage\" />\n            <h3>#2: Crop Image</h3>\n            <div class=\"image-preview\">\n                <div class=\"preview-msg\">Select and image to upload</div>\n                <img id=\"croppable-image\" style=\"display: none;\" />\n            </div>\n            <h3>#3: Upload</h3>\n            <div class=\"progress-bar\"><div class=\"inner\"></div></div>\n            <div class=\"actions\">\n                <button class=\"upload-button\">Upload</button>\n            </div>\n        </div>\n    </body>\n    </html>\n    ```", "```js\n    @import url(http://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400);\n    body {\n        background-color: #F1F1F1;\n        font-family: 'Source Sans Pro', sans-serif !important;\n    }\n    h1, h2, h3 {\n        font-weight: 300;\n        margin: 0;\n    }\n    .container {\n        width: 800px;\n        margin: 50px auto auto auto;\n        background-color: #FFFFFF;\n        padding: 20px;\n        border: solid 1px #E1E1E1;\n    }\n    .container h3 {\n        line-height: 40px;\n    }\n    .container .image-preview {\n        border: solid 1px #E1E1E1;\n        width: 800px;\n        height: 600px;\n        overflow: hidden;\n        margin: auto;\n        position: relative;\n    }\n    .container .image-preview .preview-msg {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: #F1F1F1;\n        text-align: center;\n        font-size: 22px;\n        line-height: 600px;\n        font-weight: 300;\n        z-index: 1;\n    }\n    #croppable-image {\n        position: relative;\n        z-index: 2;\n    }\n    .container .progress-bar {\n        height: 30px;\n        border: solid 1px #E1E1E1;\n    }\n    .container .progress-bar .inner {\n        height: 30px;\n        width: 0;\n        background-color: #54ee86;\n    }\n    .container .actions {\n        text-align: right;\n        margin-top: 10px;\n    }\n    .container .actions .upload-button {\n        height: 30px;\n        width: 60px;\n    }\n    ```", "```js\n    $(function(){\n        var _selectedFile;\n        $(document).on(\"change\", \"#selectedImage\", function(){\n            var reader = new FileReader();\n            var files = $(this).prop(\"files\");\n            if (files.length > 0) {\n                _selectedFile = files[0];\n                reader.onload = function() {\n                    var image = new Image;\n                    image.src = this.result;\n                    if (image.width > 800 || image.height > 600) {\n                        alert(\"Image cannot be larger that 800x600\");\n                    } else {\n                        $('.preview-msg').hide();\n                        $('#croppable-image').prop(\"src\", this.result).fadeIn().imagecrop();\n                    }\n                };\n                reader.readAsDataURL(_selectedFile);\n            }\n        });\n        $(document).on(\"click\", \".upload-button\", function(){\n            var _selectedImage = $('#croppable-image');\n            if (_selectedImage.data(\"selection-width\") > 0 && _selectedImage.data(\"selection-height\") > 0) {\n                var data = new FormData();\n                data.append(\"image\", _selectedFile);\n                data.append(\"selection-width\", _selectedImage.data(\"selection-width\"));\n                data.append(\"selection-height\", _selectedImage.data(\"selection-height\"));\n                data.append(\"selection-left\", _selectedImage.data(\"selection-x\"));\n                data.append(\"selection-top\", _selectedImage.data(\"selection-y\"));\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"/upload.php\");\n                xhr.onprogress = function(event) {\n                    var percent = (event.loaded / event.total * 100);\n                    $('.progress-bar .inner').width(percent + \"%\");\n                }\n                xhr.onload = function() {\n                    var response = JSON.parse(this.response);\n                    if (response.success == false) {\n                        alert(response.error);\n                    }\n                }\n                xhr.send(data);\n            } else {\n                alert(\"Please crop the image before upload\");\n            }\n        });\n    });\n    ```", "```js\n    var name = 'imagecrop';\n        Plugin.prototype = {\n            defaults: {\n                minWidth: 100,\n                minHeight: 100\n       }\n    };\n    ```", "```js\n    $scope.options = $.extend({}, this.defaults, options);\n    $scope.imageSelection = {\n       start: {\n          x: 0,\n          y: 0\n       },\n       end: {\n          x: 0,\n          y: 0\n       },\n       top: 0,\n       left: 0\n    };\n    var _frame;\n    var _overlayLayer;\n    var _selectionLayer;\n    var _selectionOutline;\n    ```", "```js\n    //Has this element already been initialised?\n    if (typeof $scope.$element.data(\"selection-x\") != \"undefined\") {\n       //Yes, so reuse the DOM elements...\n       _frame = $(document).find('.crop-frame').css({\n          width: $scope.$element.width(),\n          height: $scope.$element.height()\n       });\n          _overlayLayer = $(document).find('.overlay-layer');\n          _selectionLayer = $(document).find('.selection-layer');\n          _selectionOutline = $(document).find('.selection-outline');\n    } else {\n       //No, let's initialise then...\n       _frame = $(\"<div class='crop-frame'></div>\").css({\n          width: $scope.$element.width(),\n          height: $scope.$element.height()\n       });\n       _overlayLayer = $(\"<div class='overlay-layer'></div>\");\n       _selectionLayer = $(\"<div class='selection-layer'></div>\");\n       _selectionOutline = $(\"<div class='selection-outline'></div>\");\n       //Wrap the image with the frame\n       $scope.$element.wrap(_frame);\n       _overlayLayer.insertAfter($scope.$element);\n       _selectionLayer.insertAfter($scope.$element);\n       _selectionOutline.insertAfter($scope.$element);\n       /** EVENTS **/\n       _selectionLayer.on(\"mousedown\", $scope.onSelectionStart);\n       _selectionLayer.on(\"mouseup\", $scope.onSelectionEnd);\n       _selectionOutline.on(\"mouseup\", $scope.onSelectionEnd); \n       _selectionOutline.on(\"mousedown\", $scope.onSelectionMove);\n    }\n    $scope.updateElementData();\n    /** UPDATE THE OUTLINE BACKGROUND **/\n    _selectionOutline.css({\n       'background': 'url(' + $scope.$element.prop(\"src\") + ')',\n       'display': 'none'\n    });\n    ```", "```js\n    /**\n    * MAKING THE SELECTION\n    */\n    $scope.onSelectionStart = function(event) {\n       $scope.imageSelection.start = $scope.getMousePosition(event);\n       _selectionLayer.bind({\n         mousemove: function(event) {\n       $scope.imageSelection.end = $scope.getMousePosition(event);\n       $scope.drawSelection();\n        }\n      });\n    };\n    $scope.onSelectionEnd = function() {\n       _selectionLayer.unbind(\"mousemove\");\n       //Hide the element if it doesn't not meet the minimum specified dimensions\n       if (\n          $scope.getSelectionDimentions().width < $scope.options.minWidth || $scope.getSelectionDimentions().height < $scope.options.minHeight\n    ) {\n          _selectionOutline.hide();\n       }\n       _selectionOutline.css({\n          'z-index': 1001\n       });\n    };\n    $scope.drawSelection = function() {\n       _selectionOutline.show();\n       //The smallest top value and the smallest left value are used to set the position of the element\n       $scope.imageSelection.top = ($scope.imageSelection.end.y < $scope.imageSelection.start.y) ? $scope.imageSelection.end.y : $scope.imageSelection.start.y;\n    $scope.imageSelection.left = ($scope.imageSelection.end.x < $scope.imageSelection.start.x) ? $scope.imageSelection.end.x : $scope.imageSelection.start.x;\n    _selectionOutline.css({\n       position: 'absolute',\n       top: $scope.imageSelection.top,\n       left: $scope.imageSelection.left,\n       width: $scope.getSelectionDimentions().width,\n       height: $scope.getSelectionDimentions().height,\n       'background-position': '-' + $scope.imageSelection.left + 'px -' + $scope.imageSelection.top + 'px'\n    });\n    $scope.updateElementData();\n    };\n       /**\n    * MOVING THE SELECTION\n    */\n    $scope.onSelectionMove = function() {\n       //Prevent trigger the selection events\n       _selectionOutline.addClass('dragging');\n       _selectionOutline.on(\"mousemove mouseout\", function(event){\n          if ($(this).hasClass(\"dragging\")) {\n             var left = ($scope.getMousePosition(event).x - ($(this).width() / 2));\n            //Don't allow the draggable element to over the parent's left and right\n            if (left < 0) left = 0;\n            if ((left + $(this).width()) > _selectionLayer.width()) left = (_selectionLayer.width() - $(this).outerWidth());\n            var top = ($scope.getMousePosition(event).y - ($(this).height() / 2));\n            //Don't allow the draggable element to go over the parent's top and bottom\n            if (top < 0) top = 0;\n            if ((top + $(this).height()) > _selectionLayer.height()) top = (_selectionLayer.height() - $(this).outerHeight());\n            $scope.imageSelection.left = left;\n            $scope.imageSelection.top = top;\n            //Set new position\n            $(this).css({\n               top: $scope.imageSelection.top,\n               left: $scope.imageSelection.left,\n               'background-position': '-' + $scope.imageSelection.left + 'px -' + $scope.imageSelection.top + 'px'\n            });\n       }\n       }).on(\"mouseup\", function(){\n       $(this).removeClass('dragging');                $scope.updateElementData();\n       });\n    }\n    ```", "```js\n    /**\n    * HELPER FUNCTIONS\n    */\n    $scope.getMousePosition = function(event) {\n       return {\n          y: (event.pageY - _selectionLayer.offset().top),\n          x: (event.pageX - _selectionLayer.offset().left)\n       };\n    };\n    $scope.getSelectionDimentions = function() {\n       //Work out the width and height based on the start and end positions\n       var width = ($scope.imageSelection.end.x - $scope.imageSelection.start.x);\n       var height = ($scope.imageSelection.end.y - $scope.imageSelection.start.y);\n       //If any negatives turn them into positives\n       if (height < 0) height = (height * -1);\n       if (width < 0) width = (width * -1);\n       return {\n          width: width,\n          height: height,\n          x: $scope.imageSelection.start.x,\n          y: $scope.imageSelection.start.y\n       };\n    }\n    $scope.updateElementData = function() {\n        $scope.$element.data({\n          \"selection-x\": $scope.imageSelection.left,\n          \"selection-y\": $scope.imageSelection.top,\n          \"selection-width\": $scope.getSelectionDimentions().width,\n          \"selection-height\": $scope.getSelectionDimentions().height\n       });\n    }\n    ```", "```js\n    .crop-frame {\n        position: relative;\n        margin: auto;\n    }\n    .selection-layer {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        z-index: 1000;\n    }\n    .selection-outline {\n        border: dotted 1px #000000;\n        z-index: 999;\n    }\n    .selection-outline:hover, .selection-outline:active {\n        cursor: move;\n    }\n    .overlay-layer {\n        background-color: rgba(255, 255, 255, 0.60);\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        z-index: 998;\n    }\n    ```", "```js\n    <?php\n    if (isset($_FILES['image'])) {\n        $response = array(\n            \"success\" => false,\n            \"error\" => \"\"\n        );\n        //GET SELECTION DATA\n        $selectionWidth = (isset($_POST['selection-width'])) ? $_POST['selection-width'] : 0;\n        $selectionHeight = (isset($_POST['selection-height'])) ? $_POST['selection-height'] : 0;\n        $selectionTop = (isset($_POST['selection-top'])) ? $_POST['selection-top'] : 0;\n        $selectionLeft = (isset($_POST['selection-left'])) ? $_POST['selection-left'] : 0;\n        //GET IMAGE DATA\n        $fileName = $_FILES['image']['name'];\n        $ext = pathinfo($fileName, PATHINFO_EXTENSION);\n        if ($selectionWidth > 800 || $selectionHeight > 600) {\n            $response[\"error\"] = \"Image cannot be larger than 800 x 600\";\n        } else if (!in_array($ext, array(\"png\", \"jpg\"))) {\n            $response[\"error\"] = \"Invalid file type\";\n        } else {\n    if ($ext == \"png\") {\n    $source = imagecreatefrompng($_FILES['image']['tmp_name']);\n            } else {\n    $source = imagecreatefromjpeg($_FILES['image']['tmp_name']);\n            }        $dest = imagecreatetruecolor($selectionWidth, $selectionHeight);\n    imagecopyresampled($dest, $source, 0, 0, $selectionLeft, $selectionTop, $selectionWidth, $selectionHeight, $selectionWidth, $selectionHeight);\n            $path = \"/uploads/\";\n            if (!imagejpeg($dest, getcwd() . $path . $fileName, 100)) {\n                $response[\"error\"] = \"Could not save uploaded file\";\n            } else {\n                $response[\"success\"] = true;\n            }\n        }\n        header(\"Content-Type: application/json; charset=UTF-8\");\n        echo json_encode($response);\n    }\n    ```", "```js\n$('#croppable-image').prop(\"src\", this.result).fadeIn().imagecrop();\n```", "```js\n$scope.imageSelection = {\nstart: {\n   x: 0,\n   y: 0\n},\nend: {\n   x: 0,\n   y: 0\n},\ntop: 0,\nleft: 0\n};\nvar _frame;\nvar _overlayLayer;\nvar _selectionLayer;\nvar _selectionOutline;\n```", "```js\nif (typeof $scope.$element.data(\"selection-x\") != \"undefined\") {\n   // -- HIDDEN CODE\n} else {\n   // -- HIDDEN CODE\n}\n```", "```js\n_frame = $(\"<div class='crop-frame'></div>\").css({\n    width: $scope.$element.width(),\n    height: $scope.$element.height()\n});\n```", "```js\n$scope.$element.wrap(_frame);\n_overlayLayer.insertAfter($scope.$element);\n_selectionLayer.insertAfter($scope.$element);\n_selectionOutline.insertAfter($scope.$element); \n```", "```js\n_selectionLayer.on(\"mousedown\", $scope.onSelectionStart);\n_selectionLayer.on(\"mouseup\", $scope.onSelectionEnd);\n_selectionOutline.on(\"mouseup\", $scope.onSelectionEnd);\n_selectionOutline.on(\"mousedown\", $scope.onSelectionMove);\n```", "```js\n$scope.drawSelection = function() {\n   _selectionOutline.show();\n   //The smallest top value and the smallest left value are used to set the position of the element\n$scope.imageSelection.top = ($scope.imageSelection.end.y < $scope.imageSelection.start.y) ? $scope.imageSelection.end.y : $scope.imageSelection.start.y;\n$scope.imageSelection.left = ($scope.imageSelection.end.x < $scope.imageSelection.start.x) ? $scope.imageSelection.end.x : $scope.imageSelection.start.x;\n_selectionOutline.css({\n   position: 'absolute',\n   top: $scope.imageSelection.top,\n   left: $scope.imageSelection.left,\n   width: $scope.getSelectionDimentions().width,\n   height: $scope.getSelectionDimentions().height,\n   'background-position': '-' + $scope.imageSelection.left + 'px -' + $scope.imageSelection.top + 'px'\n});\n$scope.updateElementData();\n};\n```", "```js\nvar data = new FormData();\ndata.append(\"image\", _selectedFile);\ndata.append(\"selection-width\", _selectedImage.data(\"selection-width\"));\ndata.append(\"selection-height\", _selectedImage.data(\"selection-height\"));\ndata.append(\"selection-left\", _selectedImage.data(\"selection-x\"));\ndata.append(\"selection-top\", _selectedImage.data(\"selection-y\"));\n```", "```js\nvar xhr = new XMLHttpRequest();\nxhr.open(\"POST\", \"/upload.php\");\nxhr.onprogress = function(event) {\n   var percent = (event.loaded / event.total * 100);\n   $('.progress-bar .inner').width(percent + \"%\");\n}\nxhr.onload = function() {\n   var response = JSON.parse(this.response);\n   if (response.success == false) {\n      alert(response.error);\n}\n}\nxhr.send(data);\n```", "```js\n$dest = imagecreatetruecolor($selectionWidth, $selectionHeight);\n```", "```js\nimagecopyresampled($dest, $source, 0, 0, $selectionLeft, $selectionTop, $selectionWidth, $selectionHeight, $selectionWidth, $selectionHeight);\n```", "```js\nimagejpeg($dest, getcwd() . $path . $fileName, 100)\n```"]