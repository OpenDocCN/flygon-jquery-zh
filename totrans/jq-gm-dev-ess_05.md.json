["```js\n// find the visible part\nvar offset = gf.offset(parent);\nvar visible = gf.tilemapBox(options, {\n       x:      -options.x - offset.x, \n       y:      -options.x - offset.y, \n       width:  gf.baseDiv.width(),\n       height: gf.baseDiv.height()\n});\n```", "```js\ngf.offset = function(div){\n   var options = div.data(\"gf\");\n   var x = options.x;\n   var y = options.y;\n\n   var parent = $(div.parent());\n   options = parent.data(\"gf\");\n   while (!parent.is(gf.baseDiv) && options !== undefined){\n      x += options.x;\n      y += options.y;\n      parent = $(parent.parent());\n      options = parent.data(\"gf\");\n   }\n   return {x: x, y: y};\n}\n```", "```js\ngf.addTilemap = function(parent, divId, options){\n    var options = $.extend({\n        x: 0,\n        ...\n    }, options);\n\n    // find the visible part\n var offset = gf.offset(parent);\n var visible = gf.tilemapBox(options, {\n x:      -options.x - offset.x,\n y:      -options.x - offset.y,\n width:  gf.baseDiv.width(),\n height: gf.baseDiv.height()\n });\n options.visible = visible;\n\n    //create line and row fragment:\n    var tilemap = gf.tilemapFragment.clone().attr(\"id\",divId).data(\"gf\",options);\n    for (var i=visible.y1; i < visible.y2; i++){\n        for(var j=visible.x1; j < visible.x2; j++) {\n            var animationIndex = options.map[i][j];\n\n            ...\n        }\n    }\n    parent.append(tilemap);\n    return tilemap;\n}\n```", "```js\ngf.x = function(div,position) {\n    if(position !== undefined) {\n        div.css(\"left\", position);\n        div.data(\"gf\").x = position;\n\n        // if the div is a tile map we need to update the visible part\n        if(div.find(\".gf_tilemap\").size()>0){\n div.find(\".gf_tilemap\").each(function(){gf.updateVisibility($(this))});\n }\n if(div.hasClass(\"gf_tilemap\")){\n gf.updateVisibility($(div));\n }\n    } else {\n        return div.data(\"gf\").x; \n    }\n}\n```", "```js\ngf.updateVisibility = function(div){\n   var options = div.data(\"gf\");\n   var oldVisibility = options.visible;\n\n    var parent = div.parent();\n\n    var offset = gf.offset(div);\n   var newVisibility = gf.tilemapBox(options, {\n       x:      -offset.x,\n       y:      -offset.y,\n       width:  gf.baseDiv.width(),\n       height: gf.baseDiv.height()\n    });\n\n    if( oldVisibility.x1 !== newVisibility.x1 ||\n       oldVisibility.x2 !== newVisibility.x2 ||\n       oldVisibility.y1 !== newVisibility.y1 ||\n       oldVisibility.y2 !== newVisibility.y2){\n\n       div.detach();\n\n       // remove old tiles \n       for(var i = oldVisibility.y1; i < newVisibility.y1; i++){\n          for (var j = oldVisibility.x1; j < oldVisibility.x2; j++){\n             div.find(\".gf_line_\"+i+\".gf_column_\"+j).remove();\n          }\n       }\n       for(var i = newVisibility.y2; i < oldVisibility.y2; i++){\n          for (var j = oldVisibility.x1; j < oldVisibility.x2; j++){\n             div.find(\".gf_line_\"+i+\".gf_column_\"+j).remove();\n          }\n       }\n       for(var j = oldVisibility.x1; j < newVisibility.x1; j++){\n          for(var i = oldVisibility.y1; i < oldVisibility.y2; i++){\n             div.find(\".gf_line_\"+i+\".gf_column_\"+j).remove();\n          }\n       }\n       for(var j = newVisibility.x2; j < oldVisibility.x2; j++){\n          for(var i = oldVisibility.y1; i < oldVisibility.y2; i++){\n             div.find(\".gf_line_\"+i+\".gf_column_\"+j).remove();\n          }\n       }\n       // add new tiles\n\n       for(var i = oldVisibility.y2; i < newVisibility.y2; i++){\n          for (var j = oldVisibility.x1; j < oldVisibility.x2; j++){\n             createTile(div,i,j,options);\n          }\n       }\n       for(var i = newVisibility.y1; i < oldVisibility.y1; i++){\n          for (var j = oldVisibility.x1; j < oldVisibility.x2; j++){\n             createTile(div,i,j,options);\n          }\n       }\n       for(var j = oldVisibility.x2; j < newVisibility.x2; j++){\n          for(var i = oldVisibility.y1; i < oldVisibility.y2; i++){\n             createTile(div,i,j,options);\n          }\n       }\n       for(var j = newVisibility.x1; j < oldVisibility.x1; j++){\n          for(var i = oldVisibility.y1; i < oldVisibility.y2; i++){\n             createTile(div,i,j,options);\n          }\n       }\n       div.appendTo(parent);\n\n    }\n    // update visibility\n    options.visible = newVisibility;\n}\n```", "```js\nvar createTile = function(div, i,j,options){\n   var animationIndex = options.map[i][j];\n   if(animationIndex > 0 && div.find(\".gf_line_\"+i+\".gf_column_\"+j).size() === 0){\n       var tileOptions = {\n            x: options.x + j*options.tileWidth,\n            y: options.y + i*options.tileHeight,\n            width: options.tileWidth,\n            height: options.tileHeight\n        }\n        var tile = gf.spriteFragment.clone().css({\n            left:   tileOptions.x,\n            top:    tileOptions.y,\n            width:  tileOptions.width,\n            height: tileOptions.height}\n        ).addClass(\"gf_line_\"+i).addClass(\"gf_column_\"+j).data(\"gf\", tileOptions);\n\n        gf.setAnimation(tile, options.animations[animationIndex-1]);\n\n        div.append(tile);\n    }\n}\n```", "```js\ngf.y(this.div, y);\nthis.div.css(\"z-index\", y + spriteHeight);\n```", "```js\nz-index = y-coordinate + spriteHeight + floorIndex * floorHeight\n```", "```js\n$.ajax({\n   url: url,\n   async: false,\n   dataType: 'json',\n   success: function(json){...}\n);\n```", "```js\nvar player = new (function(){\n    // the group holding both the player sprite and the weapon\n    this.div = $();\n    // the sprite holding the player's avatar\n    this.avatar = $();\n    // the sprite holding the weapon\n    this.weapon = $();\n    // the hit zone\n    this.hitzone  = $();\n    // collision zone\n    this.colzone = $();\n\n    //...\n\n    this.update = function () {\n        //...\n    };\n\n    this.left = function (){\n        if(state !== \"strike\"){\n            if(orientation !== \"left\" && moveY === 0 && moveX === 0){\n                orientation = \"left\";\n                gf.x(this.hitzone, 16);\n                gf.y(this.hitzone, 16);\n                gf.h(this.hitzone,  128 + 32);\n                gf.w(this.hitzone, 64);\n                //...\n\n            }\n            //...\n        }\n    };\n\n    this.right = function (){\n        //...\n    };\n\n    this.up = function (){\n        //...\n    };\n\n    this.down = function (){\n        if(state !== \"strike\"){\n            if(orientation !== \"down\" && moveY === 0 && moveX === 0) {\n                orientation = \"down\";\n                state = \"walk\";\n                gf.x(this.hitzone, 16);\n                gf.y(this.hitzone, 192-80);\n                gf.w(this.hitzone,  128 + 32);\n                gf.h(this.hitzone, 64);\n                //...\n            }\n            //...\n        }\n    };\n\n    //...\n});\n```", "```js\nthis.detectInteraction = function(npcs, enemies, console){\n    if(state == \"strike\" && !interacted){\n        for (var i = 0; i < npcs.length; i++){\n            if(gf.spriteCollide(this.hitzone, npcs[i].div)){\n                npcs[i].object.dialog();\n                interacted = true;\n                return;\n            }\n        }\n        for (var i = 0; i < enemies.length; i++){\n            if(gf.spriteCollide(this.hitzone, enemies[i].div)){\n                // handle combat\n                interacted = true;\n                return;\n            }\n        }\n    }\n};\n```", "```js\ncontainer.append(\"<div id='console' style='font-family: \\\"Press Start 2P\\\", cursive; color: #fff; width: 770px; height: 20px; padding: 15px; position: absolute; bottom: 0; background: rgba(0,0,0,0.5); z-index: 3000'>\");\n```", "```js\nvar NPC = function(name, text, console){\n    var current = 0;\n\n    this.getText = function(){\n        if(current === text.length){\n            current = 0;\n            return \"[end]\";\n        }\n        return name + \": \" + text[current++];\n    };\n\n    this.dialog = function(){\n        console.html(this.getText());\n    }\n}\n```", "```js\nnpcs.push({\n    div: gf.addSprite(npcsGroup,\"NPC1\", {\n        x:      800,\n        y:      800,\n        width:  96,\n        height: 96\n    }),\n    object: new NPC(\"Dr. Where\", [\"Welcome to this small universe...\",\"I hope you will enjoy it.\",\"You should head east from here...\",\"there's someone you may want to meet.\"], console)\n});\nnpcs[npcs.length-1].object.div = npcs[npcs.length-1].div;\ngf.setAnimation(npcs[npcs.length-1].div, new gf.animation({\n    url: \"npc/scientist.png\"\n}));\n$(\"#NPC1\").css(\"z-index\",800 + 96);\n```", "```js\nif(gf.spriteCollide(this.hitzone, enemies[i].div)){\n    var enemyRoll = enemies[i].object.defend();\n    var playerRoll = Math.round(Math.random() * 6) + 5;\n\n    if(enemyRoll <= playerRoll){\n        var dead = enemies[i].object.kill(playerRoll);\n        console.html(\"You hit the enemy \"+playerRoll+\"pt\");\n        if (dead) {\n            console.html(\"You killed the enemy!\");\n            enemies[i].div.fadeOut(2000, function(){\n                $(this).remove();\n            });\n            enemies.splice(i,1);\n        }\n    } else {\n        console.html(\"The enemy countered your attack\");\n    }\n    interacted = true;\n    return;\n}\n```"]