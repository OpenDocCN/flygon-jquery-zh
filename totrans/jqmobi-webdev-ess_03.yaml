- en: Chapter 3. Enhancing Pages with Headers, Footers, and Toolbars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Toolbars provide a simple way to add navigation elements to a mobile web site.
    They can be especially useful for consistent, or site-wide navigation controls
    that users can always refer to when navigating through your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Talk about how to create both headers and footers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss how to turn these headers and footers into useful toolbars
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrate how to create fixed positioned toolbars that always show up, no
    matter how large the content of a particular page is
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show an example of navigation bars
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important preliminary points
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter, all of the code from this chapter is available
    via the ZIP file downloaded at Github. Most of the code samples in this chapter
    are short, therefore the complete code should be used when testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Adding headers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've already worked with headers before, so the code will be familiar. In
    this chapter, we will study them deeper and demonstrate how to add additional
    functionality, like buttons, to your site headers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember, a header can be defined by simply using a div with the appropriate
    role:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous tag will add a nice black background to the text making it stand
    out a bit more, as shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding headers](img/7263_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'However, we can make this even nicer. By including an `h1` tag around our text,
    jQuery Mobile will make the header even larger, and automatically center the text,
    as shown in the screenshot following the tag:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Adding headers](img/7263_03_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Right away you can see the difference. We can further add functionality to
    headers by adding buttons. Buttons could be used for navigation (for example,
    to return to the home screen), or to provide links to related pages. Because the
    center of the header is used for text, there are only two *spaces* available for
    buttons one to the left and one to the right. Buttons can be added simply by creating
    links in your header. The first link will be to the left of the text and the second
    link to the right. The following code snippet is an example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When viewed in the mobile browser, you can see the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding headers](img/7263_03_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'Notice how the simpler links were automatically turned into big buttons, making
    them easier to use and more "control like" for the header. You may be wondering,
    what if you only want one button, and want it on the right-hand side? Removing
    the first button and keeping the second in place will not work, as shown in the
    following code snippet:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The previous code snippet creates a button in the header but on the left-hand
    side. In order to position the button to the right, simply add the class `ui-btn-right`.
    The following code snippet is an example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also specify `ui-btn-left` to place a link on the left-hand side, but
    as demonstrated in the previous code snippet, that''s the normal behavior:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding headers](img/7263_03_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Icon sneak peak
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While not specifically a header toolbar feature, one interesting feature available
    to all buttons in jQuery Mobile is the ability to specify an icon. A set of simple,
    easily recognizable icons ship with jQuery Mobile and are available to use immediately.
    These icons will be discussed further in [Chapter 6](../Text/ch06.html "Chapter 6. Working
    with Forms and jQuery Mobile"), *Creating Mobile Optimized Forms*, but as a quick
    preview, the following code snippet shows a header with two customized icons:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice the new attribute, `data-icon`. When viewed in the browser, you get
    what is shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Icon sneak peak](img/7263_03_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Working with back buttons
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on your user's hardware, they may or may not have a physical back
    button. For devices that do, like Android phones, hitting the back button will
    work just fine in a jQuery Mobile application. Whatever page the user was on previously
    will be loaded as soon as the button is clicked. But on other devices, like the
    iPhone, there is no such button to click. While you can provide links to navigate
    around pages yourself, jQuery Mobile provides some nice built in support for navigating
    backwards out of the box.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways you can add an automatic back button. `Listing 3-1` shows
    a simple, two page jQuery Mobile site. In the second page, we''ve added a new
    data attribute, `data-add-back-btn="true"`. This will create a back button in
    the header of the second page automatically. Next, we also added a simple link
    in the page content. While the actual URL for the link is blank, make note of
    the `data-rel="back"` attribute. jQuery Mobile will detect this link and automatically
    send the user to the previous page. The following code snippet is an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot demonstrates the feature in action:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with back buttons](img/7263_03_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'In case you''re curious, the text of the button can be customized by simply
    using another data attribute in your page div: `data-add-back-btn="true" data-back-btn-text="Return"`.
    You can turn on back button support globally and change the text via JavaScript
    as well. This will be discussed in [Chapter 9](../Text/ch09.html "Chapter 9. Working
    with Events"), *JavaScript Configuration and Utilities in jQuery Mobile*.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Working with footers
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Footers are going to be, for the most part, much like headers. We''ve previously
    demonstrated the use of the data-role to create a footer:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But, as with our headers, if we add the proper HTML inside the div tag, we
    can get even better formatting:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the addition of the `h4` tags, our footers are now centered and padded
    a bit to make them stand out more, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with footers](img/7263_03_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: 'As with headers, you can include buttons in the footer. Unlike headers, the
    buttons in a footer do not automatically position themselves to the left and right
    of the text. In fact, if you decide to make use of text and buttons, you want
    to ensure you remove the `h4` tag from the footer text or your footer will end
    up quite large. The following is a simple example with two buttons:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screen shot demonstrates this change:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with footers](img/7263_03_08.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'This works - but notice the buttons don''t have much space around them. You
    can improve that by adding a class called `ui-bar` to your footer `div` tag, as
    shown in the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Working with footers](img/7263_03_09.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Creating fixed and full screen headers and footers
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous discussion about headers and footers, you saw a few examples
    of how buttons can be added. These buttons could be useful for navigating in your
    site. But what if a particular page is somewhat long? A blog entry, for example,
    could be quite long, especially when viewed on a mobile device. As the user scrolls,
    the header, or footer, could be off screen. jQuery Mobile provides a way to create
    fixed position headers and footers. With this feature enabled, the header and
    footer will always be visible. They may disappear while the user scrolls, but
    as soon as they lift their finger and stop scrolling, the header and footer will
    reappear. This feature can be enabled by adding `data-position="fixed"` to the
    div tag used for either the header or footer. `Listing 3-2` demonstrates an example.
    In order to ensure the page actually scrolls, many paragraphs of text were repeated.
    This has been removed from the code in the book, but exists in the actual file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We won't bother with a screenshot of this example as it won't exactly convey
    the feature well, but if you try this in your mobile device, notice while scrolling
    up and down, as soon as you lift your finger the header and footer will both pop
    in. This gives the user access to them no matter how large the page may be.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Full screen positioning
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another option to consider is what's called full screen positioning. This is
    a metaphor commonly used with pictures, but can also be used where fixed positioned
    headers and footers are used. In this scenario, the header and footer appear and
    disappear with clicks. So, with a photo, this allows you a view of the photo as
    it is, but also the ability to get the header and footer back with a simple click.
    Perhaps, instead of full screen positioning you can consider it as *retrievable*
    headers and footers instead. In general, this is best used when you want the content
    of the page to be viewed by itself, again, an excellent example of this would
    be pictures.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this feature, simply add `data-fullscreen="true"` to the div tag
    used to define the page. `Listing 3-3` demonstrates this feature, as shown in
    the following code snippet:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As with the previous example, the previous code snippet doesn't translate very
    well to static screen shots. Open it up in your mobile browser and take a look.
    Remember, you can click multiple times to toggle on and off the effect.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Working with navigation bars
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've seen a few examples now which include buttons with headers and footers,
    but jQuery Mobile has a cleaner version of this called NavBars (or navigation
    bars). These are full screen-wide bars used to hold buttons. jQuery Mobile also
    supports highlighting one button at a time as an active button. When used for
    navigation, this is an easy way to mark a page as being active.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'A NavBar is simply an unordered list wrapped in a div tag that uses `data-role="navbar"`.
    Placed inside a footer it looks similar to the following code snippet:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Notice the use of `class="ui-btn-active"` on the first link. This will mark
    the first button as active. jQuery Mobile won''t be able to do this for you automatically,
    so as you build each page and make use of `navbar`, you will have to *move* the
    class appropriately. The following screenshot shows how it looks:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with navigation bars](img/7263_03_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: You can add up to 5 buttons and jQuery Mobile will appropriately size the buttons
    to make them fit. If you go over five, then the buttons will simply be split over
    multiple lines. Most likely this is not something you want to cover. Overwhelming
    the user with too many buttons is a sure way to confuse, and ultimately anger,
    your users.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also include a `navbar` in your header. If placed after the text, or
    any other buttons, jQuery Mobile will automatically drop it to the next line:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Working with navigation bars](img/7263_03_11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: You can see an example of both of these in action in the file named `header_and_footer_with_navbar.html`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Persisting navigation bar footers across multiple pages
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now take two of the previous topics and combine them into one incredibly
    cool little feature - multiple page persistent footers. It''s a bit more work,
    but you can create a footer NavBar that will not disappear when switching from
    page to page. In order to do this, you have to follow a few simple rules:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Your footer div must be present on all pages
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your footer div must use the same `data-id` value across all pages
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You must use two CSS classes: `ui-state-persist` and `ui-btn-active`, on the
    *active* page in the NavBar'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must also use the persistent footer feature
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That sounded a bit complex, but it's really just a tiny bit more HTML in your
    template. In `listing 3-4`, an index page for a fictional company makes use of
    a footer NavBar. Note the use of `ui-state-persist` and `ui-btn-active` for the
    currently selected page.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows how the complete page looks:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Persisting navigation bar footers across multiple pages](img/7263_03_12.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'We don''t need to worry so much about the other two pages. You can find them
    in the ZIP file you downloaded. The following code snippet is the footer section
    from the second page. Notice that the only change here is the movement of the
    `ui-btn-active` class:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要太担心另外两个页面。你可以在下载的ZIP文件中找到它们。以下代码片段是第二个页面的页脚部分。请注意，这里唯一的变化是`ui-btn-active`类的移动：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Clicking from one page to another shows a smooth transition to each page, but
    the footer bar remains. Much like a framed site (don't shudder - frames weren't
    always looked at with scorn), the footer will stay as the user navigates throughout
    the site.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 点击从一个页面到另一个页面时，每个页面都显示平滑的过渡，但页脚栏保持不变。就像一个有框架的站点（不要抖动 - 框架并不总是被鄙视），当用户在整个站点中导航时，页脚将保持不变。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how to add headers, footers, and navigation bars
    (NavBars) to your jQuery Mobile pages. We showed how the proper div tags will
    create nicely formatted headers and footers on your page and how to make these
    headers and footers persist over a long page. Further, we demonstrated *full screen
    mode* for headers and footers. These are headers and footers that appear and disappear
    with clicks - perfect for images and other items you want to show in a full screen
    type view on your mobile device. Finally, we saw how to combine persistent footers
    and NavBars to create a footer that doesn't go away when the page changes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何向您的jQuery Mobile页面添加标题、页脚和导航栏（NavBars）。我们展示了正确的div标记如何在您的页面上创建格式良好的标题和页脚，以及如何使这些标题和页脚在长页面中持续存在。此外，我们演示了*全屏模式*用于标题和页脚。这些是点击时出现和消失的标题和页脚
    - 完美用于您想在移动设备上以全屏视图显示的图像和其他项目。最后，我们看到了如何结合持久页脚和NavBars以创建页脚，当页面更改时不会消失。
- en: In the next chapter, we'll do a deep dive into lists. Lists are one of the primary
    ways folks add navigation and menus to their mobile sites. jQuery Mobile provides
    a plethora of options for creating and styling lists.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨列表。列表是人们为其移动站点添加导航和菜单的主要方式之一。jQuery Mobile提供了大量选项来创建和样式化列表。
