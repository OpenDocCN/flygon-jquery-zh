["```js\n    http://mydomain.com/api/\n    ```", "```js\n    http://mydomain.com/api/products\n    ```", "```js\n    GET /api/products HTTP/1.1\n    ```", "```js\n    'Content-Type': 'application/json' //what we send\n    Accept: 'application/json; charset=utf-8'//what we expect\n    ```", "```js\nhttp://mydomain.com/api/products/1\n```", "```js\n    var ProductResource = (function () {\n      function all() {}\n      function get(id) {}\n      function create(product) {}\n      function update(product) {}\n      function remove(id) {}\n      return {\n        all: all,\n        get: get,\n        create: create,\n        update: update,\n        remove: remove\n      };\n    })();\n    ```", "```js\n    function all() {\n      return $.ajax({\n        dataType:'json',\n        type: 'GET',\n        url: '/products'\n      });\n    }\n    function get(id) {\n      return $.ajax({\n        dataType:'json',\n        type: 'GET',\n        url: '/products/'+id\n      });\n    }\n    ```", "```js\n    function create(product) {\n      return $.ajax({\n        datatype:'json',\n        type: 'POST',\n        url: '/products',\n        data: product\n      });\n    }\n    function update(product) {\n      return $.ajax({\n        datatype:'json',\n        type: 'PUT',\n        url: '/products/'+product.id,\n        data: product\n      });\n    }\n    function remove(id) {\n      return $.ajax({\n        datatype:'json',\n        type: 'DELETE',\n        url: '/products/'+id\n      });\n    }\n    ```", "```js\n    <script type='text/javascript' src='js/resources/ProductResource.js'></script>\n    ```", "```js\n        ko.applyBindings(vm);\n        ```", "```js\n        vm.activate();\n        ```", "```js\n    var activate = function () {\n      ProductResource.all().done(allCallbackSuccess);\n    };\n    ```", "```js\n    var allCallbackSuccess = function(response){\n      catalog([]);\n      response.data.forEach(function(item){\n        catalog.push( \n          Product (item.id, item.name, item.price, item.stock)\n        );\n      });\n      filteredCatalog(catalog());\n      ko.applyBindings(vm);\n    };\n    ```", "```js\n    //ko External Template Settings\n    infuser.defaults.templateSuffix = '.html';\n    infuser.defaults.templateUrl = 'views';\n    vm.activate();\n\n    ```", "```js\n    <script type='text/javascript' src='vendors/jquery.mockjax.js'></script>\n    ```", "```js\n    $.mockjax({\n      url: '/products',\n      type: 'GET',\n      dataType: 'json',\n      responseTime: 750,\n      responseText: []\n    });\n    ```", "```js\n    $.mockjax({\n      url: '/products',\n      type: 'GET',\n      dataType: 'json',\n      responseTime: 750,\n      responseText: ['Here I can fake the response']\n    });\n    ```", "```js\n    $.mockjax({\n      url: '/products',\n      type: 'GET',\n      dataType: 'json',\n      responseTime: 750,\n      response: function(settings) {\n        var fake = 'We fake the url:'+settings.url;\n        this.responseText = fake;\n      }\n    });\n    ```", "```js\n        $.mockJSON.generateFromTemplate({\n          'data|5-10': [{\n            'id|1-100': 0,\n            'name': '@PRODUCTNAME',\n            'price|10-500': 0,\n            'stock|1-9': 0\n          }]\n        });\n        ```", "```js\n            $.mockJSON.data.PRODUCTNAME = [\n              'T-SHIRT', 'SHIRT', 'TROUSERS', 'JEANS', 'SHORTS', 'GLOVES', 'TIE'\n            ];\n            ```", "```js\n        $.mockJSON.data.PRODUCTNAME = [\n          'T-SHIRT', 'SHIRT', 'TROUSERS', 'JEANS', 'SHORTS', 'GLOVES', 'TIE'\n        ];\n        $.mockjax({\n          url: '/products',\n          type: 'GET',\n          dataType: 'json',\n          responseTime: 750,\n          status:200,\n          responseText: $.mockJSON.generateFromTemplate({\n            'data|5-5': [{\n              'id|1-100': 0,\n              'name': '@PRODUCTNAME',\n              'price|10-500': 0,\n              'stock|1-9': 0\n            }]\n          })\n        });\n        ```", "```js\n    $.mockjax({\n      url: /^\\/products\\/([\\d]+)$/,\n      type: 'GET',\n      dataType: 'json',\n      responseTime: 750,\n      responseText: ''\n    });\n    ```", "```js\n    $.mockJSON.generateFromTemplate({\n      'data': {\n        'id|1-100': 0,\n        'name': '@PRODUCTNAME',\n        'price|10-500': 0,\n        'stock|1-9': 0,\n        'description': '@LOREM_IPSUM'\n      }\n    })\n    ```", "```js\n    //URI: /products/:id\n    $.mockjax({\n      url: /^\\/products\\/([\\d]+)$/,\n      type: 'GET',\n      dataType: 'json',\n      responseTime: 750,\n      responseText: $.mockJSON.generateFromTemplate({\n        'data': {\n          'id|1-100': 0,\n          'name': '@PRODUCTNAME',\n          'price|10-500': 0,\n          'stock|1-9': 0,\n          'description': '@LOREM_IPSUM'\n        }\n      })\n    });\n    ```", "```js\n    var showDescription = function (data) {\n      ProductResource.get(data.id())\n      .done(function(response){\n        alert(response.data.description);\n      });\n    };\n    ```", "```js\n    <td><a href data-bind='click:$parent.showDescription, text: name'></a></td>\n    ```", "```js\n    return {\n      …\n      showDescription: showDescription,\n      …\n    };\n    ```", "```js\n    $.mockjax({\n      url: '/products',\n      type:'POST',\n      dataType: 'json',\n      responseTime: 750,\n      status:200,\n      responseText: {\n        'data': {\n          text: 'Product created'\n        }\n      }\n    });\n    ```", "```js\n    var addProduct = function (data) {\n      var id = new Date().valueOf();\n      var product = new Product(\n        id,\n        data.name(),\n        data.price(),\n        data.stock()\n      );\n\n      ProductResource.create(ko.toJS(data))\n      .done(function (response){\n        catalog.push(product);\n        filteredCatalog(catalog());\n        newProduct = Product(new Date().valueOf(),'',0,0);\n        $('#addToCatalogModal').modal('hide');\n      });\n    };\n    ```", "```js\nvar hasStock = function () {\n  return _product.stock() > 0;\n};\nvar decreaseStock = function () {\n  var s = _product.stock();\n  if (s > 0) {\n    s--;\n  }\n  _product.stock(s);\n};\n```", "```js\n    var ProductService = (function() {\n      var hasStock = function (product) {\n        return product.stock() > 0;\n      };\n\n      var decreaseStock = function (product) {\n        var s = product.stock();\n        if (s > 0) {\n          s--;\n        }\n        product.stock(s);\n      };\n\n      return {\n        hasStock:hasStock,\n        decreaseStock:decreaseStock\n      };\n    })();\n    ```", "```js\n    this.addToCart = function() {\n      ...\n      if (item) {\n        CartProductService.addUnit(item);\n      } else {\n        item = CartItem(data,1);\n        tmpCart.push(item);\n        ProductService.decreaseStock(item.product);\n      }\n      this.cart(tmpCart);\n    };\n    ```", "```js\n    var CartProductService = (function() {\n\n      var addUnit = function (cartItem) {\n        var u = cartItem.units();\n        var _stock =  cartItem.product.stock();\n        if (_stock === 0) {\n          return;\n        }\n        cartItem.units(u+1);\n        cartItem.product.stock(--_stock);\n      };\n\n      var removeUnit = function (cartItem) {\n        var u =  cartItem.units();\n        var _stock =  cartItem.product.stock();\n        if (u === 0) {\n          return;\n        }\n        cartItem.units(u-1);\n        cartItem.product.stock(++_stock);\n      };\n\n      return {\n        addUnit:addUnit,\n        removeUnit:removeUnit\n      };\n    })();\n    ```", "```js\n    $.mockjax({\n        url: /^\\/products\\/([\\d]+)$/,\n        type:'PUT',\n        dataType: 'json',\n        responseTime: 750,\n        status:200,\n        responseText: {\n            'data': {\n                text: 'Product saved'\n            }\n        }\n    });\n    ```", "```js\n    <button class='btn btn-info' data-bind='click: $parent.openEditModal'>\n      <i class='glyphicon glyphicon-pencil'></i>\n    </button>\n    ```", "```js\n    var openEditModal = function (product) {\n      tmpProduct = ProductService.clone(product);\n      selectedProduct(product);\n      $('#editProductModal').modal('show');\n    };\n    ```", "```js\n    Var tmpProduct = null;\n    ```", "```js\n    Var selectedProduct = ko.observable();\n    ```", "```js\n    var clone = function (product) {\n      return Product(product.id(), product.name(), product.price(), product.stock());\n    };\n    ```", "```js\n    var refresh = function (product,newProduct) {\n      product.name(newProduct.name());\n      product.stock(newProduct.stock());\n      product.price(newProduct.price());\n    };\n    ```", "```js\n    return {\n      hasStock:hasStock,\n      decreaseStock:decreaseStock,\n      clone:clone,\n      refresh: refresh\n    };\n    ```", "```js\n    <form class='form-horizontal' role='form' data-bind='with:selectedProduct'>\n    ```", "```js\n    <button type='submit' class='btn btn-default' data-bind='click: $parent.cancelEdition'>\n      <i class='glyphicon glyphicon-remove-circle'></i> Cancel\n    </button>\n    <button type='submit' class='btn btn-default' data-bind='click: $parent.updateProduct'>\n      <i class='glyphicon glyphicon-plus-sign'></i> Save\n    </button>\n    ```", "```js\n    var cancelEdition = function (product) {\n      $('#editProductModal').modal('hide');\n    };\n    var saveProduct = function (product) {\n      ProductResource.save(ko.toJS(product)).done( function(response){\n        var tmpCatalog = catalog();\n        var i = tmpCatalog.length;\n        while(i--){\n          if(tmpCatalog[i].id() === product.id()){\n            ProductService.refresh(tmpCatalog[i],product);\n          }\n        }\n        catalog(tmpCatalog);\n        filterCatalog();\n        $('#editProductModal').modal('hide');\n      });\n    };\n    ```", "```js\n    $.mockjax({\n      url: /^\\/products\\/([\\d]+)$/,\n      type:'DELETE',\n      dataType: 'json',\n      responseTime: 750,\n      status:200,\n      responseText: {\n        'data': {\n          text: 'Product deleted'\n        }\n      }\n    });\n    ```", "```js\n    var deleteProduct = function (product){\n      ProductResource.remove(product.id())\n      .done(function(response){\n        catalog.remove(product);\n        filteredCatalog(catalog());\n        removeFromCartByProduct(product);\n      });\n    };\n    ```", "```js\n    var removeFromCartByProduct = function (product) {\n      var tmpCart = cart();\n      var i = tmpCart.length;\n      var item;\n      while(i--){\n        if (tmpCart[i].product.id() === product.id()){\n          item = tmpCart[i];\n        }\n      }\n      removeFromCart(item);\n    }\n    ```", "```js\n    <button class='btn btn-danger' data-bind='click: $parent.deleteProduct'>\n      <i class='glyphicon glyphicon-remove'></i>\n    </button>\n    ```", "```js\n    'use strict';\n    var OrderResource = (function () {\n      function create(order) {\n        return $.ajax({\n          type: 'PUT',\n          url: '/order',\n          data: order\n        });\n      }\n      return {\n        create: create\n      };\n    })();\n    ```", "```js\n    $.mockjax({\n      type: 'POST',\n      url: '/order',\n      status: 200,\n      responseTime: 750,\n      responseText: {\n        'data': {\n          text: 'Order created'\n        }\n      }\n    });\n    ```", "```js\n    var finishOrder = function() {\n      OrderResource.create().done(function(response){\n        cart([]);\n        visibleCart(false);\n        showCatalog();\n        $('#finishOrderModal').modal('show');\n      });\n    };\n    ```", "```js\n    var Customer = function () {\n      var firstName = ko.observable('');\n      var lastName = ko.observable('');\n      var fullName = ko.computed(function(){\n        return firstName() + ' ' + lastName();\n      });\n      var address = ko.observable('');\n      var email = ko.observable('');\n      var zipCode = ko.observable('');\n      var country = ko.observable('');\n      var fullAddress = ko.computed(function(){\n        return address() + ' ' + zipCode() + ', ' + country();\n      });\n      return {\n        firstName:firstName,\n        lastName: lastName,\n        fullName: fullName,\n        address: address,\n        email: email,\n        zipCode: zipCode,\n        country: country,\n        fullAddress: fullAddress,\n      };\n    };\n    ```", "```js\n    var customer = Customer();\n    ```", "```js\n    var countries = ko.observableArray(['United States', 'United Kingdom']);\n    ```", "```js\n    <div class='col-xs-12 col-sm-6'>\n      <form class='form-horizontal' role='form' data-bind='with:customer'>\n        <div class='modal-header'>\n          <h3>Customer Information</h3>\n        </div>\n        <div class='modal-body'>\n          <div class='form-group'>\n            <div class='col-sm-12'>\n              <input type='text' class='form-control' placeholder='First Name' data-bind='textInput:firstName'>\n            </div>\n          </div>\n          <div class='form-group'>\n            <div class='col-sm-12'>\n              <input type='text' class='form-control' placeholder='Last Name' data-bind='textInput:lastName'>\n            </div>\n          </div>\n          <div class='form-group'>\n            <div class='col-sm-12'>\n              <input type='text' class='form-control' placeholder='Address' data-bind='textInput:address'>\n            </div>\n          </div>\n          <div class='form-group'>\n            <div class='col-sm-12'>\n              <input type='text' class='form-control' placeholder='Zip code' data-bind='textInput:zipCode'>\n            </div>\n          </div>\n          <div class='form-group'>\n            <div class='col-sm-12'>\n              <input type='text' class='form-control' placeholder='Email' data-bind='textInput:email'>\n            </div>\n          </div>\n          <div class='form-group'>\n            <div class='col-sm-12'>\n              <select class='form-control' data-bind='options: $parent.countries,value:country'></select>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n    ```", "```js\n    var finishOrder = function() {\n      var order = {\n        cart: ko.toJS(cart),\n        customer: ko.toJS(customer)\n      };\n      OrderResource.create(order).done(function(response){\n        cart([]);\n        hideCartDetails();\n        showCatalog();\n        $('#finishOrderModal').modal('show');\n      });\n    };\n    ```", "```js\n    ProductResource.remove()\n    .done(function(){...})\n    .fail(function(response){\n      console.error(response);\n      alert(\"Error in the communication. Check the console!\");\n    });\n    ```", "```js\n    $(document).ajaxError(function(event,response) {\n      console.error(response);\n      alert(\"Error in the communication. Check the console!\");\n    });\n    ```", "```js\n$.mockjax({\n  url: /^\\/products\\/([\\d]+)$/,\n  type:\"DELETE\",\n  dataType: \"json\",\n  responseTime: 750,\n  status:404,\n  responseText: {\n    \"data\": {\n      text: \"Product deleted\"\n    }\n  }\n});\n```", "```js\n    _name = ko.observable(name).extend({\n      required: true,\n      minLength: 3,\n      pattern: {\n        message: 'Hey this doesn\\'t match my pattern',\n        params: '^[A-Za-z0-9 \\-]+$'\n      }\n    })\n    ```", "```js\n    _price = ko.observable(price).extend({\n      required: true,\n      number:true,\n      min: 1\n    }),\n    ```", "```js\n    _stock = ko.observable(stock).extend({\n      required: true,\n      min: 0,\n      max: 99,\n      number: true\n    })\n    ```", "```js\n    var errors = ko.validation.group([_name, _price, _stock]);\n    ```", "```js\n    <button type='submit' class='btn btn-default' data-bind='click:$parent.addProduct, enable:!errors().length'>\n      <i class='glyphicon glyphicon-plus-sign'></i> Add Product\n    </button>\n    ```", "```js\n    <button type='submit' class='btn btn-default' data-bind='enable:!errors().length, click: $parent.saveProduct'>\n      <i class='glyphicon glyphicon-plus-sign'></i> Save\n    </button>\n    ```", "```js\n    .validationMessage { color: Red; }\n    ```", "```js\n    var firstName = ko.observable('').extend({\n      required: true\n    });\n    var lastName = ko.observable('').extend({\n      required: true,\n      minLength: 3\n    });\n    var fullName = ko.computed(function(){\n      return firstName() + ' ' + lastName();\n    });\n    var address = ko.observable('').extend({\n      required: true,\n      minLength: 5\n    });\n    var email = ko.observable('').extend({\n      required: true,\n      email: true\n    });\n    var zipCode = ko.observable('').extend({\n      required: true,\n      pattern: {\n        message: 'Zip code should have 5 numbers',\n        params: '^[0-9]{5}$'\n      }\n    });\n    var country = ko.observable('');\n    var fullAddress = ko.computed(function(){\n        return address() + ' ' + zipCode() + ', ' + country();\n    });\n    var errors = ko.validation.group([firstName, lastName, address, email, zipCode]);\n    ```", "```js\n    <button class='btn btn-sm btn-primary' data-bind='click:finishOrder, enable:!customer.errors().length'>\n      Buy & finish\n    </button>\n    ```", "```js\n    <div class='modal-body'>\n      <h2>Your order has been completed!</h2>\n      <p>It will be sent to:</p>\n      <p>\n        <b>Name: </b><span data-bind='text: customer.fullName'></span><br/>\n        <b>Address: </b><span data-bind='text: customer.fullAddress'></span><br/>\n        <b>Email: </b><span data-bind='text: customer.email'></span><br/>\n      </p>\n    </div>\n    ```"]