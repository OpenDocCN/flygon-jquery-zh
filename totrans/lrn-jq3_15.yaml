- en: Appendix B – Quick Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix is intended to be a quick reference for the jQuery API, including
    its selector expressions and methods. A more detailed discussion of each method
    and selector is available on the jQuery documentation site, [http://api.jquery.com](http://api.jquery.com).
  prefs: []
  type: TYPE_NORMAL
- en: Selector expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The jQuery factory function `$()` is used to find elements on the page to work
    with. This function takes a string composed of CSS-like syntax, called a selector
    expression. Selector expressions are discussed in detail in Chapter 2, *Selecting
    Elements*.
  prefs: []
  type: TYPE_NORMAL
- en: Simple CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Selector** | **Matches** |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | All elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `#id` | The element with the given ID. |'
  prefs: []
  type: TYPE_TB
- en: '| `element` | All elements of the given type. |'
  prefs: []
  type: TYPE_TB
- en: '| `.class` | All elements with the given class. |'
  prefs: []
  type: TYPE_TB
- en: '| `a, b` | Elements that are matched by `a` or `b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `a b` | Elements `b` that are descendants of `a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `a > b` | Elements `b` that are children of `a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `a + b` | Elements `b` that immediately follow `a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `a ~ b` | Elements `b` that are siblings of `a` and follow `a`. |'
  prefs: []
  type: TYPE_TB
- en: Position among siblings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Selector** | **Matches** |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-child(index)` | Elements that are the `index` child of their parent
    element (1-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-child(even)` | Elements that are an even child of their parent element
    (1-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-child(odd)` | Elements that are an odd child of their parent element
    (1-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-child(formula)` | Elements that are the nth child of their parent element
    (1-based). Formulas are of the form `an+b` for integers `a` and `b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-last-child()` | The same as `:nth-child()`, but counting from the last
    element to the first. |'
  prefs: []
  type: TYPE_TB
- en: '| `:first-child` | Elements that are the first child of their parent. |'
  prefs: []
  type: TYPE_TB
- en: '| `:last-child` | Elements that are the last child of their parent. |'
  prefs: []
  type: TYPE_TB
- en: '| `:only-child` | Elements that are the only child of their parent. |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-of-type()` | The same as `:nth-child()`, but only counting elements
    of the same element name. |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-last-of-type()` | The same as `:nth-last-child()`, but only counting
    elements of the same element name. |'
  prefs: []
  type: TYPE_TB
- en: '| `:first-of-type` | Elements that are the first child of the same element
    name among their siblings. |'
  prefs: []
  type: TYPE_TB
- en: '| `:last-of-type` | Elements that are the last child of the same element name
    among their siblings. |'
  prefs: []
  type: TYPE_TB
- en: '| `:only-of-type()` | Elements that are the only child of the same element
    name among their siblings. |'
  prefs: []
  type: TYPE_TB
- en: Position among matched elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Selector** | **Matches** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `:first` | The first element in the result set. |'
  prefs: []
  type: TYPE_TB
- en: '| `:last` | The last element in the result set. |'
  prefs: []
  type: TYPE_TB
- en: '| `:not(a)` | All elements in the result set that are not matched by `a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:even` | Even elements in the result set (0-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:odd` | Odd elements in the result set (0-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:eq(index)` | A numbered element in the result set (0-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:gt(index)` | All elements in the result set after (greater than) the given
    index (0-based). |'
  prefs: []
  type: TYPE_TB
- en: '| `:lt(index)` | All elements in the result set before (less than) the given
    index (0-based). |'
  prefs: []
  type: TYPE_TB
- en: Attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Selector** | **Matches** |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr]` | Elements that have the attribute `attr`. |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr="value"]` | Elements whose `attr` attribute is `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr!="value"]` | Elements whose `attr` attribute is not `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr^="value"]` | Elements whose `attr` attribute begins with `value`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr$="value"]` | Elements whose `attr` attribute ends with `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr*="value"]` | Elements whose `attr` attribute contains the substring
    `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr~="value"]` | Elements whose `attr` attribute is a space-delimited
    set of strings, one of which is `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `[attr&#124;="value"]` | Elements whose `attr` attributes is either equal
    to `value` or begins with `value` followed by a hyphen. |'
  prefs: []
  type: TYPE_TB
- en: Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Selector** | **Matches** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `:input` | All `<input>`, `<select>`, `<textarea>`, and `<button>` elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:text` | The `<input>` elements with `type="text"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:password` | The `<input>` elements with `type="password"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:file` | The `<input>` elements with `type="file"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:radio` | The `<input>` elements with `type="radio"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:checkbox` | The `<input>` elements with `type="checkbox"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:submit` | The `<input>` elements with `type="submit"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:image` | The `<input>` elements with `type="image"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:reset` | The `<input>` elements with `type="reset"`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:button` | The `<input>` elements with `type="button"` and `<button>` elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:enabled` | Enabled form elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `:disabled` | Disabled form elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `:checked` | Checked checkboxes and radio buttons. |'
  prefs: []
  type: TYPE_TB
- en: '| `:selected` | Selected `<option>` elements. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Selector** | **Matches** |'
  prefs: []
  type: TYPE_TB
- en: '| `:root` | The root element of the document. |'
  prefs: []
  type: TYPE_TB
- en: '| `:header` | Header elements (for example, `<h1>`, `<h2>`). |'
  prefs: []
  type: TYPE_TB
- en: '| `:animated` | Elements with an animation in progress. |'
  prefs: []
  type: TYPE_TB
- en: '| `:contains(text)` | Elements containing the given text. |'
  prefs: []
  type: TYPE_TB
- en: '| `:empty` | Elements with no child nodes. |'
  prefs: []
  type: TYPE_TB
- en: '| `:has(a)` | Elements containing a descendant element matching `a`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:parent` | Elements that have child nodes. |'
  prefs: []
  type: TYPE_TB
- en: '| `:hidden` | Elements that are hidden, either through CSS or because they
    are `<input type="hidden" />`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:visible` | The inverse of `:hidden`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:focus` | The element that has the keyboard focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `:lang(language)` | Elements with the given language code (either due to
    a `lang` attribute on the element or an ancestor, or a `<meta>` declaration).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:target` | Whichever element is targeted by the URI''s fragment identifier,
    if any. |'
  prefs: []
  type: TYPE_TB
- en: DOM traversal methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating a jQuery object using `$()`, we can alter the set of matched
    elements we are working with by calling one of these DOM traversal methods. DOM
    traversal methods are discussed in detail in [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml),
    *Selecting Elements*.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  prefs: []
  type: TYPE_TB
- en: '| `.filter(selector)` | Selected elements that match the given selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.filter(callback)` | Selected elements for which the callback function returns
    `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.eq(index)` | The selected element at the given 0-based index. |'
  prefs: []
  type: TYPE_TB
- en: '| `.first()` | The first selected element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.last()` | The final selected element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.slice(start, [end])` | Selected elements in the given range of 0-based
    indices. |'
  prefs: []
  type: TYPE_TB
- en: '| `.not(selector)` | Selected elements that do not match the given selector.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.has(selector)` | Selected elements that have a descendant matching `selector`.
    |'
  prefs: []
  type: TYPE_TB
- en: Descendants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  prefs: []
  type: TYPE_TB
- en: '| `.find(selector)` | Descendant elements that match the selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.contents()` | Child nodes (including text nodes). |'
  prefs: []
  type: TYPE_TB
- en: '| `.children([selector])` | Child nodes, optionally filtered by a selector.
    |'
  prefs: []
  type: TYPE_TB
- en: Siblings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.next([selector])` | The sibling immediately following each selected element,
    optionally filtered by a selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.nextAll([selector])` | All siblings following each selected element, optionally
    filtered by a selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.nextUntil([selector], [filter])` | All siblings following each selected
    element up to and not including the first element matching `selector`, optionally
    filtered by an additional selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prev([selector])` | The sibling immediately preceding each selected element,
    optionally filtered by a selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prevAll([selector])` | All siblings preceding each selected element, optionally
    filtered by a selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prevUntil([selector], [filter])` | All siblings preceding each selected
    element up to and not including the first element matching `selector`, optionally
    filtered by an additional selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.siblings([selector])` | All siblings, optionally filtered by a selector.
    |'
  prefs: []
  type: TYPE_TB
- en: Ancestors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  prefs: []
  type: TYPE_TB
- en: '| `.parent([selector])` | The parent of each selected element, optionally filtered
    by a selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.parents([selector])` | All ancestors, optionally filtered by a selector.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.parentsUntil([selector], [filter])` | All ancestors of each selected element
    up to and not including the first element matching `selector`, optionally filtered
    by an additional selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.closest(selector)` | The first element that matches the selector, starting
    at the selected element and moving up through its ancestors in the DOM tree. |'
  prefs: []
  type: TYPE_TB
- en: '| `.offsetParent()` | The positioned parent, either relative or absolute, of
    the first selected element. |'
  prefs: []
  type: TYPE_TB
- en: Collection manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  prefs: []
  type: TYPE_TB
- en: '| `.add(selector)` | The selected elements, plus any additional elements that
    match the given selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `.addBack()` | The selected elements, plus the previous set of selected elements
    on the internal jQuery stack. |'
  prefs: []
  type: TYPE_TB
- en: '| `.end()` | The previous set of selected elements on the internal jQuery stack.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.map(callback)` | The result of the callback function when called on each
    selected element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.pushStack(elements)` | The specified elements. |'
  prefs: []
  type: TYPE_TB
- en: Working with selected elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Traversal method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.is(selector)` | Determines whether any matched element is matched by the
    given selector expression. |'
  prefs: []
  type: TYPE_TB
- en: '| `.index()` | Gets the index of the matched element in relation to its siblings.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.index(element)` | Gets the index of the given DOM node within the set of
    matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.contains(a, b)` | Determines whether DOM node `b` contains DOM node `a`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.each(callback)` | Iterates over the matched elements, executing `callback`
    for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.length` | Gets the number of matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `.get()` | Gets an array of DOM nodes corresponding to the matched elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.get(index)` | Gets the DOM node corresponding to the matched element at
    the given index. |'
  prefs: []
  type: TYPE_TB
- en: '| `.toArray()` | Gets an array of DOM nodes corresponding to the matched elements.
    |'
  prefs: []
  type: TYPE_TB
- en: Event methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To react to user behavior, we need to register our handlers using these event
    methods. Note that many DOM events only apply to certain element types; these
    subtleties are not covered here. Event methods are discussed in detail in [Chapter
    3](2036c6b0-e8c5-405a-b54b-b3f31eab404c.xhtml), *Handling Events*.
  prefs: []
  type: TYPE_NORMAL
- en: Binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Event method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.ready(handler)` | Binds `handler` to be called when the DOM and CSS are
    fully loaded. |'
  prefs: []
  type: TYPE_TB
- en: '| `.on(type, [selector], [data], handler)` | Binds `handler` to be called when
    the given type of event is sent to the element. If `selector` is provided, performs
    event delegation. |'
  prefs: []
  type: TYPE_TB
- en: '| `.on(events, [selector], [data])` | Binds multiple handlers for events as
    specified in the `events` object parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `.off(type, [selector], [handler])` | Removes bindings on the element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.one(type, [data], handler)` | Binds `handler` to be called when the given
    type of event is sent to the element. Removes the binding when the handler is
    called. |'
  prefs: []
  type: TYPE_TB
- en: Shorthand binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Event method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.blur(handler)` | Binds `handler` to be called when the element loses keyboard
    focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.change(handler)` | Binds `handler` to be called when the element''s value
    changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `.click(handler)` | Binds `handler` to be called when the element is clicked.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.dblclick(handler)` | Binds `handler` to be called when the element is double-clicked.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.focus(handler)` | Binds `handler` to be called when the element gains keyboard
    focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.focusin(handler)` | Binds `handler` to be called when the element, or a
    descendant, gains keyboard focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.focusout(handler)` | Binds `handler` to be called when the element, or
    a descendant, loses keyboard focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.keydown(handler)` | Binds `handler` to be called when a key is pressed
    and the element has keyboard focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.keypress(handler)` | Binds `handler` to be called when a keystroke occurs
    and the element has keyboard focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.keyup(handler)` | Binds `handler` to be called when a key is released and
    the element has keyboard focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mousedown(handler)` | Binds `handler` to be called when the mouse button
    is pressed within the element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mouseenter(handler)` | Binds `handler` to be called when the mouse pointer
    enters the element. Not affected by event bubbling. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mouseleave(handler)` | Binds `handler` to be called when the mouse pointer
    leaves the element. Not affected by event bubbling. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mousemove(handler)` | Binds `handler` to be called when the mouse pointer
    moves within the element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mouseout(handler)` | Binds `handler` to be called when the mouse pointer
    leaves the element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mouseover(handler)` | Binds `handler` to be called when the mouse pointer
    enters the element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.mouseup(handler)` | Binds `handler` to be called when the mouse button
    is released within the element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.resize(handler)` | Binds `handler` to be called when the element is resized.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.scroll(handler)` | Binds `handler` to be called when the element''s scroll
    position changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `.select(handler)` | Binds `handler` to be called when text in the element
    is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `.submit(handler)` | Binds `handler` to be called when the form element is
    submitted. |'
  prefs: []
  type: TYPE_TB
- en: '| `.hover(enter, leave)` | Binds `enter` to be called when the mouse enters
    the element, and `leave` to be called when the mouse leaves it. |'
  prefs: []
  type: TYPE_TB
- en: Triggering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Event method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.trigger(type, [data])` | Triggers handlers for the event on the element
    and executes the default action for the event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.triggerHandler(type, [data])` | Triggers handlers for the event on the
    element without executing any default actions. |'
  prefs: []
  type: TYPE_TB
- en: Shorthand triggering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Event method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.blur()` | Triggers the `blur` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.change()` | Triggers the `change` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.click()` | Triggers the `click` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.dblclick()` | Triggers the `dblclick` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.error()` | Triggers the `error` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.focus()` | Triggers the `focus` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.keydown()` | Triggers the `keydown` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.keypress()` | Triggers the `keypress` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.keyup()` | Triggers the `keyup` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.select()` | Triggers the `select` event. |'
  prefs: []
  type: TYPE_TB
- en: '| `.submit()` | Triggers the `submit` event. |'
  prefs: []
  type: TYPE_TB
- en: Utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Event method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.proxy(fn, context)` | Creates a new function that executes with the given
    context. |'
  prefs: []
  type: TYPE_TB
- en: Effect methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These effect methods may be used to perform animations on DOM elements. The
    effect methods are discussed in detail in [Chapter 4](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml),
    *Styling and Animating*.
  prefs: []
  type: TYPE_NORMAL
- en: Predefined effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Effect method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.show()` | Displays the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `.hide()` | Hides the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `.show(speed, [callback])` | Displays the matched elements by animating `height`,
    `width`, and `opacity`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.hide(speed, [callback])` | Hides the matched elements by animating `height`,
    `width`, and `opacity`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.slideDown([speed], [callback])` | Displays the matched elements with a
    sliding motion. |'
  prefs: []
  type: TYPE_TB
- en: '| `.slideUp([speed], [callback])` | Hides the matched elements with a sliding
    motion. |'
  prefs: []
  type: TYPE_TB
- en: '| `.slideToggle([speed], [callback])` | Displays or hides the matched elements
    with a sliding motion. |'
  prefs: []
  type: TYPE_TB
- en: '| `.fadeIn([speed], [callback])` | Displays the matched elements by fading
    them to opaque. |'
  prefs: []
  type: TYPE_TB
- en: '| `.fadeOut([speed], [callback])` | Hides the matched elements by fading them
    to transparent. |'
  prefs: []
  type: TYPE_TB
- en: '| `.fadeToggle([speed], [callback])` | Displays or hides the matched elements
    with a fading animation. |'
  prefs: []
  type: TYPE_TB
- en: '| `.fadeTo(speed, opacity, [callback])` | Adjusts the opacity of the matched
    elements. |'
  prefs: []
  type: TYPE_TB
- en: Custom animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Effect method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.animate(properties, [speed], [easing], [callback])` | Performs a custom
    animation of the specified CSS properties. |'
  prefs: []
  type: TYPE_TB
- en: '| `.animate(properties, options)` | A lower-level interface to `.animate()`,
    allowing control over the animation queue. |'
  prefs: []
  type: TYPE_TB
- en: Queue manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Effect method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.queue([queueName])` | Retrieves the queue of functions on the first matched
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.queue([queueName], callback)` | Adds `callback` to the end of the queue.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.queue([queueName], newQueue)` | Replaces the queue with a new one. |'
  prefs: []
  type: TYPE_TB
- en: '| `.dequeue([queueName])` | Executes the next function on the queue. |'
  prefs: []
  type: TYPE_TB
- en: '| `.clearQueue([queueName])` | Empties the queue of all pending functions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.stop([clearQueue], [jumpToEnd])` | Stops the currently running animation,
    then starts queued animations, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| `.finish([queueName])` | Stops the currently running animation and immediately
    advances all queued animations to their target values. |'
  prefs: []
  type: TYPE_TB
- en: '| `.delay(duration, [queueName])` | Waits `duration` milliseconds before executing
    the next item in the queue. |'
  prefs: []
  type: TYPE_TB
- en: '| `.promise([queueName], [target])` | Returns a promise object to be resolved
    once all queued actions on the collection have finished. |'
  prefs: []
  type: TYPE_TB
- en: DOM manipulation methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DOM manipulation methods are discussed in detail in [Chapter 5](fa35636a-37d4-49b9-ba72-aa6596bab015.xhtml),
    *Manipulating the DOM*.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes and properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.attr(key)` | Gets the attribute named `key`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.attr(key, value)` | Sets the attribute named `key` to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.attr(key, fn)` | Sets the attribute named `key` to the result of `fn` (called
    separately on each matched element). |'
  prefs: []
  type: TYPE_TB
- en: '| `.attr(obj)` | Sets attribute values given as key-value pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| `.removeAttr(key)` | Removes the attribute named `key`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prop(key)` | Gets the property named `key`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prop(key, value)` | Sets the property named `key` to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prop(key, fn)` | Sets the property named `key` to the result of `fn` (called
    separately on each matched element). |'
  prefs: []
  type: TYPE_TB
- en: '| `.prop(obj)` | Sets property values given as key-value pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| `.removeProp(key)` | Removes the property named `key`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.addClass(class)` | Adds the given class to each matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.removeClass(class)` | Removes the given class from each matched element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.toggleClass(class)` | Removes the given class if present, and adds it if
    not, for each matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.hasClass(class)` | Returns `true` if any of the matched elements has the
    given class. |'
  prefs: []
  type: TYPE_TB
- en: '| `.val()` | Gets the value attribute of the first matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.val(value)` | Sets the value attribute of each element to `value`. |'
  prefs: []
  type: TYPE_TB
- en: Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.html()` | Gets the HTML content of the first matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.html(value)` | Sets the HTML content of each matched element to value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.text()` | Gets the textual content of all matched elements as a single
    string. |'
  prefs: []
  type: TYPE_TB
- en: '| `.text(value)` | Sets the textual content of each matched element to `value`.
    |'
  prefs: []
  type: TYPE_TB
- en: CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.css(key)` | Gets the CSS attribute named `key`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.css(key, value)` | Sets the CSS attribute named `key` to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.css(obj)` | Sets CSS attribute values given as key-value pairs. |'
  prefs: []
  type: TYPE_TB
- en: Dimensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.offset()` | Gets the top and left pixel coordinates of the first matched
    element, relative to the viewport. |'
  prefs: []
  type: TYPE_TB
- en: '| `.position()` | Gets the top and left pixel coordinates of the first matched
    element, relative to the element returned by `.offsetParent()`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.scrollTop()` | Gets the vertical scroll position of the first matched element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.scrollTop(value)` | Sets the vertical scroll position of all matched elements
    to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.scrollLeft()` | Gets the horizontal scroll position of the first matched
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.scrollLeft(value)` | Sets the horizontal scroll position of all matched
    elements to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.height()` | Gets the height of the first matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.height(value)` | Sets the height of all matched elements to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.width()` | Gets the width of the first matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.width(value)` | Sets the width of all matched elements to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.innerHeight()` | Gets the height of the first matched element, including
    padding, but not border. |'
  prefs: []
  type: TYPE_TB
- en: '| `.innerWidth()` | Gets the width of the first matched element, including
    padding, but not border. |'
  prefs: []
  type: TYPE_TB
- en: '| `.outerHeight(includeMargin)` | Gets the height of the first matched element,
    including padding, border, and optional margin. |'
  prefs: []
  type: TYPE_TB
- en: '| `.outerWidth(includeMargin)` | Gets the width of the first matched element,
    including padding, border, and optional margin. |'
  prefs: []
  type: TYPE_TB
- en: Insertion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.append(content)` | Inserts `content` at the end of the interior of each
    matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.appendTo(selector)` | Inserts the matched elements at the end of the interior
    of the elements matched by `selector`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prepend(content)` | Inserts `content` at the beginning of the interior
    of each matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.prependTo(selector)` | Inserts the matched elements at the beginning of
    the interior of the elements matched by `selector`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.after(content)` | Inserts `content` after each matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.insertAfter(selector)` | Inserts the matched elements after each of the
    elements matched by `selector`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.before(content)` | Inserts `content` before each matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.insertBefore(selector)` | Inserts the matched elements before each of the
    elements matched by `selector`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.wrap(content)` | Wraps each of the matched elements within `content`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.wrapAll(content)` | Wraps all of the matched elements as a single unit
    within `content`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.wrapInner(content)` | Wraps the interior contents of each of the matched
    elements within `content`. |'
  prefs: []
  type: TYPE_TB
- en: Replacement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.replaceWith(content)` | Replaces the matched elements with `content`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.replaceAll(selector)` | Replaces the elements matched by `selector` with
    the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: Removal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.empty()` | Removes the child nodes of each matched element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.remove([selector])` | Removes the matched nodes (optionally filtered by
    `selector`) from the DOM. |'
  prefs: []
  type: TYPE_TB
- en: '| `.detach([selector])` | Removes the matched nodes (optionally filtered by
    `selector`) from the DOM, preserving jQuery data attached to them. |'
  prefs: []
  type: TYPE_TB
- en: '| `.unwrap()` | Removes the element''s parent. |'
  prefs: []
  type: TYPE_TB
- en: Copying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.clone([withHandlers], [deepWithHandlers])` | Makes a copy of all matched
    elements, optionally also copying event handlers. |'
  prefs: []
  type: TYPE_TB
- en: Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Manipulation method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.data(key)` | Gets the data item named `key` associated with the first matched
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `.data(key, value)` | Sets the data item named `key` associated with each
    matched element to `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.removeData(key)` | Removes the data item named `key` associated with each
    matched element. |'
  prefs: []
  type: TYPE_TB
- en: Ajax methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can retrieve information from the server without requiring a page refresh
    by calling one of these Ajax methods. Ajax methods are discussed in detail in
    [Chapter 6](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml), *Sending Data with Ajax*.
  prefs: []
  type: TYPE_NORMAL
- en: Issuing requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Ajax method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$.ajax([url], options)` | Makes an Ajax request using the provided set of
    options. This is a low-level method that is often called via other convenience
    methods. |'
  prefs: []
  type: TYPE_TB
- en: '| `.load(url, [data], [callback])` | Makes an Ajax request to `url` and places
    the response into the matched elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.get(url, [data], [callback], [returnType])` | Makes an Ajax request to
    `url` using the `GET` method. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.getJSON(url, [data], [callback])` | Makes an Ajax request to `url`, interpreting
    the response as a JSON data structure. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.getScript(url, [callback])` | Makes an Ajax request to `url`, executing
    the response as JavaScript. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.post(url, [data], [callback], [returnType])` | Makes an Ajax request to
    `url` using the `POST` method. |'
  prefs: []
  type: TYPE_TB
- en: Request monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Ajax method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.ajaxComplete(handler)` | Binds `handler` to be called when any Ajax transaction
    completes. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ajaxError(handler)` | Binds `handler` to be called when any Ajax transaction
    completes with an error. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ajaxSend(handler)` | Binds `handler` to be called when any Ajax transaction
    begins. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ajaxStart(handler)` | Binds `handler` to be called when any Ajax transaction
    begins, and no others are active. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ajaxStop(handler)` | Binds `handler` to be called when any Ajax transaction
    ends, and no others are still active. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ajaxSuccess(handler)` | Binds `handler` to be called when any Ajax transaction
    completes successfully. |'
  prefs: []
  type: TYPE_TB
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Ajax method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.ajaxSetup(options)` | Sets default options for all subsequent Ajax transactions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$.ajaxPrefilter([dataTypes], handler)` | Modifies the options on each Ajax
    request before it is processed by `$.ajax()`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.ajaxTransport(transportFunction)` | Defines a new transport mechanism
    for Ajax transactions. |'
  prefs: []
  type: TYPE_TB
- en: Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Ajax method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.serialize()` | Encodes the values of a set of form controls into a query
    string. |'
  prefs: []
  type: TYPE_TB
- en: '| `.serializeArray()` | Encodes the values of a set of form controls into a
    JavaScript data structure. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.param(obj)` | Encodes an arbitrary object of key-value pairs into a query
    string. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.globalEval(code)` | Evaluates the given JavaScript string in the global
    context. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.parseJSON(json)` | Converts the given JSON string into a JavaScript object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$.parseXML(xml)` | Converts the given XML string into an XML document. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.parseHTML(html)` | Converts the given HTML string into a set of DOM elements.
    |'
  prefs: []
  type: TYPE_TB
- en: Deferred objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deferred objects and their promises allow us to react to the completion of long-running
    tasks with a convenient syntax. They are discussed in detail in [Chapter 11](18ed1c5d-dfac-4361-b647-0cb63f5dd58b.xhtml),
    *Advanced Effects*.
  prefs: []
  type: TYPE_NORMAL
- en: Object creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.Deferred([setupFunction])` | Returns a new deferred object. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.when(deferreds)` | Returns a promise object to be resolved when the given
    deferred objects are resolved. |'
  prefs: []
  type: TYPE_TB
- en: Methods of deferred objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.resolve([args])` | Sets the state of the object to resolved. |'
  prefs: []
  type: TYPE_TB
- en: '| `.resolveWith(context, [args])` | Sets the state of the object to resolved
    while making the keyword `this` refer to `context` within callbacks. |'
  prefs: []
  type: TYPE_TB
- en: '| `.reject([args])` | Sets the state of the object to rejected. |'
  prefs: []
  type: TYPE_TB
- en: '| `.rejectWith(context, [args])` | Sets the state of the object to rejected
    while making the keyword `this` refer to `context` within callbacks. |'
  prefs: []
  type: TYPE_TB
- en: '| `.notify([args])` | Executes any progress callbacks. |'
  prefs: []
  type: TYPE_TB
- en: '| `.notifyWith(context, [args])` | Executes any progress callbacks while making
    the keyword `this` refer to `context`. |'
  prefs: []
  type: TYPE_TB
- en: '| `.promise([target])` | Returns a promise object corresponding to this deferred
    object. |'
  prefs: []
  type: TYPE_TB
- en: Methods of promise objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `.done(callback)` | Executes `callback` when the object is resolved. |'
  prefs: []
  type: TYPE_TB
- en: '| `.fail(callback)` | Executes `callback` when the object is rejected. |'
  prefs: []
  type: TYPE_TB
- en: '| `.catch(callback)` | Executes **`callback` **when the object is rejected.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.always(callback)` | Executes `callback` when the object is resolved or
    rejected. |'
  prefs: []
  type: TYPE_TB
- en: '| `.then(doneCallbacks, failCallbacks)` | Executes `doneCallbacks` when the
    object is resolved, or `failCallbacks` when the object is rejected. |'
  prefs: []
  type: TYPE_TB
- en: '| `.progress(callback)` | Executes `callback` each time the object receives
    a progress notification. |'
  prefs: []
  type: TYPE_TB
- en: '| `.state()` | Returns `''pending''`, `''resolved''`, or `''rejected''` depending
    on the current state. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous properties and functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These utility methods do not fit neatly into the previous categories, but are
    often very useful when writing scripts using jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Properties of the jQuery object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Property** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.ready` | A promise instance that''s resolved as soon as the DOM is ready.
    |'
  prefs: []
  type: TYPE_TB
- en: Arrays and objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.each(collection, callback)` | Iterates over `collection`, executing `callback`
    for each item. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.extend(target, addition, ...)` | Modifies the object `target` by adding
    properties from the other supplied objects. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.grep(array, callback, [invert])` | Filters `array` by using `callback`
    as a test. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.makeArray(object)` | Converts `object` into an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.map(array, callback)` | Constructs a new array consisting of the result
    of `callback` being called on each item. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.inArray(value, array)` | Determines whether `value` is in `array`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.merge(array1, array2)` | Combines the contents of `array1` and `array2`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$.unique(array)` | Removes any duplicate DOM elements from `array`. |'
  prefs: []
  type: TYPE_TB
- en: Object introspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isArray(object)` | Determines whether `object` is a true JavaScript array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isEmptyObject(object)` | Determines whether `object` is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isFunction(object)` | Determines whether `object` is a function. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isPlainObject(object)` | Determines whether `object` was created as an
    object literal or with `new Object`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isNumeric(object)` | Determines whether `object` is a numeric scalar value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isWindow(object)` | Determines whether `object` represents a browser window.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$.isXMLDoc(object)` | Determines whether `object` is an XML node. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.type(object)` | Gets the JavaScript class of `object`. |'
  prefs: []
  type: TYPE_TB
- en: Other
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$.trim(string)` | Removes whitespace from the ends of `string`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.noConflict([removeAll])` | Reverts `$` to its pre-jQuery definition. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.noop()` | A function that does nothing. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.now()` | The current time in milliseconds since the epoch. |'
  prefs: []
  type: TYPE_TB
- en: '| `$.holdReady(hold)` | Stops the `ready` event from being triggered, or releases
    this hold. |'
  prefs: []
  type: TYPE_TB
