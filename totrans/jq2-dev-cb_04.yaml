- en: Chapter 4. Adding Attractive Visuals with jQuery Effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Sliding page elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding and showing elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaining effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic photo gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a blinking button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing elements with effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show you how to add simple effects to your interfaces to increase
    the overall aesthetics and user experience of your website. Adding basic effects
    to elements can have a huge impact on user's impressions. jQuery provides functions
    that allow the developer to quickly add effects such as slide, fade, hide, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Sliding page elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to slide page elements allows the developer to create an array of
    interfaces such as the accordion. This recipe will show you how to apply the slide
    effect to a range of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using your favorite text editor or IDE, create a blank HTML page in an easily
    accessible location and save this file as `recipe-1.html`. Ensure that you have
    the latest version of jQuery downloaded at the same location as this HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to use jQuery to slide page elements by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following HTML code to `recipe-1.html`. Be sure to change the source
    location of the jQuery library, pointing it to where the latest version of jQuery
    is downloaded and placed on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may have noticed that, in addition to the jQuery library file, we also
    included a second JavaScript file named `recipe-1.js`. Create this JavaScript
    file and save it in the same directory as the HTML file. Add the following JavaScript
    code to the `recipe-1.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Along with these two JavaScript files, we have also included a CSS file to
    add some style to our HTML elements. Create `recipe-1.css` within the same directory
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-1.html` in a web browser and you should see a web page similar
    to the following screenshot:![How to do it…](img/0896OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Slide Up** button to see the slide up effect applied to each
    of the colored box elements at different speeds; then click on **Slide Down**
    to see the reverse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's understand the steps performed previously in detail.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML file that we created for this recipe simply creates four boxes using
    div elements and then provides two buttons that can be used in conjunction with
    jQuery to trigger the element effects.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We wrap all our JavaScript code within `$(function(){});`. This will ensure
    our code is executed on page load. Inside the function, we attach a click event
    to each of the buttons as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `.click()` function allows us to provide a set of code to be executed when
    the corresponding button has been clicked by the user. Inside the callback function
    for each of the `.click()` methods, we select the div element of each box and
    use the jQuery `.slideUp()` and `.slideDown()` functions, depending on which button
    has been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery slide functions allow you to specify a range of parameters. In the
    preceding example, we have specified the effect duration in milliseconds. This
    allows us to control the time taken for each of the box elements to slide up or
    down, providing a waterfall effect.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CSS file we created adds style and positions each of the HTML elements,
    allowing us to best showcase the jQuery slide functionality. It allows us to change
    the background color of each of the boxes and allows us to center-align the interface.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, if you click on both the **Slide Up** and **Slide Down**
    buttons multiple times, you may notice some flicker between the different box
    elements. This flicker occurs because when the slide up effect is complete, the
    CSS `display` property of the box element is set to `none`. This means that not
    only will the element be invisible but it also will not affect any neighboring
    elements in terms of position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, the element that is set to float left will have room to move further
    left as the box element that has completed its slide up effect is no longer in
    the way. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/0896OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here you can see the second, green box element has its display value set to
    `none`, causing the other box elements to float further to the left. The display
    may flicker more when the slide animations have been triggered multiple times
    and elements have to shift to the left as additional elements become invisible.
    Issues such as this can be prevented by not allowing the trigger to trigger the
    effects multiple times. A simple solution to this has been explained in the *Creating
    a basic photo gallery* recipe later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Fading elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hiding and showing elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a basic photo gallery*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding and showing elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery includes functions that will allow you to simply hide and show elements,
    although you can use these functions in conjunction with other effects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new HTML file named `recipe-2.html` and save it to the same folder
    as your jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Understand how you can use jQuery to easily hide and show elements in the DOM
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In `recipe-2.html`, add the following HTML code. Ensure that the reference to
    the jQuery library is pointing to the correct location and filename of your downloaded
    version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file named `recipe-2.js` and save it within the same directory
    as the HTML file you have just created. Add the following JavaScript code to this
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening `recipe-2.html` in a web browser will present you with a very basic
    web page that has two buttons and some text. Clicking on the **Show** and **Hide**
    buttons will perform the associated effect on the text, demonstrating how simple
    it is to show and hide elements with jQuery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's understand the steps performed previously in detail.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML code used in this recipe is very basic and needs little explanation.
    The HTML code creates a web page with two buttons. Each has its own ID—`show`
    and `hide`. There is also a single paragraph element with a `text` class. The
    IDs will be used by jQuery to listen a click event and perform effects on the
    paragraph element.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to the previous recipe, we attach a click event handler to each of
    the buttons. This allows us to perform the effects based on which button has been
    clicked. To do this, we use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To perform the show and hide effects, we use the corresponding jQuery functions,
    `show()` and `hide()`. These jQuery functions simply toggle the display property
    of the selected element (in this case, the paragraph element is of the `text`
    class). The `display` property is set to `none` to hide the element; it is set
    to block to show the element.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are additional benefits to using jQuery's `show()` and `hide()` functions.
    Using jQuery, you can show and hide elements based on their inner HTML code. You
    can also use the `show()` and `hide()` functions in conjunction with other jQuery
    effects or animations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Fading elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sliding page elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If showing or hiding elements is not enough, jQuery provides the ability to
    fade HTML elements in and out. This recipe utilizes the jQuery's fade-in and fade-out
    functionalities to add more effect when choosing to display or hide elements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML file named `recipe-3.html` and save it in the same directory
    as the latest version of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use jQuery to fade DOM elements in and out by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-3.html`, ensuring the reference to the
    jQuery library is correct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file in the same directory. Save it as `recipe-3.css` and add
    the following code to style the HTML page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file named `recipe-3.js` and add the following jQuery code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-3.html` in a web browser and you will be presented with a web page
    similar to the following screenshot:![How to do it…](img/0896OS_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Entering some text into the **Add Item** textbox and clicking on the **Add**
    button will append the inputted text to a list using the jQuery fade effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's understand the steps performed previously in detail.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML code creates a simple interface that includes the text input with a
    button and an empty ordered list element, which can then be populated with jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A CSS file was added to position and style the simple user interface so we could
    better demonstrate the fade effect with jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, the jQuery code attaches a click event to the **Add** button
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We add the following code to this callback function to provide the desired
    effect of adding the input text to the list using the `fadeIn()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This code creates the `item` variable and assigns the value of the input box
    to it using `$('#new-item').val()`. We then check to see if the length of this
    value is greater than zero, as we do not want to add blank items to the list.
    We are able to check the length of a string with JavaScript by simply using `variablename.length`
    (in this example, `item.length`).
  prefs: []
  type: TYPE_NORMAL
- en: Within this `if` statement, we create another variable named `newItem`. We assign
    to it a newly created HTML list item element with the value from the input box
    using the `item` variable. We wrap the list item within jQuery's selector (`$()`),
    allowing us to use the `fadeIn()` function on this DOM element.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a list item, we can append it to the ordered list element with
    the class name `list` by using the jQuery-provided `append()` function. This will
    add the newly created DOM element as the last child of the ordered list. Because
    we used the `fadeIn()` function on this DOM element, it will firstly appear hidden
    and then fade in, giving us our desired effect.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within this recipe, we used the `fadeIn()` function, which allows us to take
    an element from invisible to visible with the fade effect. jQuery also provides
    us with a `fadeOut()` function that offers the reverse functionality. Both of
    these functions take a range of parameters, allowing the developer to adjust the
    behavior. The primary parameter is duration, which allows us to specify how long
    it takes the element to fade in or out in milliseconds. Read about the available
    options for these functions at [http://api.jquery.com/fadeIn/](http://api.jquery.com/fadeIn/).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, jQuery provides a `fadeTo()` function, allowing you to adjust
    the opacity of an element if you do not want to completely hide or show it once
    the effect has completed. Read more about this functionality at [http://api.jquery.com/fadeTo/](http://api.jquery.com/fadeTo/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Removing elements with effects*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a basic photo gallery*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a blinking button*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of the jQuery effects have opposing functions, such as `hide()` and `show()`
    and `fadeIn()` and `fadeOut()`. So far, the recipes in this chapter have handled
    each of these functions separately; for example, one button to show and another
    to hide. For some of these functions, jQuery provides us with the ability to be
    able to toggle these opposing effects. This is beneficial because we do not need
    to deal with each case separately or decide which of the two we need to use. This
    recipe will look at the toggle functions and show you how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your favorite text editor or IDE, create a blank HTML file named `recipe-4.html`
    and save it in the same directory as your jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-4.html` to create a basic web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may have noticed that we are including a JavaScript file in this HTML page.
    Create this JavaScript file in the same directory as `recipe-4.html` and save
    it as `recipe-4.js`. Add the following jQuery code to this file to attach click
    event handlers to the button elements within the HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-4.html` in a web browser and you should see a web page similar
    to the following screenshot:![How to do it…](img/0896OS_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on one of the buttons will toggle the associated effect and apply it
    to the paragraph element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's understand the steps performed previously in detail.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML code in this recipe creates a paragraph element with some text. This
    element has the class name of `text`, which allows us to select this element and
    perform a range of effects. In addition to this paragraph element, the HTML provides
    three different buttons. Each button has a different class name, allowing us to
    detect each individual click with jQuery and perform different effects based on
    the clicked button.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The jQuery code in this recipe is very basic. On page load, we attach a click
    event handler to each of the buttons. Each click event handler has a different
    toggle function inside its callback function.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery's toggle functions determine the state of the selected element and then
    perform the opposing effect. This means that we do not need to program this logic
    into our application and can offload it to jQuery. By using the `toggleFade()`
    function, we can use one line of code to fade the paragraph element in or out
    without having to code for each scenario, as we have done in previous recipes.
    The same goes for the `slideToggle()` method, which performs the slide animation.
    Finally, we can use the `toggle` method, which simply hides or shows the selected
    element.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like other jQuery effect functions, the toggle functions take a set of optional
    parameters. The main parameter is the effect duration. The following code will
    force the slide effect to last for 1000 milliseconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can read about the other available options as part of the jQuery API documentation,
    which can be found at [http://api.jquery.com/slideToggle/](http://api.jquery.com/slideToggle/).
  prefs: []
  type: TYPE_NORMAL
- en: Stopping effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your application grows and you begin to have more complex effects, you may
    want to be able to stop these effects and transitions. This could be due to a
    user action that negates the requirement for a current effect or some other form
    of event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML document named `recipe-5.html` and save it to the same directory
    as the latest version of the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn to stop jQuery effects by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-5.html` to create a basic web page that
    will allow us to demonstrate how to stop effects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To allow us to better demonstrate the jQuery effects, we need to add some CSS
    code to style and position the HTML elements in `recipe-5.html`. Create a CSS
    file named `recipe-5.css` in the same directory and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start and stop the jQuery effects, create a JavaScript file named `recipe-5.js`
    and save it in the same directory as the HTML and CSS files. Add the following
    jQuery code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-5.html` in a web browser and you will be presented with a web page
    similar to the following screenshot:![How to do it…](img/0896OS_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the **Slide** button will begin the effect, and the green box division
    element will start to slide upward for 1000 milliseconds. Clicking on the **Stop**
    button will stop the effect at the point that you clicked it, and the **Finish**
    button will instantly complete the effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's understand the steps performed previously in detail.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our simple HTML for this recipe provides us with a division element to which
    jQuery can apply effects, some buttons that can be used to trigger jQuery code,
    and a list that we can use to output some information about the executed jQuery
    code.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CSS code that was included into the HTML page allows us to position each
    of the HTML elements in a way that allows us to easily demonstrate the effects
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We attach three different click event handlers to the three buttons in our
    HTML page, selecting them by using their IDs: `slide`, `stop`, and `finish`. Within
    the callback functions to these event handlers, we start the slide effect using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We have used the `slideToggle()` function to start either the slide down or
    slide up effect based on whether the `slideMe` division element is currently visible
    or not. We provide the `slideToggle()` function with two parameters. The first
    parameter is the duration in which we wish the slide effect to take effect. The
    second parameter is a callback function, which will be executed once the animation
    has been finished.
  prefs: []
  type: TYPE_NORMAL
- en: Inside this callback function, we append a list item to the unordered list element
    with the class name `output`. This means that when the slide effect has fully
    completed, a new list item will be visible within the `output` list. We have done
    this to demonstrate the difference between stopping an effect and finishing one,
    which is described later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other two event handlers, described in the following code snippet, select
    the `slideMe` division element the same way as the previously mentioned event
    handler does, except these do not start an effect but stop the current one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `stop()` function will halt any currently running effects on the selected
    element. If the slide-up effect was half-way through completion and you clicked
    on **Stop**, you will see half of the green `slideMe` division element. The `stop()`
    function does not complete the slide effect, and therefore the `slideToggle()`
    callback function will not be executed and a list item will not be added to the
    output list. On the contrary, the `finish()` function instantly completes any
    effects being executed on the selected element. This means that if the slide-up
    effect was half-way through completion and you clicked on **Finish**, the `slideMe`
    division element will instantly become invisible and then a new item added to
    the output list, reading **Slide effect completed**. If there is code inside an
    effects callback function that is vital to your application, you can use `finish()`
    to ensure it is executed. Alternatively, you may not want to execute this code
    and/or want to visibly stop the effect; in this case, you would use `stop()`.
  prefs: []
  type: TYPE_NORMAL
- en: Chaining effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery allows us to chain the different effect functions onto a single selected
    element. This allows us to easily perform multiple effects in a sequential order.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn to use a powerful feature of jQuery to write better code by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank HTML file named `recipe-6.html` and save it to an easily accessible
    location on your computer. Add the following HTML code to this file, ensuring
    to update the reference to the jQuery library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file named `recipe-6.css` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `recipe-6.html` file in a web page and click on the **Start** button.
    The red-colored box will perform a range of effects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe provides a very simple example as to how you can chain the different
    effect functions that jQuery provides. In this example, we perform `fadeOut()`,
    `fadeIn`, `slideUp()`, `slideDown()`, and two `fadeTo()` effects on the box div
    element. Each of these effects will be executed in turn due to the following code,
    which is placed within the click event handler callback function for the `start`
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `fadeTo()` functions, which animate and alter the selected elements' opacity,
    have been provided with two parameters. The first parameter is the duration of
    the effect in milliseconds and the second is the opacity the effect should finish
    on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a basic photo gallery*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic photo gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most people are aware that there are many jQuery photo gallery implementations
    available on the Web; many as jQuery plugins, which allow for quick implementation.
    There are benefits to taking the time to learn how to create your own. You will
    gain a deep understanding of how some of these plugins work, making it easier
    for you to customize them to better suit your needs. You will also learn more
    great features of jQuery and how to implement some of the skills you have learned
    earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will first need a blank HTML file named `recipe-7.html` saved in the same
    directory as the latest version of jQuery. To create an image gallery, we are
    also going to need some images. Find a variety of images freely available on the
    Internet for use in this recipe. Save at least eight images within a folder named
    `images` in the same directory as the `recipe-7.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to create an attractive photo gallery from scratch with jQuery by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to `recipe-7.html` to create our web page and image
    gallery HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the source (`src="img/code>) for each image inside the frame division
    element to point to the images you have just added.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Create a CSS file in the same directory as `recipe-7.html` named `recipe-7.css`
    and add the following CSS code to style our gallery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Create a JavaScript file named `recipe-7.js` and add the following JavaScript
    code to ignite our gallery into action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Open `recipe-7.html` in a web browser and you will be presented with a jQuery
    image gallery similar to the following screenshot:![How to do it…](img/0896OS_04_06.jpg)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Selecting the left and right arrows will allow you to scroll through the photos,
    and clicking on a photo will show the larger version in the main frame.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`How it works…`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Now, let us understand the steps performed previously in detail.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTML`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Thanks to jQuery, we are able to create an attractive and functional gallery
    with a minimal amount of HTML code. In addition to the basic HTML document structure,
    we define a division element with the class `gallery`. The following is the division
    element code that the jQuery will use to base most of its DOM interactions:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`Additionally, we also use the HTML5 data attribute to define the thumbnail
    width. Our jQuery code will use this value to size the thumbnails.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Using the following HTML code, we also create a division element with the
    class name of `frame` whose siblings are the images that we want to display within
    our gallery:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`Finally, in our HTML, we create a left and right arrow, which will be used
    in conjunction with jQuery to scroll through the image thumbnails. We also create
    a div element with the class `thumbs`, which will be populated with the thumbnail
    images using the following jQuery code:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`CSS`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Most of the CSS code used in this recipe is very basic and simply places elements
    in the appropriate place on the page. The main gallery division element is set
    to 600 pixels in width and to be centered on the screen. To allow us to place
    the left and right arrows outside the gallery frame, we set their position to
    absolute and use negative margins to push them further left and right.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`The main thumbnail scrolling section has its `overflow` value set to `hidden`,
    preventing the bulk of the thumbnails from being displayed. This allows us to
    scroll these elements into view using jQuery. The thumbnails themselves have their
    `display` value set to `inline-block`, allowing them to stack next to each other
    in a single line, left to right.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`For additional effect, we have also used some basic CSS animations. The thumbnails
    have their opacity set to `0.5` so that they do not become the prominent focus
    of the application. CSS transitions are used to create a fade in effect when the
    user hovers over the thumbnails, as follows:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`In addition to the official CSS3 `transition` property, we are also using
    the browser-specific alternatives to ensure the CSS animations work in all of
    the most popular browsers.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`jQuery`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Two variables are declared at the beginning of the JavaScript file so their
    values can be used throughout the application; these are known as global variables.
    The bulk of the application code is placed within the jQuery on-load function
    so that the code is executed once the page has been loaded, as follows:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`The jQuery `data()` function is used to extract the thumbnail width from the
    HTML code that we created earlier. This value is then stored within the `imageWidth`
    variable for use later in the application. The `$(''.gallery'').find(''img'')`
    function is used to search for all the `img` elements within the `gallery` div
    element and store them as an array in the `images` variable. jQuery''s `$.each()`
    function is used to iterate through each of the `img` elements in the images array.
    Inside the callback function of `$.each()`, we first use the `addClass()` function
    to add a class to the main image element based on the array index (that is, `img0`,
    `img1`, and so on). Then, an anchor element is created with an image inside and
    the width set using the `imageWidth` variable declared earlier. Using the `append()`
    function, the anchor element is then inserted into the DOM inside the `thumbs`
    div element. Additionally, the `data-index` property value of this anchor is set
    to match the class name of the larger image.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`In the `$.each()` function, we call a custom function named `updateScrollButtons`,
    which is declared at the end of the JavaScript file. This function is used to
    determine whether the arrow buttons should be enabled based on the current position
    of the thumbnails. This prevents the user from scrolling the thumbnails out of
    the bottom section of the image gallery. Once the user has scrolled right to the
    last thumbnail, the right arrow button is disabled. Once the user has scrolled
    left to the first thumbnail, the left arrow button is disabled.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Next, using the following code we attach a click event handler to each of
    the arrow buttons so we can detect when the user wants to scroll through the thumbnail
    images.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`In the callback function of the click event handler, we first declare a variable
    and store the click element within it referring to `$(this)`, meaning the clicked
    element. Using this variable, we can use the jQuery function `hasClass` to determine
    if the clicked element has the class `disabled`. We wrap all the code within this
    function inside an `if` statement so that none of this code will be executed if
    the clicked element has the `disabled` class. In the `if` statement, we use `addClass`
    to add the `disabled` class to the clicked element. This is to prevent the user
    from being able to spam-click on the scroll arrows and cause undesired animations.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`We also have a variable declared named `scrollString` that has the default
    value of `-=`. This value will be used within the jQuery `animate()` function
    that will provide the scrolling animation to our thumbnails. Depending on the
    `data-direction` property value of the arrow that is clicked, this value will
    either stay as `-=`, meaning that the left margin of the `thumbs` div will be
    taken away from (that is, scrolled right), or the value will change to `+=`, meaning
    that the left margin will be added to (that is, scrolled left).`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Finally, within this event handler callback function, the jQuery `animate()`
    function is used to modify the left margin of the `thumbs` div element, which
    provides the scrolling effect. The `imageWidth` variable is used once more to
    set the scroll position to match the width of the thumbnails as follows:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`The next section of code attaches a click event handler to the `gallery` div
    element. The click event handler listens for clicks on any element with the class
    `thumb`. This allows us to specify code to be executed once a thumbnail has been
    clicked. In the callback function, we select the clicked thumbnail and store the
    element reference in the `thumb` variable. We also use the clicked elements''
    `data-index` property value to select the larger image, storing its reference
    within `image`.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Once again, we use the `$.each()` function to iterate through all of the images.
    We hide each image that does not match the image in the clicked thumbnail. This
    is so that only the selected image appears in the main viewing panel. We also
    use the `css()` function to check the `display` property of the larger image to
    determine if the image is currently visible. If not, we use the jQuery fade in
    effect to show it, completing the image gallery functionality.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Creating a blinking button'
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery's effect functions, we can create a blinking button that can be
    used in a web application or website to draw the user's attention.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a blank HTML document named `recipe-8.html` and ensure you have the latest
    version of jQuery downloaded and ready to be included in this HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how jQuery can be used to create a simple blinking button effect by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code to `recipe-8.html`, which you have just created, remembering
    to update the reference to the jQuery library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file named `recipe-8.css` and add the following CSS code to add
    style to the newsletter form created in the HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file in the same directory as the CSS and HTML files. Save
    this file as `recipe-8.js` and add the following jQuery code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-8.html` in a web browser and you will be presented with a web page
    similar to the following screenshot:![How to do it…](img/0896OS_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking inside the textbox will cause the **Sign-up Now!** button to blink
    to draw the user's attention.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML and CSS code used in this recipe creates a page that allows a user
    to sign up for a newsletter subscription. There are no complex elements in the
    HTML or CSS code, so no further explanation is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe provides a simple example that demonstrates how we can use jQuery
    to give the appearance of a blinking button. The idea is that when the user clicks
    inside the textbox to input an e-mail address, the **Sign-up Now!** button will
    blink to draw their attention.
  prefs: []
  type: TYPE_NORMAL
- en: In our jQuery code, we first attach an event handler to the text input for focus.
    The `focus` event is triggered when an element on the page receives the attention
    of the user, either by tabbing to the form element or by clicking on it. In the
    callback function to this event handler, we use the `fadeTo()` jQuery effect function
    to sequentially fade out and fade in the button, creating the blinking effect.
    The `fadeTo()` function, in this example, takes two arguments, effect duration
    and element opacity. We specify the opacity of the element to be `0.1` within
    the first `fadeTo()` function to fade out the button. Then we specify `1.0` to
    fade the button back in. We can control the speed of the effect by altering the
    specified duration, which is set to `300` milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways to create the blinking effect with jQuery. In [Chapter 6](ch06.html
    "Chapter 6. User Interface"), *User Interface*, you will learn to alter the CSS
    attributes of elements, which will allow you to add drop-shadows and colored borders
    to greatly enhance the blinking effect. The `fadeTo()` function provides the easiest
    way to create this effect, but be aware that there are alternatives that can provide
    a greater impact that may be more suitable to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: When forcing elements to blink, move, or flash to draw the user's attention,
    you must be very careful not to cause annoyance, as this may have the reverse
    effect of turning them away. Effects such as these should only be used as subtle
    hints to prompt the user's interaction with your user interface.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Fading elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a basic photo gallery*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing elements with effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will often create interfaces such as lists or tables that will be representing
    data from a database. If the interface is for management purposes, you will typically
    be able to add, edit, and remove these items. We can use jQuery effects to add
    to the user experience when these items are added, as described in the *Fading
    elements* recipe. We can also provide effects when removing an item from the DOM.
    Thanks to jQuery, it is very easy to do.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the other recipes in this chapter, you are going to need a blank HTML
    document. Save this document as `recipe-9.html` and ensure it is within the same
    directory as the latest version of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Understand how you can remove DOM elements with effects by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to the HTML document you have just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may have noticed the CSS file included in the header of the previous HTML
    code. Create `recipe-9.css` and add the following CSS code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to the CSS file, a JavaScript file is also included in the HTML
    page. Create a JavaScript file named `recipe-9.js` and save it in the same directory
    as the HTML and CSS files. Add the following jQuery code to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `recipe-9.html` in a web browser and you will be presented with a simple
    user management UI. Clicking on the **Delete** button next to any entry will prompt
    you to confirm that you would like to delete. When the user clicks on **OK**,
    the entry for that particular user will fade out and be removed from the DOM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe too has basic HTML and CSS code that needs no explanation. Instead,
    let's concentrate on the jQuery code.
  prefs: []
  type: TYPE_NORMAL
- en: All of our jQuery code is wrapped in `$(function(){});`, which is the jQuery
    on-load function, allowing us to execute on page load. We attach a click event
    handler to the user table and listen for clicks on any elements with the `delete`
    class as follows. From the HTML code, you will know these elements are the `delete`
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Inside the callback function to this event handler, we use the native JavaScript
    function `confirm()` and assign its output to the `response` variable. This will
    display a pop-up window to the user that has the message **Are you sure you want
    to delete this user?**. If the user clicks on **OK**, the `response` variable
    will equal `true`. If they click on **Cancel**, it will be `false`. By using this
    `response` variable, we can determine whether they want to go ahead and delete
    the user. If they do, we can remove the table row from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove the table row, we first need to select it. We can refer to `$(this)`,
    which is the clicked item (in this case, the button), then select its parents''
    parent, which is the `tr` table. This is done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We then use the `fadeOut()` function to apply the effect and use the `remove()`
    function to remove the element from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This simple user interface would typically be coupled with server-side calls,
    which would also remove the user entry from the database. Take a look back at
    [Chapter 3](ch03.html "Chapter 3. Loading and Manipulating Dynamic Content with
    AJAX and JSON"), *Loading and Manipulating Dynamic Content with AJAX and JSON*,
    to see how this can be done using jQuery and AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Fading elements*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
