["```js\n<div class=\"button-container\">\n    <button class=\"tt-default\" title=\"I'm using the default tooltip state\">Default</button>\n</div>\n<div class=\"button-container\">\n    <button class=\"tt-highlight\" title=\"I'm using the highlight tooltip state\">Highlight</button>\n</div>\n<div class=\"button-container\">\n    <button class=\"tt-error\" title=\"I'm using the error tooltip state\">Error</button>\n</div>\n```", "```js\n$(function() {\n\n    $( \"button\" ).tooltip();\n\n    $( \"button.tt-highlight\" ).tooltip( \"option\", { \n        tooltipClass: \"ui-state-highlight\" \n    });\n\n    $( \"button.tt-error\" ).tooltip( \"option\", {\n        tooltipClass: \"ui-state-error\"\n    });\n\n});\n```", "```js\n<div class=\"button-container\">\n    <button title=\"I'm using the default tooltip state\">Default</button>\n</div>\n<div class=\"button-container\">\n    <button class=\"ui-state-highlight\" title=\"I'm using the highlight tooltip state\">Highlight</button>\n</div>\n<div class=\"button-container\">\n    <button class=\"ui-state-error\" title=\"I'm using the error tooltip state\">Error</button>\n</div>\n```", "```js\n(function( $, undefined ) {\n\n$.widget( \"ab.tooltip\", $.ui.tooltip, {\n\n    options: {\n        inheritState: false\n    },\n\n    _create: function() {\n\n        var self = this,\n            options = this.options,\n            states = [\n                \"ui-state-highlight\",\n                \"ui-state-error\"\n            ];\n\n        if ( !options.inheritState || options.tooltipClass ) {\n            return this._super();\n        }\n\n        $.each( states, function( i, v ) {\n\n            if ( self.element.hasClass( v ) ) {\n                self.options.tooltipClass = v;\n            }\n\n        });\n\n        this._super();\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    $( \"button\" ).tooltip({\n        inheritState: true\n    });\n\n});\n```", "```js\n<div class=\"button-container\">\n    <button title=\"Logs the user in by establishing a new session.\">Login</button>\n</div>\n<div class=\"button-container\">\n    <button title=\"Deactivates the session, and logs the user out.\">Logout</button>\n</div>\n```", "```js\n.ui-tooltip-title {\n    font-weight: bold;\n    font-size: 1.1em;\n    margin-bottom: 5px;\n}\n```", "```js\n$(function() {\n\n    $( \"button\" ).tooltip({\n        content: function() {\n\n            var $content = $( \"<div/>\" );\n\n            $( \"<div/>\" ).text( $( this ).text() )\n                         .addClass( \"ui-tooltip-title\" )\n                         .appendTo( $content );\n\n            $( \"<span/>\" ).text( $( this ).attr( \"title\" ) )\n                          .appendTo( $content );\n\n            return $content;\n\n        }\n\n    });\n\n});\n```", "```js\n.titles { \n    margin: 20px;\n}\n\n.titles img {\n    padding: 10px;\n}\n\n.ui-tooltip-header {\n    font-weight: bold;\n    font-size: 1.4em;\n}\n\n.ui-tooltip-body {\n    margin: 7px 0 7px 0;\n    font-size: 1.2em;\n}\n\n.ui-tooltip-footer {\n    font-weight: bold;\n    border-top: solid 1px;\n    padding-top: 7px;\n}\n```", "```js\n(function( $, undefined ) {\n\n$.widget( \"ab.tooltip\", $.ui.tooltip, {\n\n    options: {\n        header: null,\n        body: null,\n        footer: null\n    },\n\n    _create: function() {\n\n        this._super();\n\n        var header = this.options.header,\n            body = this.options.body,\n            footer = this.options.footer;\n\n        if ( !header && !body && !footer ) {\n            return;\n        }\n\n        this.options.content = $.proxy( this, \"_content\" );\n\n    },\n\n    _content: function() {\n\n        var header = this.options.header,\n            body = this.options.body,\n            footer = this.options.footer,\n            $content = $( \"<div/>\" );\n\n        if ( header ) {\n\n            $( \"<div/>\" ).text( header )\n                         .addClass( \"ui-tooltip-header\" )\n                         .appendTo( $content );\n\n        }\n\n        if ( body ) {\n\n            $( \"<div/>\" ).text( body )\n                         .addClass( \"ui-tooltip-body\" )\n                         .appendTo( $content );\n\n        }\n\n        if ( footer ) {\n\n            $( \"<div/>\" ).text( footer )\n                         .addClass( \"ui-tooltip-footer\" )\n                         .appendTo( $content );\n\n        }\n\n        return $content;\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    var apikey = \"2vnk...\",  // Your Rotten Tomatoes API key goes here\n        apibase = \"http://api.rottentomatoes.com/api/public/v1.0\";\n\n    $.ajax({\n        url: apibase + \"/lists/movies/in_theaters.json\",\n        dataType: \"jsonp\",\n        data: {\n            apikey: apikey,\n            page_limit: \"5\",\n        },\n        success: function( data ) {\n\n            $.each( data.movies, function( i, v ) {\n\n                var $logo = $( \"<img/>\" );\n\n                $logo.attr( \"src\", v.posters.thumbnail )\n                     .appendTo( \".titles\" );\n\n                $logo.tooltip({\n                    header: v.title,\n                    body: v.synopsis.substring( 0, 150 ) + \"...\",\n                    footer: v.year + \" (\" + v.mpaa_rating + \")\",\n                    items: \"img\"\n                });\n\n            });\n\n        }\n\n    });\n\n});\n```", "```js\n.mouse-tracker {\n    margin: 20px;\n    background-image: none;\n    padding: 3px;\n}\n\n.mouse-tracker p {\n    font-size: 1.2em;\n}\n\n.mouse-tracker-page {\n    width: 180px;\n    height: 170px;\n}\n\n.mouse-tracker-relative {\n    width: 150px;\n    height: 140px;\n}\n```", "```js\n<div class=\"ui-widget-content mouse-tracker mouse-tracker-page\">\n    <p>Page mouse movement</p>\n</div>\n<div class=\"ui-widget-content ui-state-default mouse-tracker mouse-tracker-relative\">\n    <p>Element mouse movement</p>\n</div>\n```", "```js\n(function( $, undefined ) {\n\n$.widget( \"ab.tracker\", $.ui.tooltip, {\n\n    options: {\n        track: true,\n        items: \".ui-tracker\",\n        relative: false\n    },\n\n    _create: function() {\n\n        this.element.addClass( \"ui-tracker\" );\n\n        this._super();\n\n        this.options.content = $.proxy( this, \"_content\" );\n\n    },\n\n    _content: function() {\n\n        var $content = $( \"<div/>\" ),\n            relative = this.options.relative,\n            xlabel = relative ? \"Element X: \" : \"Page X: \",\n            ylabel = relative ? \"Element Y: \" : \"Page Y: \";\n\n        $( \"<div/>\" ).append( $( \"<strong/>\" ).text( xlabel ) )\n                     .append( $( \"<span/>\" ).attr( \"id\", \"ui-tracker-x\" ) )\n                     .appendTo( $content );\n\n        $( \"<div/>\" ).append( $( \"<strong/>\" ).text( ylabel ) )\n                     .append( $( \"<span/>\" ).attr( \"id\", \"ui-tracker-y\" ) )\n                     .appendTo( $content );\n\n        return $content;\n\n    },\n\n    _mousemove: function( e ) {\n\n        var $target = $( e.target ).closest( this.options.items ),\n            offset,\n            offsetLeft = 0\n            offsetTop = 0;\n\n        if ( this.options.relative ) {\n            offset = $target.offset();\n            offsetLeft = offset.left;\n            offsetTop = offset.top;\n        }\n\n        $( \"#ui-tracker-x\" ).text( e.pageX - offsetLeft );\n        $( \"#ui-tracker-y\" ).text( e.pageY - offsetTop );\n\n    },\n\n    open: function( e ) {\n\n        this._super( e );\n\n        var $target = $( e.target ).closest( this.options.items );\n\n        this._on( $target, {\n            mousemove: $.proxy( this, \"_mousemove\" )\n        });\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    $( \".mouse-tracker-page\" ).tracker();\n    $( \".mouse-tracker-relative\" ).tracker({\n        relative: true\n    });\n\n});\n```", "```js\n<div class=\"button-container\">\n    <button class=\"drop\" title=\"I'm using the drop effect\">Drop</button>\n</div>\n<div class=\"button-container\">\n    <button class=\"slide\" title=\"I'm using the slide effect\">Slide</button>\n</div>\n<div class=\"button-container\">\n    <button class=\"explode\" title=\"I'm using the clip/explode effect\">Explode</button>\n</div>\n```", "```js\n$(function() {\n\n    $( \"button\" ).tooltip();\n\n    $( \"button.drop\" ).tooltip( \"option\", {\n        show: {\n            effect: \"drop\",\n            delay: 150,\n            duration: 450,\n            direction: \"up\",\n        },\n        hide: {\n            effect: \"drop\",\n            delay: 100,\n            duration: 200,\n            direction: \"down\"\n        }\n    });\n\n    $( \"button.slide\" ).tooltip( \"option\", {\n        show: {\n            effect: \"slide\",\n            delay: 250,\n            duration: 350,\n            direction: \"left\"\n        },\n        hide: {\n            effect: \"slide\",\n            delay: 150,\n            duration: 350,\n            direction: \"right\",\n        }\n    });\n\n    $( \"button.explode\" ).tooltip( \"option\", {\n        show: {\n            effect: \"clip\",\n            delay: 150,\n            duration: 450\n        },\n        hide: {\n            effect: \"explode\",\n            delay: 200,\n            duration: 1000\n        }\n    });\n\n});\n```", "```js\n<p>\n    Most applications use terms that the user is encountering for the first \n    time.  And so, it's helpful to provide a glossary of sorts so they may \n    lookup the meaning of a new term.  However, deciding on where to put this \n    glossary inside the user interface is a big deal.  For example, if I'm \n    performing some task, I don't want to drop it to go look something up.  \n    This is where tooltips help â€“ the user gets a contextual explanation \n    of something.\n</p>\n\n<p>\n    Out of the box, tooltips work great when applied to a specific element on \n    the page, such as a button or a progressbar. But what about paragraphs of \n    text?  Let's look at how we could allow the user to select some text, and \n    display some contextual definition for the selection using the tooltip \n    widget.\n</p>\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.dictionary\", {\n\n    options: {\n        terms: []\n    },\n\n    ttPos: $.ui.tooltip.prototype.options.position,\n\n    _create: function() {\n\n        this._super();\n\n        this._on({\n            mouseup: this._tip,\n            mouseenter: this._tip\n        });\n\n    },\n\n    _destroy: function() {\n        this._super();\n        this._destroyTooltip();\n    },\n\n    _tip: function( e ) {\n\n        var text = this._selectedText(),\n            term = this._selectedTerm( text );\n\n        if ( text === undefined || term === undefined ) {\n            this._destroyTooltip();\n            return;\n        }\n\n        if ( this.element.attr( \"title\" ) !== term.tip ) {\n            this._destroyTooltip();\n        }\n\n        this._createTooltip( e, term );\n\n    },\n\n    _selectedText: function() {\n\n        var selection, range, fragment;\n\n        selection = window.getSelection();\n\n        if ( selection.type !== \"Range\" ) {\n            return;\n        }\n\n        range = selection.getRangeAt( 0 ),\n        fragment = $( range.cloneContents() );\n\n        return $.trim( fragment.text().toLowerCase() );\n\n    },\n\n    _selectedTerm: function( text ) {\n\n        function isTerm( v ) {\n            if ( v.term === text || v.term + \"s\" === text ) {\n                return v;\n            }\n        }\n\n        return $.map( this.options.terms, isTerm )[ 0 ];\n\n    },\n\n    _createTooltip: function( e, term ) {\n\n        if ( this.element.is( \":ui-tooltip\" ) ) {\n            return;\n        }\n\n        var pos = $.extend( this.ttPos, { of: e } );\n\n        this.element.attr( \"title\", term.tip )\n                    .tooltip( { position: pos } )\n                    .tooltip( \"open\" );\n    },\n\n    _destroyTooltip: function() {\n\n        if ( !this.element.is( \":ui-tooltip\" ) ) {\n           return;\n        }\n\n        this.element.tooltip( \"destroy\" )\n                    .attr( \"title\", \"\");\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    var dict = [\n        {\n            term: \"tooltip\",\n            tip: \"A contextual widget providing information to the user\"\n        },\n        {\n            term: \"progressbar\",\n            tip: \"A widget illustrating the progress of some task\"\n        },\n        {\n            term: \"element\",\n            tip: \"An HTML element on the page\"\n        },\n        {\n            term: \"user interface\",\n            tip: \"Components on the screen the user interacts with\"\n        }\n    ];\n\n    $( \"p\" ).dictionary({\n        terms: dict\n    });\n\n});\n```", "```js\n.ui-dictionary-term {\n    text-decoration: underline;\n    cursor: help;\n}\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.dictionary\", {\n\n    options: {\n        terms: [],\n        mode: \"select\"\n    },\n\n    ttPos: $.ui.tooltip.prototype.options.position,\n\n    _create: function() {\n\n        this._super();\n\n        if ( this.options.mode === \"select\" ) {\n\n            this._on({\n                mouseup: this._tip,\n                mouseenter: this._tip\n            });\n\n        }\n        else if ( this.options.mode === \"hover\" ) {\n\n            this._formatTerms();\n            this._createTooltip();\n\n        }\n\n    },\n\n    _destroy: function() {\n\n        this._super();\n        this._destroyTooltip();\n\n        if ( this.options.mode === \"hover\" ) {\n            this._unformatTerms();\n        }\n\n    },\n\n    _tip: function( e ) {\n\n        var text = this._selectedText(),\n            term = this._selectedTerm( text );\n\n        if ( text === undefined || term === undefined ) {\n            this._destroyTooltip();\n            return;\n        }\n\n        if ( this.element.attr( \"title\" ) !== term.tip ) {\n            this._destroyTooltip();\n        }\n\n        this._createTooltip( e, term );\n\n    },\n\n    _selectedText: function() {\n\n        var selection, range, fragement;\n\n        selection = window.getSelection();\n\n        if ( selection.type !== \"Range\" ) {\n            return;\n        }\n\n        range = selection.getRangeAt( 0 ),\n        fragment = $( range.cloneContents() );\n\n        return $.trim( fragment.text().toLowerCase() );\n\n    },\n\n    _selectedTerm: function( text ) {\n\n        function isTerm( v ) {\n            if ( v.term === text || v.term + \"s\" === text ) {\n                return v;\n            }\n        }\n\n        return $.map( this.options.terms, isTerm )[ 0 ];\n\n    },\n\n    _createTooltip: function( e, term ) {\n\n        if ( this.options.mode === \"hover\" ) {\n            this.element.find( \".ui-dictionary-term\" ).tooltip();\n            return;\n        }\n\n        if ( this.element.is( \":ui-tooltip\" ) ) {\n            return;\n        }\n\n        var pos = $.extend( this.ttPos, { of: e } );\n\n        this.element.attr( \"title\", term.tip )\n                    .tooltip( { position: pos } )\n                    .tooltip( \"open\" );\n\n    },\n\n    _destroyTooltip: function() {\n\n        if( this.options.mode === \"hover\" ) {\n            this.element.find( \".ui-dictionary-term\" )\n                        .tooltip( \"destroy\" );\n            return;\n        }\n\n        if ( !this.element.is( \":ui-tooltip\" ) ) {\n            return;\n        }\n\n        this.element.tooltip( \"destroy\" )\n                    .attr( \"title\", \"\");\n\n    },\n\n    _formatTerms: function() {\n\n        function getTerm( v ) {\n            return v.term;\n        }\n\n        var text = this.element.html(),\n            terms = $.map( this.options.terms, getTerm );\n\n        $.each( this.options.terms, function( i, v ) {\n\n            var t = v.term,\n                ex = new RegExp( \"(\" + t + \"s|\" + t + \")\", \"gi\" ),\n                termClass = \"ui-dictionary-term\",\n                formatted = \"<span \" +\n                            \"class='\" + termClass + \"'\" +\n                            \"title='\" + v.tip + \"'\" +\n                            \">$1</span>\";\n\n            text = text.replace( ex, formatted );\n\n        });\n\n        this.element.html( text );\n\n    },\n\n    _unformatTerms: function() {\n\n        var $terms = this.element.find( \".ui-dictionary-term\" );\n\n        $terms.each( function( i, v ) {\n            $( v ).replaceWith( $( v ).text() );\n        });\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n\n    var dict = [\n        {\n            term: \"tooltip\",\n            tip: \"A contextual widget providing information to the user\"\n        },\n        {\n            term: \"progressbar\",\n            tip: \"A widget illustrating the progress of some task\"\n        },\n        {\n            term: \"element\",\n            tip: \"An HTML element on the page\"\n        },\n        {\n            term: \"user interface\",\n            tip: \"Components on the screen the user interacts with\"\n        }\n    ]\n\n    $( \"p\" ).dictionary({\n        terms: dict,\n        mode: \"hover\"\n    });\n\n});\n```"]