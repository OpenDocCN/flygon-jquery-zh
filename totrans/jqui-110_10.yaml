- en: Chapter 10. Working with Tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduced as a part of the HTML 3 standard, and using the title attribute as
    its text, tooltips are a common element used to provide context within a page.
    You could find them in use in a variety of situations, although it is most likely
    that they will be found when providing assistance in correcting errors as part
    of the submission of a form (particularly when it concerns payment for products!).
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery team introduced their version of the **tooltip** as part of changes
    to Version 1.9 of the library; it was designed to act as a direct replacement
    for the standard tooltip used in all browsers. The difference here, though, was
    that whilst you can't style the standard tooltip, jQuery UI's replacement is intended
    to be accessible, themeable, and completely customizable. It has been set to display
    not only when a control receives focus, but also when you hover over that control,
    which makes it easier to use for keyboard users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation of the widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the CSS framework targets tooltip widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply custom styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring tooltips using their options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling tooltips using their methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying tooltips programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying different types of content in the tooltip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in transition effects for tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a default tooltip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tooltips were built to act as direct replacements for the browser's native tooltips.
    They will recognize the default markup of the title attribute in a tag, and use
    it to automatically add the additional markup required for the widget. The target
    selector can be customized though using tooltip's items and content options; you'll
    see an example of this later in this chapter. Let's first have a look at the basic
    structure required for implementing tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new file in your text editor, create the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the code as `tooltip1.html` in your `jqueryui` working folder. Let''s
    review what was used. The following script and CSS resources are needed for the
    default tooltip widget configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jquery.ui.all.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery-2.0.3.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.core.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.widget.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.tooltip.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script required to create a tooltip, when using the title element in the
    underlying HTML can be as simple as this, which should be added after the last
    `<script>` element in your code, as shown in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, when hovering over the link, the library adds in the requisite
    aria described by the code for screen readers into the HTML link. The widget then
    dynamically generates the markup for the tooltip, and appends it to the document,
    just before the closing `</body>` tag. This is automatically removed as soon as
    the target element loses focus.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**ARIA**, or **Accessible Rich** **Internet Applications**, provides a way
    to make content more accessible to people with disabilities. You can learn more
    about this initiative at [https://developer.mozilla.org/en-US/docs/Accessibility/ARIA](https://developer.mozilla.org/en-US/docs/Accessibility/ARIA).'
  prefs: []
  type: TYPE_NORMAL
- en: It is not necessary to only use the `$(document)` element when adding tooltips.
    Tooltips will work equally well with classes or selector IDs; using a selector
    ID, will give a finer degree of control, as we will see later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the tooltip CSS framework classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Firebug for Firefox (or another generic DOM explorer), we can see that
    specific class names are added to the underlying HTML elements that the Tooltip
    widget is created from. Let's review these class names briefly and see how they
    contribute to the overall appearance of the widget.
  prefs: []
  type: TYPE_NORMAL
- en: '| Classname | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-tooltip` | The outer container for the tooltip |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-tooltip-content` | The content of the tooltip |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-widget-content` | Applies content container styles to an element and
    its child text, links, and icons |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-corner-all` | Applies a corner-radius to all four corners of element
    |'
  prefs: []
  type: TYPE_TB
- en: 'Unlike other widgets, little in the way of styling is added by tooltip—the
    majority of the styles are added when the tooltip is created, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the tooltip CSS framework classes](img/2209OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Overriding the default styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When styling the Tooltip widget, we are not limited to merely using the prebuilt
    themes on offer (about which we will cover in the next section), we can always
    elect to override existing styles with our own. In our next example, we'll see
    how easy this is to accomplish, by making some minor changes to the example from
    `tooltip1.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new document, add the following styles, and save it as `tooltipOverride.css`,
    within the `css` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to link to the new style sheet from the `<head>` element of your
    document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we continue, it is worth explaining a great trick for styling tooltips
    before committing the results to code.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Firefox, you can download and install the **Toggle JS** add-on
    for Firefox, which is available from [https://addons.mozilla.org/en-US/firefox/addon/toggle-js/](https://addons.mozilla.org/en-US/firefox/addon/toggle-js/).
    This allows us to switch off JavaScript on a per-page basis; we can then hover
    over the link to create the tooltip, before expanding the markup in Firebug and
    styling it at our leisure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your HTML document as `tooltip2.html`. When we run the page in a browser,
    you should see the modified tooltip appear when hovering over the link in the
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overriding the default styles](img/2209OS_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using prebuilt themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If creating completely new styles by hand is overkill for your needs, you can
    always elect to use one of the prebuilt themes that are available for download
    from the jQuery UI site.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a really easy change to make. We first need to download a copy of the
    replacement theme; in our example, we''re going to use one called **Excite Bike**.
    Let''s start by browsing to [http://jqueryui.com/download/](http://jqueryui.com/download/),
    then deselecting the **Toggle All** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using prebuilt themes](img/2209OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We don''t need to download the whole library, just the theme at the bottom,
    change the theme option to display **Excite Bike** then click on **Download**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using prebuilt themes](img/2209OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open a copy of `tooltip2.html` then look for this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice the highlighted word in the above line. This is the name of
    the existing theme. Change this to `excite-bike` then save the document as `tooltip3.html`,
    then remove the `tooltipOverride.css` link, and you''re all set. The following
    is our replacement theme in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using prebuilt themes](img/2209OS_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With a single change of word, we can switch between any of the prebuilt themes
    available for use with jQuery UI (or indeed even any of the custom ones that others
    have made available online), as long as you have downloaded and copied the theme
    into the appropriate folder.
  prefs: []
  type: TYPE_NORMAL
- en: There may be occasions, though, where we need to tweak the settings. This gives
    us the best of both worlds, where we only need to concentrate on making the required
    changes. Let's take a look at how we can alter an existing theme using ThemeRoller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom themes with ThemeRoller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we browse to [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/),
    we can alter some of the settings used to style the **Tooltip** example on this
    page. Alter the **Background color & texture** option under **Content**, then
    change the **Border** option to **#580000**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating custom themes with ThemeRoller](img/2209OS_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Move down to the **Clickable: active state** section, then change the **Background
    color & texture** option to **#ccb2b2** at **100%**, and the **Border** option
    to **#580000**. Leave the rest unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating custom themes with ThemeRoller](img/2209OS_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you scroll down to the **Tooltip** example at the foot of the page, then
    hover over either image, you should see the effects of our changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating custom themes with ThemeRoller](img/2209OS_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Whilst I know the colors may not win any style awards, you can see how easy
    it is to alter the colors. When you've finished choosing your colors, you can
    then download the final version from the download page. A copy of the custom theme
    is also available in the code download that accompanies this book; take a look
    at `tooltip4.html` in the `jquery` folder to see an example of our new stylesheet
    in action.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can take it even further with the use of HTML. Beware though, as this will
    introduce a security risk to your pages and should be used with care! Have a look
    at the section marked *Working with HTML in tooltips*, later in this chapter,
    for an example of how you can really go to town in altering the styles of your
    tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring tooltip options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the different components in the library has a series of options that
    control which features of the widget are enabled by default. An object literal,
    or an object reference, can be passed into the `tooltip()` widget method to configure
    these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available options to configure non-default behaviors are shown in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Default value | Used to… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `content` | `function returning the title attribute` | Set the content of
    the tooltip—if setting this option, then it is likely you will also need to change
    the items option as well. |'
  prefs: []
  type: TYPE_TB
- en: '| `disabled` | `false` | Disable the tooltip. |'
  prefs: []
  type: TYPE_TB
- en: '| `hide` | `null` | Determine if or how to animate the hiding of the tooltip.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `items` | `[title]` | Set a selector that indicates which items should show
    tooltips. This can be customized if you are planning to use something other than
    the title attribute for the tooltip content, or need to set a different selector
    for event delegation. |'
  prefs: []
  type: TYPE_TB
- en: '| `position` | `{ my: "left top+15", at: "left bottom", collision: "flipfit"
    }` | Identify the position of the tooltip in relation to the associated target
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `show` | `null` | Determine if or how to animate the showing of the tooltip.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tooltipClass` | `null` | Add a class to a widget that can display different
    tooltip types, such as errors or warnings. |'
  prefs: []
  type: TYPE_TB
- en: '| `track` | `false` | Determine whether the tooltip should track (follow) the
    mouse. |'
  prefs: []
  type: TYPE_TB
- en: Positioning tooltips accurately
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most useful features of jQuery UI's tooltips is the ability to fine-tune
    where they appear on screen. There may be instances where you need them to appear,
    but not at the expense of hiding an important feature on your website or application!
    Let's have a look at how the `position` attribute works, using a custom styled
    tooltip with pointer as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, alter the final `<script>` block of `tooltip4.html`, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to alter the markup so it includes the selector ID we''ve just referenced
    in the tooltip call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In a new file in your text editor, create the following small style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltipPointer.css`. Remove the existing styling from `tooltip4.html`,
    then add the following references into the <head> and resave it as `tooltip5.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we''ve used a number of pseudo-selectors to style our tooltip;
    this has the added advantage that it doesn''t require any images as part of producing
    the tooltip. If we view the new page in a browser, it should appear similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Positioning tooltips accurately](img/2209OS_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the position widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, you will have noticed that we've resized the window to achieve
    the effect shown in the previous screenshot. If you expand that window to full
    size, the tooltip is very likely to shift; to prevent this from happening, it's
    important to use the of attribute, so that the tooltip (in this instance) remains
    next to the original link we added to our markup.
  prefs: []
  type: TYPE_NORMAL
- en: Using the position attribute (and indeed the widget) can be a little tricky
    to master, but it is worth the effort to ensure that your widgets are positioned
    just where you need them to appear.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Chris Coyier* of CSS Tricks [(http://www.css-tricks.com](http://(http://www.css-tricks.com))
    has produced a nice example of how the position utility works, which you can see
    at [http://css-tricks.com/jquery-ui-position-function/](http://css-tricks.com/jquery-ui-position-function/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, an example use of the `position` widget such as the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '…would translate in the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the position widget](img/2209OS_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Source: [http://css-tricks.com/jquery-ui-position-function](http://css-tricks.com/jquery-ui-position-function)/'
  prefs: []
  type: TYPE_NORMAL
- en: Tracking mouse movement with tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've had a look at how to add tooltips to your page, and covered some
    of the possibilities for styling and positioning them on screen. One small enhancement
    we can make to our tooltips is to set them so that they can follow your cursor,
    when activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simple change to make; change the body of `tooltip5.html` so it contains
    the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add the tracking facility, so update the final `<script>` block
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the updated document as `tooltip6.html`. Let''s now add in some final
    tweaks to our styling so the content appears properly on screen. Add the following
    to a new document, saving it as `tooltipTrack.css`, in the `css` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to link to the new style sheet from the `<head>` of our page
    (by replacing the existing reference to `tooltipPointer.css`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how the page should appear when previewing our
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking mouse movement with tooltips](img/2209OS_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We've now set the tooltip to follow our cursor anytime we are hovering over
    a target element. In our example, this includes either of the two links or the
    input element. We're not limited to either of those elements when setting up tracking;
    this can be used on any valid HTML element, such as radio buttons, buttons, or
    even labels.
  prefs: []
  type: TYPE_NORMAL
- en: Although we can't easily show it in print, you should find that when you move
    your cursor around, the tooltip will follow it as long as the cursor is still
    hovering over its target element.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying certain tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've assigned all of our tooltips to work using the `$(document)` object;
    whilst this will work perfectly well, it does mean that our tooltips will always
    follow the same format, and work in the same manner, as the configuration will
    apply to all tooltips on that page.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily change this, though; jQuery UI's Tooltip will work equally fine
    with any jQuery selectors, as it does with the document object. To prove this,
    let's take a look at how you would configure tooltip to work with a specific element.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tooltip2.html`, change the final `<script>` element to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t need the CSS override styles, so remove this line from the `<head>`
    of the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add the following code below the existing markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltip7.html` in your `jqueryui` folder. In this example, we''ve
    removed the reference to document, and replaced it with the `id` assigned to the
    textbox, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying certain tooltips](img/2209OS_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The same style classes that we've seen earlier will still be applied, but this
    time they will only appear when hovering over the textbox, and not the link in
    the text.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying AJAX content in tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout most of this chapter, we've used the standard technique of displaying
    content in our tooltips, which is to reference the text stored in the title attribute
    of any tags that can be found on the page.
  prefs: []
  type: TYPE_NORMAL
- en: However, jQuery UI's Tooltips are able to reference content using AJAX; this
    allows you to generate tooltips dynamically, rather than being limited to what
    is displayed in your markup. In our example, we will use the content attribute
    to pass plain text to the widget; you could equally pass a callback function as
    the content's value to the tooltip.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, remove the existing final `<script>` block in `tooltip7.html`,
    and replace it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, remove the `<label>` and `<input>` code, then add the following immediately
    below your markup in the `<body>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create some content that will be imported into the page using
    AJAX, so in a new document, add the following code and save it as `ajax.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `tooltip8.html`. In this instance, you will need to view this
    through a web server, in order for the AJAX effect to work correctly; if you don't
    have access to some online web space, you can use WAMP Server(for PC, available
    from [http://www.wampserver.com/en/](http://www.wampserver.com/en/)) or MAMP locally
    (for Macs, downloadable from [http://www.mamp.info/en/mamp/](http://www.mamp.info/en/mamp/)),
    which will work equally as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'When hovering over the link, a tooltip will appear but with the content of
    the HTML file that it has imported, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying AJAX content in tooltips](img/2209OS_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we are pulling in HTML-based content, you should ensure that content is handled
    correctly, to minimize risks of attacks to your site. In this example, we've just
    imported plain text from our test HTML file, but using this method does allow
    you to import any HTML (within reason) to great effect.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Later in this chapter, we will look at using HTML in tooltips in more detail;
    you could potentially use the styling and content from that method, but import
    it all using AJAX instead.
  prefs: []
  type: TYPE_NORMAL
- en: How can we tell if it has worked?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to tell if your content has successfully been imported is by
    inspecting it in the **Console** tab of a DOM inspector, such as Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DOM Inspectors can be used to inspect, browse, and edit the **Document Model
    Object** (**DOM**) of any webpage, for a number of purposes, such as establishing
    slow-loading objects or sources, or previewing changes to CSS styling before committing
    them to code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you can clearly see the call to `test.html` (taken from Firebug), which
    has returned a value of `200`, indicating success:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How can we tell if it has worked?](img/2209OS_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using effects in tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have hopefully noticed that, from each of the examples demonstrated
    in this chapter, each tooltip will fade in and out gradually, by default. Tooltips
    are not limited to using only this fade in or out effect; you may prefer to use
    something that shows a little more impact when displayed on screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our next example, we will look at how you can alter your code to use different
    effects, to achieve this effect. Add the following lines of code immediately below
    the last call to the jQuery UI library in `tooltip7.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, remove these two lines from the existing markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Alter the final `<script>` element to include the new effects, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the document as `tooltip9.html`. If we load the page into a browser and
    hover over the link in the text, you will see the tooltip explode when moving
    away, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using effects in tooltips](img/2209OS_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with HTML in tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've covered how you can set up tooltips to appear on your pages, as
    well as style them. The latter presents us with a slight dilemma, though, as we
    have to rely on jQuery to add in CSS styles programmatically, which can be detrimental
    if we're aiming to maintain a progressive style of enhancement for our tooltips.
    There is a way around this; whilst it involves an element of jQuery, it does allow
    us to use HTML to generate our tooltips, making it far more flexible for our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Use of HTML in your tooltips**'
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further, I should point out that use of this method introduces
    a security risk to your code; it is for this reason that the default usage of
    content was switched from allowing HTML to just plain text. Please use this at
    your own risk!
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the contents of the markup in `tooltip9.html`, and add in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, alter the final `<script>` block, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltip10.html`. We now have a working tooltip, but it won''t
    look very attractive. Create a new style sheet and add to it the following basic
    styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltipSelector.css` in your `css` folder. Don''t forget to link
    to the new style sheet from the `<head>` of our page (after the link to the standard
    jQuery UI style sheet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we''re not going to use the prebuilt styling from our redmond
    theme, so remove the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to remove the effects calls from the previous demonstration, so
    remove the following links from the `<head>` of your document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Save our altered document as `tooltip10.html`. If we run this page in a browser,
    you will see the tooltip **Test tooltip** appear when hovering over a link, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with HTML in tooltips](img/2209OS_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we've completely altered the styling used on our tooltip; this
    method requires more work than the normal method for setting up tooltips, but
    it is worth the effort, provided it is done correctly!
  prefs: []
  type: TYPE_NORMAL
- en: The dangers of working with HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, we looked at how you can incorporate HTML into your
    tooltips, which opens up some powerful opportunities in terms of what can be displayed
    within a tooltip. There is an inherent risk associated with using HTML in tooltips,
    though; in previous versions of the library, you could include HTML within the
    `<title>` tag, as part of setting up tooltips. However, this has been altered
    in UI 1.10, as a fix for the cross-site scripting (XSS) vulnerability that was
    present in Version 1.9, where attackers could insert (or inject) client-side script,
    often malicious, into the Tooltip widget on a page. You can still use HTML, but
    need to use the content option as outlined in the previous example. You can learn
    more about cross-site scripting, and how to reduce the threat, at [http://en.wikipedia.org/wiki/Cross-site_scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the content option overrides the default behavior, you should always ensure
    your content is correctly escaped (or sanitized) to minimize the risk of cross-site
    scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Using tooltip methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tooltip widget contains a handful of methods which allow us to work with
    it programmatically and alter its default behaviors. Let''s take a look at the
    methods, which are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Used to… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `close` | Close a tooltip; should only be used for non-delegated tooltips.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `destroy` | Remove the tooltip functionality completely. |'
  prefs: []
  type: TYPE_TB
- en: '| `disable` | Disable the tooltip. |'
  prefs: []
  type: TYPE_TB
- en: '| `enable` | Enable the tooltip. |'
  prefs: []
  type: TYPE_TB
- en: '| `open` | Programmatically open a tooltip. This is only intended for non-delegated
    tooltips. |'
  prefs: []
  type: TYPE_TB
- en: '| `option` | Get or set the value associated with the specified `optionName`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `widget` | Return a jQuery object containing the original element. |'
  prefs: []
  type: TYPE_TB
- en: Enabling and disabling tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can make use of the `enable` or `disable` methods to programmatically enable
    or disable specific tooltips. This will effectively switch on any tooltips that
    were initially disabled or disable those that are currently active. Let's make
    use of the enable and disable methods to switch on or off a tooltip, which we
    will configure to be disabled when the page loads in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following new `<button>` elements directly after the existing markup
    for the Tooltip widget in `tooltip10.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, change the final `<script>` element so that it appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the changed file as `tooltip11.html`. On the page, we''ve added two new
    `<button>` elements. One will be used to enable the disabled tooltip and the other
    is used to disable it again. If we load the page into a browser, we will see something
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling and disabling tooltips](img/2209OS_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the JavaScript, we use the `click` event of the `Enable Tooltip` button to
    call the `tooltip()` widget method. To do this, we pass the string `enable`, to
    the `tooltip()` method as the first argument. Additionally, we pass the index
    number of the tab we want to enable as a second argument. All methods in jQuery
    UI are called in this way. We specify the name of the method we wish to call as
    the first argument to the widget method; the `disable` method is used in the same
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget that if you set `$(document)` as the element upon which tooltip
    works, then we can use both of these methods without additional arguments, in
    order to enable or disable all tooltips on that page.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying tooltips programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as enabling or disabling tooltips programmatically, we can equally show
    or hide tooltips at will, by clicking a button or suitable link on screen. Let's
    use both now, to show or hide one of the tooltips at will, in our next example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tooltip11.html`, alter the last lines of our existing markup as indicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s change the final `<script>` element to include the new event handlers
    that will be assigned to the new buttons we''ve just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the altered file as `tooltip12.html`. When loading the page into a browser,
    and clicking on the **Show (open) Tooltip** button, you will see the tooltip appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying tooltips programmatically](img/2209OS_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the JavaScript, we use the click event of the **Show (open) Tooltip** button
    to call the Tooltip widget and display the tooltip. To do this, we only need to
    pass one attribute, which is the string open, to the `tooltip()` method. When
    we need to hide (or close) the tooltip, we can pass the string close as part of
    calling the Tooltip widget, in a similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: Handling tooltip events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tooltip widget defines three events that allow you to add call back functions
    to perform different actions, when certain events exposed by the widget are detected.
    The following table lists the configuration options that are able to accept executable
    functions on an event:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Fired when… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `close` | A tooltip is closed or triggered on `focusout` or `mouseleave`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `create` | A tooltip is created |'
  prefs: []
  type: TYPE_TB
- en: '| `open` | A tooltip is shown or triggered on `focusin` or `mouseover` |'
  prefs: []
  type: TYPE_TB
- en: Each component of the library has callback options (such as those in the previous
    table), which are tuned to look for key moments in any visitor interactions. Any
    functions we use within these callbacks are usually executed before the change
    happens. Therefore, you can return `false` from your callback and prevent the
    action from occurring.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our next example, we''ll look at how easy it is to react to a particular
    tooltip being displayed, using the standard non-bind technique. Change the final
    `<script>` element in `tooltip12.html` so that it appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltip13.html`. We also need to alter our markup, so remove
    the two buttons at the foot of our existing markup, and insert a new History `<div>`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to add a little styling to make the display look presentable.
    In a new document, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this in the `css` folder as `tooltipEvents.css`. Don''t forget to link
    to the new style sheet from the `<head>` of our page (after the link to the standard
    jQuery UI stylesheet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If we preview the results in a browser, then move over the tooltip link a few
    times. We can begin to see a history build up, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling tooltip events](img/2209OS_10_19B.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We made use of both the `open` and `close` callbacks within this example, although
    the principle is the same for the create custom event, that can also be fired
    by tooltip. The names of the callback functions are provided as the values of
    the `open` and `close` properties in our configuration object.
  prefs: []
  type: TYPE_NORMAL
- en: Two arguments will be passed automatically by the widget to the callback function
    we define, when it is executed. These are the original `event` object and `custom
    ui` object containing useful properties from the tooltip, which was displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Binding to tooltip events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the event callbacks exposed by each component is the standard way of handling
    interactions. However, in addition to the callbacks listed in the previous table,
    we can also look into another set of events fired by each component at different
    times.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the standard jQuery `on()` method to bind an event handler to a custom
    event, fired by the Tooltip widget in the same way that we could bind to a standard
    DOM event, such as a click.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the Tooltip widget''s custom binding events and their
    triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Fired when… |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `tooltipcreate` | A tooltip is created |'
  prefs: []
  type: TYPE_TB
- en: '| `tooltipopen` | A tooltip is shown or triggered on `focusin` or `mouseover`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tooltipclose` | A tooltip is closed or triggered on `focusout` or `mouseleave`
    |'
  prefs: []
  type: TYPE_TB
- en: The first event is fired as soon as the tooltip is created; the remaining two
    are fired depending on whether the tooltip has received focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see this type of event in action; change the final `<script>` element
    in `tooltip13.html` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Save this change as `tooltip14.html`. Binding to the `tooltipopen` and `tooltipclose`
    event handlers in this way, produces the same result as the previous example,
    using the `open` and `close` callback functions. Like last time, the console log
    should be updated each time you hover over the tooltip in the text.
  prefs: []
  type: TYPE_NORMAL
- en: All of the events exposed by all of the widgets can be used with the `on()`
    method, by simply prefixing the name of the widget to the name of the event.
  prefs: []
  type: TYPE_NORMAL
- en: Playing videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've covered a great deal of theory around using jQuery UI's Tooltip;
    in this example and the next, we will take a look at some practical uses of tooltips
    that you can use as a starting point for your own projects. Before continuing,
    make sure you have a copy of the code download available, as we will be using
    files from it for this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: One possible use for tooltips is to mimic the like or dislike buttons you might
    find on social media sites, such as YouTube, where you can register your preference
    for videos you have enjoyed watching. Let's take a look at how you could replicate
    the functionality, in your own projects, but using tooltips and a number of other
    jQuery UI widgets that we've covered so far in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This demonstration uses a video from the open source project *The Big Buck Bunny*,
    created by the *Blender Foundation*, and available from [http://www.bigbuckbunny.org](http://www.bigbuckbunny.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'From the code download, extract a copy of `tooltipVideo.js`; this will provide
    the functionality that adds the buttons and tooltips to the bottom of our video.
    Don''t forget to link to the new JavaScript file from the `<head>` of our page
    (after the link to the jQuery UI button widget):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add a reference to the Button widget to the `<head>` of our
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, change the `<body>` so that it contains the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we also need to add some styling, to ensure the tooltips
    display correctly. Add the following to a new document in your text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltipVideo.css`, into the `css` folder – don''t forget to add
    a link to it from your main document, immediately after the link to the jQuery
    UI stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your modified page as `tooltip15.html`. The following screenshot shows
    how the page should appear when previewing the video in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing videos](img/2209OS_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the buttons in this manner allows us to add some really powerful functionality
    to our sites. In our example, the buttons don't actually do anything (apart from
    show the tooltips), but in real-life, they would be used to maintain a running
    tally of those who have watched the video, and want to register their like (or
    dislike) for it.
  prefs: []
  type: TYPE_NORMAL
- en: Filling out and validating forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we've covered a lot of ground on how to implement tooltips,
    and configure them to our needs, within our sites. We cannot finish this chapter
    though, without taking a look at what is arguably the most important (or common?)
    use of tooltips in a site—form validation.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure that over the years, you will likely have filled out forms online;
    perhaps as part of purchasing something, and that you will have made a mistake
    whilst completing it. The beauty of tooltips is that we can use them to provide
    some feedback to the visitor, to ensure they fill out the fields correctly, and
    do not enter invalid values to your form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, alter the final `<script>` block from `tooltip14.html`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are using JQuery UI''s Button widget in this example, we need to add
    a link to the widget from within jQuery UI''s library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add in the markup for our form – remove the existing markup,
    and replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltip16.html`. We also need a little CSS to complete this example.
    In the `<head>` of the page we just created, add the following `<link>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in a new page in your text editor, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `tooltipForm.css` in the `css` folder. If we preview the page
    in our browser, you will see each of the tooltips appear when hovering over them,
    or they can all be shown when clicking on the **Open Help** button, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filling out and validating forms](img/2209OS_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we've set jQuery UI to show the tooltips on the `[title]` attributes
    of each field. However, as we assigned the tooltip method handler to the `$tooltips`
    variable, we were able to use this to create a click handler for each of the buttons,
    which will either display or hide all of the tooltips, depending on which button
    is pressed. We can also display messages to the user, when something has gone
    wrong; for example, if a password has been entered incorrectly, we can use the
    input field's `blur` event handler to open a tooltip on screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew! For such a small widget, we certainly have covered a lot of ground!
  prefs: []
  type: TYPE_NORMAL
- en: The Tooltip widget is an excellent way to communicate short pieces of information,
    such as an error or alert, to the user, you can even use it as a mini help system;
    let's review what was covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We first looked at how, with just a little underlying HTML and a single line
    of jQuery-flavored JavaScript, we can implement the default tooltip widget. We
    then saw how easy it is to style the Tooltip widget, either using a predesigned
    ThemeRoller theme, or one of our own; so that its appearance, but not its behavior,
    is altered.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on, to look at the set of configurable options exposed by the
    tooltip's API, and how these can be used to control the options that the widget
    offers. Following the configurable options, we covered the handful of methods
    that we can use to programmatically make the tooltip perform different actions,
    such as enabling or disabling specific tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: We briefly looked at some of the more involved functionality supported by the
    tooltips widget, such as AJAX-based tooltips, and providing context to forms.
    Both of these techniques are easy to use and can add value to any implementation.
  prefs: []
  type: TYPE_NORMAL
- en: We have now finished our journey through the UI widgets, so let's turn our attention
    to looking at some of interactions available in the library, beginning with the
    dragging widget.
  prefs: []
  type: TYPE_NORMAL
