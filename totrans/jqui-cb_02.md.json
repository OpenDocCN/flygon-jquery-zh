["```js\n<div>\n    <label for=\"autocomplete\">Items: </label>\n    <input id=\"autocomplete\"/>\n</div>\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.autocomplete\", $.ui.autocomplete, {\n\n    inputClasses: \"ui-widget ui-widget-content ui-corner-all\",\n\n    _create: function() {\n\n        this._super( \"_create\" );\n        this._focusable( this.element );\n        this.element.addClass( this.inputClasses );\n\n    },\n\n    _destroy: function() {\n\n        this._super( \"_destroy\" );\n        this.element.removeClass( this.inputClasses );\n\n    }\n\n});\n\n})( jQuery );\n\n$( function() {\n\n    var source = [\n        'First Item',\n        'Second Item',\n        'Third Item',\n        'Fourth Item'\n    ];\n\n    $( \"#autocomplete\" ).autocomplete( { source: source } );\n\n});\n```", "```js\ninput.ui-autocomplete-input {\n    padding: 2px;\n}\n\ninput.ui-autocomplete-input:focus {\n    outline: none;\n}\n```", "```js\n<div>\n    <label for=\"autocomplete\">Items: </label>\n    <select id=\"autocomplete\">\n        <option>First Item</option>\n        <option>Second Item</option>\n        <option>Third Item</option>\n        <option>Fourth Item</option>\n    </select>\n</div>\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.autocomplete\", $.ui.autocomplete, {\n\n    inputClasses: \"ui-widget ui-widget-content ui-corner-all\",\n\n    _create: function() {\n\n        if ( this.element.is( \"select\" ) ) {\n\n            var self = this;\n            this.original = this.element.hide();\n            this.element = $( \"<input/>\" ).insertAfter( this.original );\n\n            this.options.source = function( request, response ) {\n\n                var filter = $.ui.autocomplete.filter,\n                    options = self.original.find( \"option\" ),\n                    result = options.map( function() {\n                        return $( this ).val();\n                    });\n\n                response( filter( result, request.term ) );\n\n            };\n\n        }\n\n        this._super( \"_create\" );\n\n    },\n\n    _destroy: function() {\n\n        this._super( \"_destroy\" );\n        this.element.remove();\n        this.original.show();\n\n    }\n\n});\n\n})( jQuery );\n\n$( function() {\n    $( \"#autocomplete\" ).autocomplete();\n});\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.autocomplete\", $.ui.autocomplete, {\n\n    options: { \n        sources: []    \n    },\n\n    _create: function() {\n\n        var sources = this.options.sources;\n\n        if ( sources.length ) {\n\n            this.options.source = function ( request, response ) {\n\n                var merged = [],\n                    filter = $.ui.autocomplete.filter;\n\n                $.each( sources, function ( index, value ) {\n                    $.merge( merged, value );\n                });\n\n                response( filter( merged, request.term ) );\n\n            };\n\n        }\n\n        this._super( \"_create\" );\n\n    },\n\n    _destroy: function() {\n        this._super( \"_destroy\" );\n    }\n\n});\n\n})( jQuery );\n\n$( function() {\n    var s1 = [\n            \"DVD 1\",\n            \"DVD 2\",\n            \"DVD 3\"\n        ],\n        s2 = [\n            \"Blu-ray 1\",\n            \"Blu-ray 2\",\n            \"Blu-ray 3\"\n        ];\n\n    $( \"#autocomplete\" ).autocomplete({\n        sources: [s1, s2]\n    });\n});\n```", "```js\n$( function() {\n  $( \"#autocomplete\" ).autocomplete({\n        minLength: 3,\n        source: function( request, response ) {\n            $.ajax({\n                url: \"https://api.github.com/legacy/repos/search/:\" + request.term,\n                dataType: \"jsonp\",\n                success: function( resp ) {\n                    var repositories = resp.data.repositories.splice( 0, 10 );\n                    var items = $.map( repositories, function ( item ) {\n                        return { \n                            label: item.name + \" (\" + \n                                      item.language + \")\",\n                            value: item.name\n                        };\n                    });\n                    response( items );\n                }\n            });\n        }\n    });\n});\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.autocomplete\", $.ui.autocomplete, {\n\n    _cache: {},\n\n    _search: function( value ) {\n\n        var response = this._response(),\n            cache = this._cache;\n\n    this.pending++;\n    this.element.addClass( \"ui-autocomplete-loading\" );\n    this.cancelSearch = false;\n\n        if ( value in cache ) {\n            response( cache[value] );\n        }\n        else {\n            this.source( { term: value }, response );\n        }\n\n    }\n\n});\n\n})( jQuery );\n\n$( function() {\n  $( \"#autocomplete\" ).autocomplete({\n        minLength: 3,\n        source: function( request, response ) {\n            var self = this;\n            $.ajax({\n                url: \"https://api.github.com/legacy/repos/search/:\" + request.term,\n                dataType: \"jsonp\",\n                success: function( resp ) {\n                    var repositories = resp.data.repositories.splice( 0, 10 );\n                    var items = $.map( repositories, function ( item ) {\n                        return { \n                            label: item.name + \" (\" + \n                                      item.language + \")\",\n                            value: item.name\n                        };\n                    });\n                    self._cache[request.term] = items;\n                    response( items );\n                }\n            });\n        }\n    });\n});\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.autocomplete\", $.ui.autocomplete, {\n\n    _renderMenu: function( ul, items ) {\n\n        var that = this,\n            currentCategory = \"\";\n\n        items.sort(function( a, b ) {\n            return a.cat > b.cat \n        });\n\n        $.each( items, function( index, item ) {\n\n            if ( item.cat != currentCategory ) {\n                that._renderCategory( ul, item );\n                currentCategory = item.cat;\n            }\n\n            that._renderItemData( ul, item );\n\n        });\n\n    },\n\n    _renderCategory: function( ul, item ) {\n        return $( \"<li>\" ).addClass( \"ui-autocomplete-category\" )\n                          .html( item.cat )                          \n                          .appendTo( ul );\n    },\n\n    _renderItem: function( ul, item ) {\n        return $( \"<li>\" ).addClass( \"ui-autocomplete-item\" )\n                          .append( $( \"<a>\" )\n                          .append( $( \"<span>\" ).html( item.label ) )\n                          .append( $( \"<span>\" ).html( item.desc ) ) )\n                          .appendTo( ul );\n    }\n\n});\n\n})( jQuery );\n\n$( function() {\n\n    var items = [\n        {\n            value: \"First Item\",\n            label: \"First Item\",\n            desc: \"A description of the first item goes here\",\n            cat: \"Completed\"\n        },\n        {\n            value: \"Second Item\",\n            label: \"Second Item\",\n            desc: \"A description of the second item goes here\",\n            cat: \"In Progress\"\n        },\n        {\n            value: \"Third Item\",\n            label: \"Third Item\",\n            desc: \"A description of the third item goes here\",\n            cat: \"Completed\"\n        }\n    ];\n\n    $( \"#autocomplete\" ).autocomplete( {source: items} );\n\n});\n```", "```js\n.ui-autocomplete-category {\n    font-weight: bold;\n    padding: .2em .4em;\n    margin: .8em 0 .2em;\n    line-height: 1.5;\n}\n\n.ui-autocomplete-item > a > span {\n    display: block;\n}\n\n.ui-autocomplete-item > a > span + span {\n    font-size: .9em;\n}\n```", "```js\n$.ui.autocomplete.filter = function( array, term ) {\n\n    var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), \"i\" );\n\n    return $.grep( array, function( value ) {\n        return matcher.test( value.cat ) || \n               matcher.test( value.desc ) ||\n               matcher.test( value.label )\n    });\n\n};\n```", "```js\n( function( $, undefined ) {\n\n$.widget( \"ab.autocomplete\", $.ui.autocomplete, {\n\n    _suggest: function( items ) {\n\n        this._resetMenu();\n        this._renderMenu( this.menu.element, items );\n        this.menu.refresh();\n\n        this._resizeMenu();\n        this._positionMenu();\n\n    },\n\n    _resetMenu: function() {\n\n        this.menu.element\n                 .empty()\n                 .zIndex( this.element.zIndex() + 1 );\n\n    },\n\n    _positionMenu: function() {\n\n        var pos = $.extend( { of: this.element }, this.options.position );\n        this.menu.element.position( pos );\n\n    },\n\n    _resizeMenu: function() {\n\n        var menu = this.menu,\n            exclude = 0;\n            target = Math.max(\n                menu.element.width( \"\" ).outerWidth() + 1,\n                this.element.outerWidth()\n            ),\n            excludeCSS = [\n                'borderLeftWidth',\n                'borderRightWidth',\n                'paddingLeft',\n                'paddingRight'\n            ];\n\n        if( menu.element.is( \":hidden\" ) ) {\n            menu.element.css( { display: \"block\", opacity: 0 } );\n        }\n\n        $.each( excludeCSS , function( index, item ) {\n            exclude += parseFloat( menu.element.css( item ) );\n        });\n\n        if ( menu.element.css( \"opacity\" ) == 0 ) {\n            menu.element.animate({\n                width: target - exclude,\n                opacity: 1\n            }, 300);\n        }\n        else{\n            menu.element.width( target - exclude );\n        }\n\n    },\n\n    _close: function( event ) {\n\n        var menu = this.menu;\n\n        if ( menu.element.is( \":visible\" ) ) {\n\n            menu.element.fadeOut();\n            menu.blur();\n            this.isNewMenu = true;\n            this._trigger( \"close\", event );\n\n        }\n\n    }\n\n});\n\n})( jQuery );\n\n$(function() {\n    var source = [\n        \"First Item\",\n        \"Second Item\",\n        \"Third Item\",\n        \"Fourth Item\"\n    ];\n    $( \"#autocomplete\" ).autocomplete({\n        source: source,\n    });\n});\n```", "```js\n(function( $, undefined ) {\n    // Code that extends a jQuery UI widget...\n}); //( jQuery );\n```"]