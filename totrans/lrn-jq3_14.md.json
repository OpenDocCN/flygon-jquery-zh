["```js\n<!DOCTYPE html> \n<html> \n<head> \n  <meta charset=\"utf-8\"> \n  <title>Appendix A Tests</title> \n  <link rel=\"stylesheet\" href=\"qunit.css\" media=\"screen\"> \n  <script src=\"img/jquery.js\"></script> \n  <script src=\"img/qunit.js\"></script> \n  <script src=\"img/A.js\"></script> \n  <script src=\"img/test.js\"></script> \n</head> \n<body> \n  <div id=\"qunit\"></div> \n  <div id=\"qunit-fixture\"> \n    <!-- Test Markup Goes Here --> \n  </div> \n</body> \n</html> \n\n```", "```js\nQUnit.module('Selecting');\n\nQUnit.test('Child Selector', (assert) => {\n  assert.expect(0);\n});\n\nQUnit.test('Attribute Selectors', (assert) => {\n  assert.expect(0);\n});\n\nQUnit.module('Ajax'); \n\n```", "```js\nQUnit.test('Child Selector', (assert) => {\n  assert.expect(1);\n  const topLis = $('#selected-plays > li.horizontal');\n  assert.equal(topLis.length, 3, 'Top LIs have horizontal class');\n}); \n\n```", "```js\n$(() => { \n  $('#selected-plays > li').addClass('horizontal'); \n}); \n\n```", "```js\nQUnit.module('Selecting', { \n  beforeEach() { \n    this.topLis = $('#selected-plays > li.horizontal'); \n  } \n}); \n\nQUnit.test('Child Selector', function(assert) { \n  assert.expect(1); \n  assert.equal(this.topLis.length, 3,  \n    'Top LIs have horizontal class'); \n}); \n\nQUnit.test('Attribute Selectors', function(assert) { \n  assert.expect(2); \n  assert.ok(this.topLis.find('.mailto').length == 1, 'a.mailto'); \n  assert.equal(this.topLis.find('.pdflink').length, 1, 'a.pdflink'); \n}); \n\n```", "```js\n$(() => { \n  $('#selected-plays > li').addClass('horizontal'); \n  $('a[href^=\"mailto:\"]').addClass('mailto'); \n  $('a[href$=\".pdf\"]').addClass('pdflink'); \n}); \n\n```", "```js\nQUnit.test('JSON', (assert) => {\n  assert.expect(0);\n  const done = assert.async();\n\n  $.getJSON('A.json', (json, textStatus) => {\n    // add tests here\n  }).always(done);\n});\n\n```", "```js\nQUnit.test('JSON', (assert) => {\n  const backbite = {\n    term: 'BACKBITE',\n    part: 'v.t.',\n    definition: 'To speak of a man as you find him when he can't find you.'\n  };\n\n  assert.expect(2);\n  const done = assert.async();\n\n  $.getJSON('A.json', (json, textStatus) => {\n    assert.equal(textStatus, 'success', 'Request successful');\n    assert.deepEqual(\n      json[1],\n      backbite,\n      'result array matches \"backbite\" map'\n    );\n  }).always(done);\n}); \n\n```"]