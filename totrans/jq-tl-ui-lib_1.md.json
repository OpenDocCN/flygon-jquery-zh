["```js\n// two jQuery selectors and a configuration given as an object literal\n$(\"#content ul.tabs\").tabs(\"div.panes > div\", {\n// configuration variables\ncurrent: 'current',\neffect: 'fade'\n});\n\n```", "```js\n$(\"ul.tabs\").tabs(\"div.panes > div\", {current: 'active'});\n\n```", "```js\nul.tabs .active {\ncolor: '#fff';\nfontWeight: bold;\nbackground-position: 0 -40px;\n}\n\n```", "```js\n<script src= \"http://cdn.jquerytools.org/1.2.6/jquery.tools.min.js\">\n</script>\n\n```", "```js\n<script src= \"http://cdn.jquerytools.org/1.2.6/all/jquery.tools.min.js\">\n</script>\n\n```", "```js\n<script src= \"http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js>\n</script>\n\n```", "```js\n<!-- UI Tools: Tabs, Tooltip, Scrollable and Overlay -->\n<script src=\n\"http://cdn.jquerytools.org/1.2.6/tiny/jquery.tools.min.js\">\n</script>\n<!-- ALL jQuery Tools. No jQuery library -->\n<script src=\n\"http://cdn.jquerytools.org/1.2.6/all/jquery.tools.min.js\">\n</script>\n<!-- jQuery Library + ALL jQuery Tools -->\n<script src=\n\"http://cdn.jquerytools.org/1.2.6/full/jquery.tools.min.js\">\n</script>\n\n```", "```js\nconsole.dir($.tools); \n\n```", "```js\n$(\"#gallery\").overlay({\nfixed: true,\ncloseOnClick: false\n})\n\n```", "```js\n// return elements specified in the selector as a jQuery object\nvar elements = $(\"div.scrollable\").scrollable();\nelements.someOtherPlugin().Click(function() {\n// do something when this element is clicked\n});\n\n```", "```js\n// all overlays use the \"apple\" effect by default\n$.tools.overlay.conf.effect = \"apple\";\n\n```", "```js\n// \"apple\" effect is now our default effect\n$(\"a[rel]\").overlay();\n\n```", "```js\n$(\"a[rel]\").overlay({effect: 'default'});\n\n```", "```js\n$.extend($.tools.overlay.conf, {\nspeed: 400,\neffect: 'apple'\n});\n\n```", "```js\n//get access to the API\nVar api = $(\"#scroller\").data(\"scrollable\")\n\n```", "```js\n//do something upon scroll\napi.onSeek(function() {\n// inside callbacks the \"this\" variable is a reference\n// to the API\nconsole.info(\"current position is: \" + this.getIndex())\n});\n\n```", "```js\n// normal API coding that programmers are accustomed to\nvar index = $(\"#example\").data(\"tabs\").click(1).getIndex();\n\n```", "```js\n// select the correct instance with a jQuery selector\nvar api = $(\".scrollable:eq(2)\").data(\"scrollable\");\n//or with traversing methods. it is just a matter of taste\napi = $(\".scrollable\").eq(2).data(\"scrollable\");\n\n```", "```js\n$(\"#example\").tabs(\".panes > div\", {\n// here is a \"normal\" configuration variable\ncurrent: 'active',\n// here is a callback function that is called before the // tab is clicked\nonBeforeClick: function(event, tabIndex) {\n// the \"this\" variable is a pointer to the API. You can do // a lot with it.\nvar tabPanes = this.getPanes();\n/*\nBy returning false here the default behavior is cancelled. This time another tab cannot be clicked when \"terms\" are not accepted\n*/\nreturn $(\":checkbox[name=terms]\").is(\":checked\");$( \":checkbox[name=terms]\").is(\":checked\");\n}\n});\n\n```", "```js\n$(\".tabs\").tabs({\n// do your own stuff here\nonClick: function() {\n...\nvar tabPanes = this.getPanes();\n}\n});\n\n```", "```js\n// first callback\n$(\".tabs\").bind(\"onClick\", function() {\n// \"this\" is a reference to the DOM element\nvar ulElement = this;\n...\n// another one\n}).bind(\"onClick\", function() {\n// another one\n...\n});\n\n```", "```js\n// the same event listener is called before and after\n// a tab is clicked\n$(\".tabs\").bind(\"onBeforeClick onClick\", function() {\n});\n\n```", "```js\n// grab the API with jQuery's data method\nvar api = $(\".tabs\").data(\"tabs\");\n// supply an event listener\napi.onBeforeClick(function() {\n// supply another\n}).onClick(function() {\n...\n});\n\n```", "```js\n// loop through each instances\n$(\".tabs\").each(function() {\n...\n// assign the onClick listener to a single instance\n$(this).data(\"tabs\").onClick(function() {\n...\n});\n});\n\n```", "```js\n// the event object is the first argument for *all* callbacks\n// in jQuery Tools\napi.onClick(function(event) {\n/* If you have multiple callbacks of the same type this prevents\nthe rest of the callbacks from being executed. */\nevent.stopImmediatePropagation();\n...\n// retrieve the value returned by the previous callback function\nevent.result;\nevent.result;\n...\n// whether CTRL, ALT, SHIFT, or ESC was being pressed\nvar alt = event.altKey,\nctrl = event.ctrlKey,\nshift = event.shiftMey,\nesc = event.metaKey;\n...\n// this is how to get the original triggering element, such\n// as a handle to the scrollable navigator item that was clicked\n// inside an onSeek event\nvar element = e.originalTarget || e.srcElement;\n});\n\n```", "```js\n// create jQuery plugin called \"analytics\"\n$.fn.analytics = function(tracker) {\n// loop through each tab and enable analytics\nreturn this.each(function() {\n// get handle to tabs API.\nvar api = $(this).data(\"tabs\");\n// setup onClick listener for tabs\napi.onClick(function(event, index) {\ntracker.trackEvent(\"tabs\", \"foo\", index);\n});\n});\n};\n\n```", "```js\n// initialize tabs and the analytics plugin.\n$(\"ul.tabs\").tabs(\"div.panes > div\").analytics(tracker);\n\n```", "```js\n$(\"ul.tabs\").analytics(tracker).tabs(\"div.panes > div\");\n\n```", "```js\n// initialize a few scrollables and add more features to them\n$(\".scroller\").scrollable({circular: true}).navigator(\"#myNavi\").autoscroll({interval: 4000});\n\n```", "```js\n// use the \"apple\" effect for the overlays\n$(\"a[rel]\").overlay({effect: 'apple'});\n\n```", "```js\n$.tools.overlay.conf.explosionSpeed = 500;\n\n```", "```js\n<script src=\"img/jquery.tools.min.js\">\n</script>\n\n```"]