- en: Chapter 3. Using the Tabs Widget
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've been formally introduced to the jQuery UI library, the CSS framework,
    and some of the utilities, we can move on to begin looking at the individual components
    included in the library. Over the next seven chapters, we'll be looking at the
    widgets. These are a set of visually engaging, highly configurable user interface
    widgets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The UI tabs widget is used to toggle visibility across a set of different elements,
    with each element containing content that can be accessed by clicking on its tab
    heading. Each panel of content has its own tab. The tab headings are usually displayed
    across the top of the widget, although it is possible to reposition them so that
    they appear along the bottom of the widget instead.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The tabs are structured so that they line up next to each other horizontally,
    whereas the content sections are all set to `display: none` except for the active
    panel. Clicking a tab will highlight the tab and show its associated content panel,
    while ensuring all of the other content panels are hidden. Only one content panel
    can be open at a time. The tabs can be configured so that no content panels are
    open.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation of the widget
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the CSS framework targets tab widgets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply custom styles to a set of tabs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring tabs using their options
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in transition effects for content panel changes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling tabs using their methods
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom events defined by tabs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX tabs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot is labeled with the different elements that a set
    of jQuery UI tabs consists of:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Tabs Widget](img/2209OS_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: Implementing a tab widget
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The structure of the underlying HTML elements on which tabs are based is fairly
    rigid, and widgets require a certain number of elements for them to work. The
    tabs must be created from a list element (ordered or unordered) and each list
    item must contain an `<a>` element. Each link will need to have a corresponding
    element with a specified `id` that is associated with the `href` attribute of
    the link. We'll clarify the exact structure of these elements after the first
    example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new file in your text editor, create the following page:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the code as `tabs1.html` in your `jqueryui` working folder. Let''s review
    what was used. The following script and CSS resources are needed for the default
    tab widget configuration:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '`jquery.ui.all.css`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery-2.0.3.js`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.core.js`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.widget.js`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.ui.tabs.js`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A tab widget is usually constructed from several standard HTML elements arranged
    in a specific manner:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: An outer container element, on which the tabs method is called
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list element (`<ul>` or `<ol>`)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `<a>` element within an `<li>` element for each tab
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An element for the content panel of each tab
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These elements can be either hardcoded into the page, added dynamically, or
    can be a mixture of both, depending upon the requirements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The list and anchor elements within the outer container make the clickable tab
    headings, which are used to show the content section that is associated with the
    tab. The `href` attribute of the link should be set to a fragment identifier,
    prefixed with `#`. It should match the `id` attribute of the element that forms
    the content section with which it is associated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: The content sections of each tab are created using `<div>` elements. The `id`
    attribute is required and will be targeted by its corresponding `<a>` element.
    We've used `<div>` elements in this example as the content panels for each tab,
    but other elements can also be used as long as the relevant configuration is provided
    and the resulting HTML is valid. The `panelTemplate` and `tabTemplate` configuration
    options can be used to change the elements used to build the widget (see the *Configuration*
    section, later in this chapter, for more information).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: We link to several `<script>` resources from the library in the `<head>` section
    before its closing tag. Scripts can be loaded in the `<head>` section using the
    `document.ready()` command, or at the end after stylesheets and page elements.
    Loading them last is a proven technique for improving the apparent loading time
    of a page, although it is debatable as to how much benefit this really brings
    in performance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: After linking first to jQuery, we link to the `jquery.ui.core.js` file that
    is required by all components (except the effects, which have their own core file),
    and the `jquery.ui.widget.js` file. We then link to the component's source file,
    which in this case is `jquery.ui.tabs.js`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: After the three required script files from the library, we can turn to our custom
    `<script>` element in which we add the code that creates the tabs. We encapsulate
    the code used to create the tabs, within jQuery's `DOMReady` statement; this ensures
    the code is only executed when the page elements are loaded and ready to be manipulated.
    We also pass through the jQuery object (`$`) to help avoid conflicts with other
    JavaScript-based libraries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Within the `DOMReady` function we simply call the `tabs()` widget method on
    the jQuery object, representing our tabs container element (the `<ul>` with an
    `id` of `myTabs`). When we run this file in a browser, we should see the tabs
    as they appeared in the first screenshot of this chapter (without the annotations
    of course).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Styling the Tabs widget
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Firebug for Firefox (or another generic DOM explorer), we can see that
    a variety of class names are added to the different underlying HTML elements.
    Let''s review these class names briefly and see how they contribute to the overall
    appearance of the widget. To the outer container `<div>`, the following class
    names are added:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '| Class name | Purpose |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| `ui-tabs` | Allows tab-specific structural CSS to be applied. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| `ui-widget` | Sets generic font styles that are inherited by nested elements.
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| `ui-widget-content` | Provides theme-specific styles. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| `ui-corner-all` | Applies rounded corners to the container. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `ui-corner-all` | 对容器应用圆角。 |'
- en: 'The first element within the container is the `<ul>` element. This element
    receives the following class names:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 容器中的第一个元素是`<ul>`元素。这个元素获取以下类名：
- en: '| Class name | Purpose |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 目的 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ui-tabs-nav` | Allows tab-specific structural CSS to be applied. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `ui-tabs-nav` | 允许应用特定于标签的结构CSS。 |'
- en: '| `ui-helper-reset` | Neutralizes browser-specific styles applied to `<ul>`
    elements. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `ui-helper-reset` | 中和应用到`<ul>`元素的浏览器特定样式。 |'
- en: '| `ui-helper-clearfi` | Applies the clear-fix, as this element has children
    that are floated. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `ui-helper-clearfi` | 应用清除浮动，因为这个元素有浮动的子元素。 |'
- en: '| `ui-widget-header` | Provides theme-specific styles. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `ui-widget-header` | 提供特定主题的样式。 |'
- en: '| `ui-corner-all` | Applies rounded corners. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `ui-corner-all` | 应用圆角。 |'
- en: 'The individual `<li>` elements that form a part of the `tab` headings are given
    the following class names:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 构成`tab`标题的单独`<li>`元素有以下类名：
- en: '| Class name | Purpose |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 目的 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ui-state-default` | Applies the standard, non-active, non-selected, non-hovered
    state to the tab headings. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `ui-state-default` | 将标签标题应用为标准状态，非活动，非选择，非悬停状态。 |'
- en: '| `ui-corner-top` | Applies rounded corners to the top edges of the elements.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `ui-corner-top` | 对元素的顶边应用圆角。 |'
- en: '| `ui-tabs-selected` | This is only applied to the active tab. On page-load
    of the default implementation, this will be the first tab. Selecting another tab
    will remove this class from the currently selected tab and apply it to the newly
    selected tab. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `ui-tabs-selected` | 仅应用于活动标签。在默认实现页面加载时，这将是第一个标签。选择其他标签将从当前选定的标签中移除这个类，并将其应用到新选择的标签。'
- en: '| `ui-state-active` | Applies theme-specific styles to the currently selected
    tab. This class name will be added to the tab that is currently selected, just
    like the previous class name. The reason there are two class names is that `ui-tabs-selected`
    provides the functional CSS, while `ui-state-active` provides the visual, decorative
    styles. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `ui-state-active` | 对当前选定的标签应用特定主题的样式。这个类名将被添加到当前被选中的标签，就像之前的类名一样。有两个类名的原因是，`ui-tabs-selected`提供了功能性的CSS，而`ui-state-active`提供了视觉上的装饰样式。'
- en: The `<a>` elements within each `<li>` are not given any class names, but they
    still have both structural and theme-specific styles applied to them by the framework.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`<li>`内的`<a>`元素没有任何类名，但它们仍然通过框架应用了结构和特定主题的样式。
- en: 'Finally, the panel elements that hold each tab''s content are given the following
    class names:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，包含每个标签内容的面板元素具有以下类名：
- en: '| Class name | Purpose |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 目的 |'
- en: '| --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ui-tabs-panel` | Applies structural CSS to the content panels. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `ui-tabs-panel` | 将结构性CSS应用于内容面板。 |'
- en: '| `ui-widget-content` | Applies theme-specific styles. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `ui-widget-content` | 应用特定主题的样式。 |'
- en: '| `ui-corner-bottom` | Applies rounded corners to the bottom edges of the content
    panels. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `ui-corner-bottom` | 对内容面板的底边应用圆角。 |'
- en: All of these classes are added to the underlying HTML elements automatically
    by the library. We don't need to manually add them when coding the page or adding
    the base markup.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些类都是自动添加到基础HTML元素中的。在编写页面或添加基本标记时，我们不需要手动添加它们。
- en: Applying a custom theme to the tabs
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义主题应用于标签
- en: In the next example, we can see how to change the tabs' basic appearance. We
    can override any rules used purely for display purposes with our own style rules
    for quick and easy customization, without changing the rules related to the tab
    functionality or structure.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个例子中，我们可以看到如何改变标签的基本外观。我们可以用我们自己的样式规则来覆盖纯粹用于显示目的的任何规则，快速轻松地自定义，而不改变与标签功能或结构相关的规则。
- en: 'In a new file in your text editor, create the following very small stylesheet:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中新建一个非常小的样式表：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is all we need. Save the file as `tabsTheme.css` in your `css` folder.
    If you compare the class names with the tables on the previous pages, you'll see
    that we're overriding the theme-specific styles. Because we're overriding the
    theme file, we need to meet or exceed the specificity of the selectors in `theme.css`.
    This is why we target multiple selectors sometimes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的一切。将文件保存为`tabsTheme.css`在你的`css`文件夹中。如果你将这些类名与之前页面上的表格进行比较，你会发现我们正在覆盖特定主题的样式。因为我们正在覆盖主题文件，我们需要匹配或超越`theme.css`中选择器的特殊性。这就是为什么有时我们会同时针对多个选择器。
- en: In this example, we override some of the rules in `jquery.ui.tabs.css`. We need
    to use the selector from `jquery.ui.theme.css` (`.ui-widget-content`), along with
    the ID selector of our container element in order to beat the double class selector
    `.ui-tabs .ui-tabs-panel`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们覆盖了`jquery.ui.tabs.css`中的一些规则。我们需要使用`jquery.ui.theme.css`中的选择器（`.ui-widget-content`），以及我们容器元素的ID选择器，以打败双类选择器`.ui-tabs
    .ui-tabs-panel`。
- en: 'Add the following reference to this new stylesheet in the `<head>` of `tabs1.html`
    and resave the file as `tabs2.html`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tabs1.html`的`<head>`中添加对这个新样式表的引用，并将文件另存为`tabs2.html`：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure the custom stylesheet we just created appears after the `jquery.ui.tabs.css`
    file, because the rules that we are trying to override will not be overridden
    by our custom theme file if the stylesheets are not linked in the correct order.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们刚刚创建的自定义样式表出现在`jquery.ui.tabs.css`文件之后，因为如果样式表的链接顺序不正确，则无法覆盖我们尝试覆盖的规则。
- en: 'If we view the new page in a browser, it should appear as in the following
    screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中查看新页面，它应该显示如下截图：
- en: '![Applying a custom theme to the tabs](img/2209OS_03_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![将自定义主题应用于选项卡](img/2209OS_03_02.jpg)'
- en: Our new theme isn't dramatically different from the default smoothness (as shown
    in the first screenshot), but we can see how easy it is, and how little code it
    requires to change the appearance of the widget to suit its environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新主题与默认的平滑主题（如第一张截图所示）并没有明显的区别，但我们可以看到，为了适应其环境，更改小部件外观是多么容易，以及需要多少代码。
- en: Configuring the Tabs widget
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置选项卡小部件
- en: Each of the different components in the library has a series of options that
    control which features of the widget are enabled by default. An object literal,
    or an object reference, can be passed in to the `tabs()` widget method to configure
    these options.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 库中的每个不同组件都有一系列选项，用于控制小部件的哪些功能默认启用。可以将对象文字或对象引用传递给`tabs()`小部件方法以配置这些选项。
- en: 'The available options to configure non-default behaviors are shown in the following
    table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的选项来配置非默认行为如下表所示：
- en: '| Option | Default value | Used to… |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用于... |'
- en: '| --- | --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `active` | `0` | Indicate which panel is open. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `active` | `0` | 表示打开的面板。 |'
- en: '| `collapsible` | `false` | Allow an active tab to be unselected if it is clicked,
    so that all of the content panels are hidden and only the tab headings are visible.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `collapsible` | `false` | 允许点击活动选项卡时取消选择它，以便隐藏所有内容面板，只显示选项卡标题。 |'
- en: '| `disabled` | `false` | Disable the widget on page load. We can also pass
    an array of tab indices (zero-based) in order to disable specific tabs. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `disabled` | `false` | 在页面加载时禁用小部件。我们还可以传递一个选项卡索引（从零开始）的数组，以便禁用特定的选项卡。 |'
- en: '| `event` | `"click"` | Specify the event that triggers the display of content
    panels. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `event` | `"click"` | 指定触发内容面板显示的事件。 |'
- en: '| `heightStyle` | `content` | Control the height of the tabs widget and each
    panel. Possible values are `auto`, `fill,` and `content`. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `heightStyle` | `content` | 控制选项卡小部件和每个面板的高度。可能的值是`auto`，`fill`和`content`。
    |'
- en: '| `hide` | `null` | Control if or how to animate the hiding of the panel. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `hide` | `null` | 控制是否以及如何动画隐藏面板。 |'
- en: '| `show` | `null` | Control if or how to animate the showing of the panel.
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `show` | `null` | 控制是否以及如何动画显示面板。 |'
- en: Working with tabs
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选项卡
- en: The Tabs widget provides a number of options we can use to perform actions,
    such as selecting or disabling tabs, or adding transition effects. Over the next
    few examples, we will take a look at some of these options, beginning with selecting
    tabs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡小部件提供了一些选项，我们可以使用这些选项执行操作，例如选择或禁用选项卡，或添加过渡效果。在接下来的几个示例中，我们将查看其中一些选项，从选择选项卡开始。
- en: Selecting a tab
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择选项卡
- en: 'Let''s look at how these configurable properties can be used. For example,
    let''s configure the widget so that the second tab is displayed when the page
    loads. Remove the link for `tabsTheme.css` in the `<head>` of `tabs2.html` and
    change the final `<script>` element so that it appears as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用这些可配置属性。例如，让我们配置小部件，使得页面加载时显示第二个选项卡。在`tabs2.html`的`<head>`中删除`tabsTheme.css`的链接，并将最终的`<script>`元素更改为以下内容：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save this as `tabs3.html`. The different tabs and their associated content panels
    are represented by a numerical index starting at zero. Specifying a different
    tab to open by default is as easy as supplying its index number as the value for
    the `active` property. When the page loads now, the second tab should be selected
    by default.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with changing which tab is selected, we can also specify that no tabs
    should be initially selected by supplying a value for `collapsible` in addition
    to the `active` property. Change the `<script>` element from `tabs4.html` so that
    it appears as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will cause the widget to appear as follows on page load:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting a tab](img/2209OS_03_03.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: Disabling a tab
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may want a particular tab to be disabled until a certain condition is met.
    This is easily achieved by manipulating the `disabled` property of the tabs. Change
    the `tabOpts` configuration object in `tabs4.html` to this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save this as `tabs5.html` in your `jqueryui` folder. In this example, we remove
    the `active` property and add the index of the second tab to the disabled array.
    We could add the indices of other tabs to this array as well, separated by a comma,
    to disable multiple tabs by default.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'When the page is loaded in a browser, the second tab has the class name `ui-widget-disabled`
    applied to it, and will pick up the disabled styles from `ui.theme.css`. It will
    not respond to mouse interactions in any way, as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![Disabling a tab](img/2209OS_03_04.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: Adding transition effects
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can easily add attractive transition effects using the show property. These
    are displayed when tabs are opened or closed. This option is configured using
    another object literal (or an array) inside our configuration object, which enables
    one or more effects. We can enable fading effects, for example, using the following
    configuration object:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save this file as `tabs6.html` in your `jqueryui` folder. The show object that
    we created has two properties. The first property is the animation to use when
    changing tabs. To use fading animations we specify `effect`, as this is what is
    adjusted. Toggling the effect simply reverses its current setting. If it is currently
    visible, it is made invisible and vice versa. You can use any one of the effects
    options, such as `toggle`, `fadeIn,` or `slideDown`; we will look at effects in
    more detail in [Chapter 14](ch14.html "Chapter 14. UI Effects"), *UI Effects*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: The second property, `duration`, specifies the speed at which the animation
    occurs. The values for this property are `slow` or `fast`, which correspond to
    `200` and `600` milliseconds, respectively. Any other string will result in the
    default duration of `400` milliseconds. We can also supply an integer representing
    the number of milliseconds the animation should run for.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the file we can see that the tab content slowly fades-out as a
    tab closes and fades-in when a new tab opens. Both animations occur during a single
    tab interaction. To only show the animation once, when a tab closes, for example,
    we would need to nest the `show` object within an array. Change the configuration
    object in `tabs6.html` so that it appears as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行文件时，我们可以看到在选项卡关闭时选项卡内容慢慢淡出，当新的选项卡打开时淡入。两个动画在单个选项卡交互期间发生。为了只在选项卡关闭时显示动画一次，例如，我们需要将`show`对象嵌套在数组中。将`tabs6.html`中的配置对象更改为以下内容：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The closing effect of the currently open content panel is contained within an
    object in the first item of the array, and the opening animation of the new tab
    is the second. By specifying null as the second item in the array, we disable
    the opening animations when a new tab is selected. Save this as `tabs7.html` and
    view the results in a browser.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当前打开的内容面板的关闭效果包含在数组的第一项中的对象中，而新选项卡的打开动画是第二项。通过将数组的第二项指定为`null`，我们在选择新选项卡时禁用了打开动画。将此保存为`tabs7.html`，并在浏览器中查看结果。
- en: We can also specify different animations and speeds for opening and closing
    animations, by adding another object as the second array item instead of `null`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在第二个数组项上添加另一个对象而不是`null`来指定不同的动画和速度以用于打开和关闭动画。
- en: Collapsing a tab
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 折叠选项卡
- en: 'By default when the currently active tab is clicked, nothing happens. But we
    can change this so that the currently open content panel closes when its tab heading
    is selected. Change the configuration object in `tabs7.html` so that it appears
    as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，单击当前活动的选项卡时不会发生任何事情。但是我们可以更改这一点，使得当选择其选项卡标题时，当前打开的内容面板关闭。将`tabs7.html`中的配置对象更改为以下内容：
- en: '[PRE8]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save this version as `tabs8.html`. This option allows all of the content panels
    to be closed, much like when we supplied null to the `selected` property earlier
    on. Clicking a deactivated tab will select the tab and show its associated content
    panel. Clicking the same tab again will close it, shrinking the widget down so
    that only tab headings are visible.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此版本为`tabs8.html`。此选项允许关闭所有内容面板，就像在前面的`selected`属性中提供`null`时那样。单击停用的标签将选择该标签并显示其关联的内容面板。再次单击相同的选项卡会关闭它，将小部件缩小，以便只有选项卡标题可见。
- en: Working with the Tab events
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选项卡事件
- en: 'The Tabs widget defines a series of useful options that allow you to add callback
    functions to perform different actions, when certain events exposed by the widget
    are detected. The following table lists the configuration options that are able
    to accept executable functions on an event:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡小部件定义了一系列有用的选项，允许您添加回调函数以在检测到小部件公开的特定事件时执行不同的操作。下表列出了能够在事件上接受可执行函数的配置选项：
- en: '| Event | Fired when... |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 当...时触发 |'
- en: '| --- | --- |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `add` | A new tab is added. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 添加了一个新选项卡。 |'
- en: '| `disable` | A tab is disabled. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `disable` | 选项卡已禁用。 |'
- en: '| `enable` | A tab is enabled. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `enable` | 选项卡已启用。 |'
- en: '| `load` | A tab''s remote data has loaded. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `load` | 选项卡的远程数据加载完毕。 |'
- en: '| `remove` | A tab is removed. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `remove` | 移除了一个选项卡。 |'
- en: '| `select` | A tab is selected. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `select` | 选择了一个选项卡。 |'
- en: '| `show` | A tab is shown. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 选项卡显示。 |'
- en: Each component of the library has callback options (such as those in the previous
    table), which are tuned to look for key moments in any visitor interactions. Any
    functions we use within these callbacks are usually executed before the change
    happens. Therefore, you can return false from your callback and prevent the action
    from occurring.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 库中的每个组件都有回调选项（例如上表中的选项），它们被调整为查找任何访客交互中的关键时刻。我们在这些回调中使用的任何函数通常在更改发生之前执行。因此，您可以从回调中返回false并阻止操作发生。
- en: 'In our next example, we will look at how easy it is to react to a particular
    tab being selected, using the standard non-bind technique. Change the final `<script>`
    element in `tabs8.html` so that it appears as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个示例中，我们将看到使用标准非绑定技术如何轻松地对选择的特定选项卡作出反应。将`tabs8.html`中最后的`<script>`元素更改为以下内容：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save this file as `tabs9.html`. We also need a little CSS to complete this
    example. In the `<head>` of the page we just created, add the following `<link>`
    element:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`tabs9.html`。我们还需要一些CSS来完成这个示例。在我们刚刚创建的页面的`<head>`中，添加以下`<link>`元素：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then in a new page in your text editor, add the following code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文本编辑器的新页面中添加以下代码：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save this file as `tabSelect.css` in the `css` folder. In this example, we've
    linked to multiple CSS files in a production environment; you may want to consider
    combining CSS into one file, to minimize CSS HTTP requests. Although this will
    help with performance on larger sites, it does come at the expense of not being
    able to drop in replacement jQuery UI CSS files, as you will lose any customizations
    you have added.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: We made use of the `beforeActivate` callback in this example to create a new
    element in jQuery using the `<p>` tag, although the principle is the same for
    any of the other custom events fired by tabs. The name of our callback function
    is provided as the value of the `beforeActivate` property in our configuration
    object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Two arguments will be passed automatically by the widget to the callback function
    we define, when it is executed. These are the original event object and custom
    object containing useful properties from the tab that was selected.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out which of the tabs was clicked, we can look at the `index()` property
    of the second object (remember these are zero-based indices). This is added, along
    with a little explanatory text, to a paragraph element that we create on the fly
    and append to the widget header:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the Tab events](img/2209OS_03_05.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: Whenever a tab is selected, the paragraph before it fades away. Note that the
    event is fired before the change occurs.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Binding to events
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the event callbacks exposed by each component is the standard way of handling
    interactions. However, in addition to the callbacks listed in the previous table,
    we can also hook into another set of events fired by each component at different
    times.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: We can use the standard jQuery `on()` method to bind an event handler to a custom
    event, fired by the Tabs widget in the same way that we could bind to a standard
    DOM event, such as a click.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the tab widget''s custom binding events and their
    triggers:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Fired when... |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| `tabsselect` | A tab is selected. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| `tabsload` | A remote tab has loaded. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| `tabsshow` | A tab is shown. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '| `tabsadd` | A tab has been added to the interface. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| `tabsremove` | A tab has been removed from the interface. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| `tabsdisable` | A tab has been disabled. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| `tabsenable` | A tab has been enabled. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: The first three events are fired in succession, in the order of events in which
    they appear in the table. If no tabs are remote, then `tabsbeforeactivate` and
    `tabsactivate` are fired in that order. These events can be fired before or after
    the action has occurred, depending on which event is used.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see this type of event usage in action; change the final `<script>`
    element in `tabs8.html` to the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save this change as `tabs10.html`. Binding to the `tabsbeforeactivate` in this
    way produces the same result as the previous example, using the `select` callback
    function. Like last time, the alert should appear before the new tab is activated.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: All the events exposed by all the widgets can be used with the `on()` method,
    by simply prefixing the name of the widget to the name of the event.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although each callback name is spelled using camelCase format, each event name
    must be written in lowercase.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Using tab methods
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tabs widget contains many different methods, which means it has a rich
    set of behaviors. It also supports the implementation of advanced functionality
    that allows us to work with it programmatically. Let''s take a look at the methods,
    which are listed in the following table:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Used to... |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| `destroy` | Completely remove the tabs widget. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| `disable` | Disable all tabs. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: '| `enable` | Enable all tabs. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: '| `load` | Reload an AJAX tab''s content, specifying the index number of the
    tab. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: '| `option` | Get or set any property after the widget has been initialized.
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: '| `widget` | Return the element that the `tabs()` widget method is called on.
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
- en: Enabling and disabling tabs
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can make use of the `enable` or `disable` methods to programmatically enable
    or disable specific tabs. This will effectively switch on any tabs that were initially
    disabled or disable those that are currently active.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the `enable` method to switch on a tab, which we disabled by default
    in an earlier example. Add the following new `<button>` elements directly after
    the existing markup for the tabs widget in `tabs5.html`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, change the final `<script>` element so that it appears as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save the changed file as `tabs11.html`. On the page, we've added two new `<button>`
    elements—one will be used to enable the disabled tab and the other is used to
    disable it again.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: In the JavaScript, we use the `click` event of the **Enable** button to call
    the `tabs()` widget method. To do this, we pass the string `enable` to the `tabs()`
    method as the first argument. Additionally, we pass the index number of the tab
    we want to enable as a second argument. All methods in jQuery UI are called in
    this way. We specify the name of the method we wish to call as the first argument
    to the widget method. The `disable` method is used in the same way. Don't forget
    that we can use both of these methods without additional arguments, in order to
    enable or disable the entire widget.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Adding and removing tabs
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along with enabling and disabling tabs programmatically, we can also remove
    them or add completely new tabs on the fly. In `tabs11.html`, remove the existing
    `<button>` elements and add the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then change the final <script> element as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We also need to provide some content that will be loaded into the tab remotely—in
    a new file, add `Remote tab content!`, and save it as `remoteTab.txt`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Save this as `tabs12.html`—to preview this example, you will need to view it
    using a local webserver such as **WAMP** (for Windows), or **MAMP** (Apple Macs).
    The demo will not work if accessed using the filesystem.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: On the page we've added a new instructional `<label>`, an `<input>`, and a `<button>`
    that are used to specify a tab to remove. We've also added a second `<button>`,
    which is used to add a new tab.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: In `<script>`, the first of our new functions handle removing a tab, using the
    `remove` method. This method uses jQuery's `:eq()` function to find the index
    of the tab to be removed. We get the value entered into the textbox and use the
    index to identify which tab to remove, before using the `refresh` method to update
    the instance of Tabs.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The data returned by jQuery's `val()` method is in string format, so we wrap
    the call in the JavaScript `parseInt` function to convert it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The `add` method, which adds a new tab to the widget, works using a similar
    process. Here, we create an instance of a list item, before using jQuery's `appendTo()`
    method to add it to the existing Tabs and updating them. In this example, we've
    specified that the content found in the `remoteTab.txt` file should be added as
    the content of the new tab. Optionally, we can also specify the index number of
    where the new tab should be inserted as a fourth argument. If the index is not
    supplied, the new tab will be added as the last tab.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding and perhaps removing some tabs, the page should appear something
    as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding and removing tabs](img/2209OS_03_06.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: Simulating clicks
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you want to programmatically select a particular tab
    and show its content. This could happen as the result of some other interaction
    by the visitor.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `option` method to do this, which is completely analogous with
    the action of clicking a tab. Alter the final `<script>` block in `tabs12.html`,
    so that it appears as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save this as `tabs13.html` in your `jqueryui` folder. Now when the new tab
    is added, it is automatically selected. The `option` method requires two additional
    arguments: the first is the name of the option to use, and the second is the ID
    of the tab to set as active.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: As any tab that we add will, by default (although this can be changed), be the
    last tab in the interface, and as the tab indices are zero based, all we have
    to do is use the `length` method to return the number of tabs, and then subtract
    1 from this figure to get the index. The result is passed to the `option` method.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, selecting the newly added tab straight away fixes, or at least
    hides, the extra space issue from the last example.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Destroying tabs
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As shown earlier, we can easily add tabs but there may be occasions when you
    need to completely destroy a set of tabs. This is possible using the `destroy`
    method, which is common to all the widgets found in jQuery UI. Let''s see how
    it works. In `tabs13.html`, remove the existing markup immediately after the existing
    `<br>`, and add a new `<button>` as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, change the final `<script>` element to this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save this file as `tabs14.html`. The `destroy` method, which that we invoke
    with a click on the button, completely removes the Tabs widget, returning the
    underlying HTML to its original state. After the button has been clicked, you
    should see a standard HTML list element and the text from each tab, similar to
    the following screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![Destroying tabs](img/2209OS_03_07.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only the original tabs hard coded in the page will remain if the tabs are destroyed,
    not those added with the `add` method.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Getting and setting options
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like the `destroy` method, the `option` method is exposed by all the different
    components found in the library. This method is used to work with the configurable
    options and functions in both getter and setter modes. Let''s look at a basic
    example; add the following `<button>` after the Tabs widget in `tabs9.html`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then change the final `<script>` element so that it is as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We also need to tweak the positioning of the text shown, so remove the link
    to `tabSelect.css` in the existing code, and add the following in the `<head>`
    section:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save this file as `tabs15.html`. The `<button>` on the page has been changed,
    so that it shows the currently active tab. All we do is add the index of the selected
    tab to a status bar message, as we did in the earlier example. We get the `active`
    option by passing the string `active` as the second argument. Any value of any
    option can be accessed in this way.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Chaining UI methods**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Chaining widget methods (either with other UI methods, or core jQuery ones)
    is possible because like the methods found in the underlying jQuery library, they
    almost always return the jQuery `($)` object. Note that this is not possible when
    using getter methods that return data, such as the `length` method.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'To trigger setter mode instead, we can supply a third argument containing the
    new value of the option that we''d like to set. Therefore, to change the value
    of the `active` option, in order to change the tab being displayed, we could use
    the following HTML instead,for this, alter the HTML as shown, at the bottom of
    `tabs15.html`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, append the click-handler as shown:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this as `tabs16.html`. The new page contains a `<label>`, an `<input>`,
    as well as a `<button>` that is used to harvest the index number that the `active`
    option should be set to. When the button is clicked, our code will retrieve the
    value of the `<input>` and use it to change the selected index. By supplying the
    new value we put the method in setter mode.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: When we run this page in our browser, we should see that we can switch to the
    second tab by entering its index number as `1` and clicking on the **Change Selected**
    button.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Working with AJAX tabs
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how we can use the `add` method to add an AJAX tab to the widget dynamically,
    but we can also add remote content to tabs using the underlying HTML. In this
    example, we want the tab that will display the remote content to be available
    all the time, not just after clicking on the button. This example will also only
    work correctly using a full web server with PHP installed and configured, such
    as WAMP (PC) or MAMP (Macs).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following new <a> element to the underlying HTML for the widget in
    `tabs16.html`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We should also remove the `<button>` from the last example.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'The final `<script>` element can be used to call the `tabs` method; no additional
    configuration is required:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save this as `tabs17.html`. All we're doing is specifying the path to the remote
    file (the same one we used in the earlier example) using the `href` attribute
    of an `<a>` element in the underlying markup, from which the tabs are created.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Unlike static tabs, we don't need a corresponding `<div>` element with an `id`
    that matches the `href` of the link. The additional elements required for the
    tab content will be generated automatically by the widget.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: If you use a DOM explorer, you can see that the file path that we added to link
    to the remote tab has been removed. Instead, a new fragment identifier has been
    generated and set as `href`. The new fragment is also added as the `id` of the
    new tab (minus the `#` symbol of course), so that the tab heading still shows
    the tab.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Along with loading data from external files, it can also be loaded from URLs.
    This is great when retrieving content from a database using query strings or a
    web service. Methods related to AJAX tabs include the `load` and `url` methods.
    The `load` method is used to load and reload the contents of an AJAX tab, which
    could come in handy for refreshing content that changes very frequently.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no inherent cross-domain support built into the AJAX functionality
    of tabs widget. Therefore, unless additional PHP or some other server-scripting
    language is employed as a proxy, you may wish to make use of **JavaScript Object**
    **Notation** (**JSON**) structured data and jQuery's JSONP functionality. Files
    and URLs should be under the same domain as the page running the widget.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Changing the URL of a remote tab's content
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `url` method is used to change the URL that the AJAX tab retrieves its content
    from. Let's look at a brief example of these two methods in action. There are
    also a number of properties related to AJAX functionality.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following new `<select>` element after the Tabs widget in `tabs17.html`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then change the final `<script>` element to the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save the new file as `tabs18.html`. We've added a simple `<select>` element
    to the page that lets you choose the content to display in the AJAX tab. In the
    JavaScript, we set a change handler for `<select>` and specified an anonymous
    function to be executed each time the event is detected.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: This function first sets the active tab; in this instance, AJAX Tab, which has
    an ID of 2 – then uses jQuery's `find()` method to set the `href` attribute for
    the tab's panel, before using the `load()` method to insert the contents into
    the tab.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: We'll also need a second local content file. Change the text in the `remoteTab1.txt`
    file and resave it as `remoteTab2.txt`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Run the new file in a browser and use the `<select>` dropdown to choose the
    second remote file then switch to the remote tab. The contents of the second text
    file should be displayed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data obtained via JSONP
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our final example, let''s pull in some external content for our final tabs
    example. If we use the Tabs widget, in conjunction with the standard jQuery library
    `getJSON` method, we can bypass the cross-domain exclusion policy and pull-in
    a feed from another domain, to display in a tab. In `tabs19.html`, change the
    Tabs widget so that it appears as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, change the final `<script>` to the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save the file as `tabs19.html` in your `jqueryui` folder. We first create a
    new `<img>` element and store it in a variable. We also create a configuration
    object and add the `select` event option to it. Every time a tab is selected,
    the function we set as the value of this option will check to see if it was the
    tab with an `id` of `flickr` that was selected. If it was, the jQuery `getJSON`
    method is used to retrieve an image feed from [http://www.flickr.com](http://www.flickr.com).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Once the data is returned, first empty the contents of the **Flickr** tab to
    prevent a build-up of images, then use jQuery's `each()` utility method to iterate
    over each object within the returned JSON, and create a clone of our stored image.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Each new copy of the image has its `src` attribute set using the information
    from the current feed object, and is then added to the empty **Flickr** tab. Once
    iteration over six of the objects in the feed has occurred, we exit jQuery's `each`
    method. It's that simple.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'When we view the page and select the **Images** tab, after a short delay we
    should see six new images, as seen in the following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying data obtained via JSONP](img/2209OS_03_08.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tabs widget is an excellent way of saving space on your page by organizing
    related (or even completely unrelated) sections of content that can be shown or
    hidden, with simple click-input from your visitors. It also lends an air of interactivity
    to your site that can help improve the overall functionality and appeal of the
    page on which it is used.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Let's review what was covered in this chapter. We first looked at how, with
    just a little underlying HTML and a single line of jQuery-flavored JavaScript,
    we can implement the default Tabs widget.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: We then saw how easy it is to add our own basic styling for the Tabs widget
    so that its appearance, but not its behavior, is altered. We already know that
    in addition to this, we can use a predesigned theme or create a completely new
    theme using ThemeRoller.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看到了添加自己的基本样式到标签页小部件是多么容易，这样可以改变它的外观，但不改变它的行为。我们已经知道，除此之外，我们可以使用预设计的主题或使用ThemeRoller创建全新的主题。
- en: We then moved on, to look at the set of configurable options exposed by the
    tabs' API. With these, we can enable or disable different options that the widget
    supports, such as whether tabs are selected by clicks or another event and whether
    certain tabs are disabled when the widget is rendered.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续研究了标签页API公开的一系列可配置选项。借助这些选项，我们可以启用或禁用小部件支持的不同选项，例如标签页是通过单击还是其他事件选择的，以及在小部件呈现时是否禁用某些标签页。
- en: We took some time to look at how we can use a range of predefined callback options
    that allow us to execute arbitrary code, when different events are detected. We
    also saw that the jQuery `on()` method can listen for the same events if necessary.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们花了一些时间研究如何使用一系列预定义的回调选项，允许我们在检测到不同事件时执行任意代码。我们还看到，如果需要，jQuery的`on()`方法可以监听相同的事件。
- en: Following the configurable options, we covered the range of methods that we
    can use to programmatically make the tabs perform different actions, such as simulating
    a click on a tab, enabling or disabling a tab, and adding or removing tabs.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在可配置选项之后，我们介绍了一系列方法，可以通过编程方式使标签页执行不同的操作，例如模拟对标签页的点击，启用或禁用标签页，以及添加或删除标签页。
- en: We briefly looked at some of the more advanced functionalities supported by
    the Tabs widget such as AJAX tabs, and obtaining information using JSONP. Both
    these techniques are easy to use and can add value to any implementation.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要地了解了标签页小部件支持的一些更高级功能，如AJAX标签页，以及使用JSONP获取信息。这两种技术都很容易使用，并且可以为任何实现增加价值。
- en: In the next chapter, we'll move on to look at the **accordion** widget, which
    like the Tabs widget, is used to group content into related sections that are
    shown one at a time.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续研究**手风琴**小部件，类似于标签页小部件，用于将内容分组到相关部分，一次显示一个部分。
