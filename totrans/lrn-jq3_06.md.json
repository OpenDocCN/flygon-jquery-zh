["```js\n<div id=\"dictionary\"> \n</div> \n\n```", "```js\n<div class=\"letters\"> \n  <div class=\"letter\" id=\"letter-a\"> \n    <h3><a href=\"entries-a.html\">A</a></h3> \n  </div> \n  <div class=\"letter\" id=\"letter-b\"> \n    <h3><a href=\"entries-a.html\">B</a></h3> \n  </div> \n  <div class=\"letter\" id=\"letter-c\"> \n    <h3><a href=\"entries-a.html\">C</a></h3> \n  </div> \n  <div class=\"letter\" id=\"letter-d\"> \n    <h3><a href=\"entries-a.html\">D</a></h3> \n  </div> \n  <!-- and so on --> \n</div> \n\n```", "```js\n<div class=\"entry\"> \n  <h3 class=\"term\">ABDICATION</h3> \n  <div class=\"part\">n.</div> \n  <div class=\"definition\"> \n    An act whereby a sovereign attests his sense of the high \n    temperature of the throne. \n    <div class=\"quote\"> \n      <div class=\"quote-line\">Poor Isabella's Dead, whose \n      abdication</div> \n      <div class=\"quote-line\">Set all tongues wagging in the \n      Spanish nation.</div> \n      <div class=\"quote-line\">For that performance 'twere \n      unfair to scold her:</div> \n      <div class=\"quote-line\">She wisely left a throne too \n      hot to hold her.</div> \n      <div class=\"quote-line\">To History she'll be no royal \n      riddle &mdash;</div> \n      <div class=\"quote-line\">Merely a plain parched pea that \n      jumped the griddle.</div> \n      <div class=\"quote-author\">G.J.</div> \n    </div> \n  </div> \n</div> \n\n<div class=\"entry\"> \n  <h3 class=\"term\">ABSOLUTE</h3> \n  <div class=\"part\">adj.</div> \n  <div class=\"definition\"> \n    Independent, irresponsible.  An absolute monarchy is one \n    in which the sovereign does as he pleases so long as he \n    pleases the assassins.  Not many absolute monarchies are \n    left, most of them having been replaced by limited \n    monarchies, where the sovereign's power for evil (and for \n    good) is greatly curtailed, and by republics, which are \n    governed by chance. \n  </div> \n</div> \n\n```", "```js\n$(() => {\n  $('#letter-a a')\n    .click((e) => {\n      e.preventDefault()\n\n      $('#dictionary').load('a.html');\n    });\n});\n\n```", "```js\n$(() => {\n  $('#letter-a a')\n    .click((e) => {\n      e.preventDefault()\n\n      $('#dictionary').load('a.html');\n      alert('Loaded!');\n    });\n});\n\n```", "```js\n{ \n  \"key\": \"value\", \n  \"key 2\": [ \n    \"array\", \n    \"of\", \n    \"items\" \n  ] \n} \n\n```", "```js\n[ \n  { \n    \"term\": \"BACCHUS\", \n    \"part\": \"n.\", \n    \"definition\": \"A convenient deity invented by the...\", \n    \"quote\": [ \n      \"Is public worship, then, a sin,\", \n      \"That for devotions paid to Bacchus\", \n      \"The lictors dare to run us in,\", \n      \"And resolutely thump and whack us?\" \n    ], \n    \"author\": \"Jorace\" \n  }, \n  { \n    \"term\": \"BACKBITE\", \n    \"part\": \"v.t.\", \n    \"definition\": \"To speak of a man as you find him when...\" \n  }, \n  { \n    \"term\": \"BEARD\", \n    \"part\": \"n.\", \n    \"definition\": \"The hair that is commonly cut off by...\" \n  }, \n  ... file continues ... \n\n```", "```js\n$(() => {\n  $('#letter-b a')\n    .click((e) => {\n      e.preventDefault();\n      $.getJSON('b.json');\n    });\n});\n\n```", "```js\n$(() => {\n  $('#letter-b a')\n    .click((e) => {\n      e.preventDefault();\n      $.getJSON('b.json', (data) => {});\n    });\n});\n\n```", "```js\n$(() => {\n  $('#letter-b a')\n    .click((e) => {\n      e.preventDefault();\n\n        $.getJSON('b.json', (data) => {\n          const html = data.reduce((result, entry) => `\n            ${result}\n            <div class=\"entry\">\n              <h3 class=\"term\">${entry.term}</h3>\n              <div class=\"part\">${entry.part}</div>\n              <div class=\"definition\">\n                ${entry.definition}\n              </div>\n            </div>\n          `, '');\n\n        $('#dictionary')\n          .html(html);\n    });\n  });\n});\n\n```", "```js\n$(() => {\n  const formatAuthor = entry =>\n    entry.author ?\n      `<div class=\"quote-author\">${entry.author}</div>` :\n      '';\n\n  const formatQuote = entry =>\n    entry.quote ?\n      `\n      <div class=\"quote\">\n        ${entry.quote.reduce((result, q) => `\n          ${result}\n          <div class=\"quote-line\">${q}</div>\n        `, '')}\n        ${formatAuthor(entry)}\n      </div>\n      ` : '';\n\n    $('#letter-b a')\n      .click((e) => {\n        e.preventDefault();\n\n        $.getJSON('b.json', (data) => {\n          const html = data.reduce((result, entry) => `\n            ${result}\n            <div class=\"entry\">\n              <h3 class=\"term\">${entry.term}</h3>\n              <div class=\"part\">${entry.part}</div>\n              <div class=\"definition\">\n                ${entry.definition}\n                ${formatQuote(entry)}\n              </div>\n            </div>\n          `, '');\n\n          $('#dictionary')\n            .html(html);\n        });\n      });\n});\n\n```", "```js\n$(() => { \n  $('#letter-c a')\n    .click((e) => {\n      e.preventDefault();\n      $.getScript('c.js');\n    });\n}); \n\n```", "```js\nconst entries = [ \n  { \n    \"term\": \"CALAMITY\", \n    \"part\": \"n.\", \n    \"definition\": \"A more than commonly plain and...\" \n  }, \n  { \n    \"term\": \"CANNIBAL\", \n    \"part\": \"n.\", \n    \"definition\": \"A gastronome of the old school who...\" \n  }, \n  { \n    \"term\": \"CHILDHOOD\", \n    \"part\": \"n.\", \n    \"definition\": \"The period of human life intermediate...\" \n  } \n  // and so on \n]; \n\nconst html = entries.reduce((result, entry) => `\n  ${result}\n  <div class=\"entry\">\n    <h3 class=\"term\">${entry.term}</h3>\n    <div class=\"part\">${entry.part}</div>\n    <div class=\"definition\">\n      ${entry.definition}\n    </div>\n  </div>\n`, '');\n\n$('#dictionary')\n  .html(html); \n\n```", "```js\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<entries> \n  <entry term=\"DEFAME\" part=\"v.t.\"> \n    <definition> \n      To lie about another.  To tell the truth about another. \n    </definition> \n  </entry> \n  <entry term=\"DEFENCELESS\" part=\"adj.\"> \n    <definition> \n      Unable to attack. \n    </definition> \n  </entry> \n  <entry term=\"DELUSION\" part=\"n.\"> \n    <definition> \n      The father of a most respectable family, comprising \n      Enthusiasm, Affection, Self-denial, Faith, Hope, \n      Charity and many other goodly sons and daughters. \n    </definition> \n    <quote author=\"Mumfrey Mappel\"> \n      <line>All hail, Delusion!  Were it not for thee</line> \n      <line>The world turned topsy-turvy we should see; \n        </line> \n      <line>For Vice, respectable with cleanly fancies, \n        </line> \n      <line>Would fly abandoned Virtue's gross advances. \n        </line> \n    </quote> \n  </entry> \n</entries> \n\n```", "```js\n$(() => {\n  $('#letter-d a')\n    .click((e) => {\n      e.preventDefault();\n      $.get('d.xml', (data) => {\n\n      });\n    });\n}); \n\n```", "```js\n$(() => { \n  $('#letter-d a')\n    .click((e) => {\n      const formatAuthor = entry =>\n        $(entry).attr('author') ?\n          `\n          <div class=\"quote-author\">\n            ${$(entry).attr('author')}\n          </div>\n          ` : '';\n\n      const formatQuote = entry =>\n        $(entry).find('quote').length ?\n          `\n          <div class=\"quote\">\n            ${$(entry)\n              .find('quote')\n              .get()\n              .reduce((result, q) => `\n                ${result}\n                <div class=\"quote-line\">\n                  ${$(q).text()}\n                </div>\n              `, '')}\n            ${formatAuthor(entry)}\n          </div>\n          ` : '';\n\n      e.preventDefault();\n\n      $.get('d.xml', (data) => {\n        const html = $(data)\n          .find('entry')\n          .get()\n          .reduce((result, entry) => `\n            ${result}\n            <div class=\"entry\">\n              <h3 class=\"term\">${$(entry).attr('term')}</h3>\n              <div class=\"part\">${$(entry).attr('part')}</div>\n              <div class=\"definition\">\n                ${$(entry).find('definition').text()}\n                ${formatQuote(entry)}\n              </div>\n            </div>\n          `, '');\n\n        $('#dictionary')\n          .html(html);\n      });\n    });\n}); \n\n```", "```js\n$(data).find('entry:has(quote[author])').each(function() { \n\n```", "```js\nconst E_entries = {\n  EAVESDROP: {\n    part: 'v.i.',\n    definition: 'Secretly to overhear a catalogue of the ' +\n                'crimes and vices of another or yourself.',\n    quote: [\n      'A lady with one of her ears applied',\n      'To an open keyhole heard, inside,',\n      'Two female gossips in converse free &mdash;',\n      'The subject engaging them was she.',\n      '\"I think,\" said one, \"and my husband thinks',\n      'That she's a prying, inquisitive minx!\"',\n      'As soon as no more of it she could hear',\n      'The lady, indignant, removed her ear.',\n      '\"I will not stay,\" she said, with a pout,',\n      '\"To hear my character lied about!\"',\n    ],\n    author: 'Gopete Sherany',\n  },\n  EDIBLE: {\n    part:'adj.',\n    definition: 'Good to eat, and wholesome to digest, as ' +\n                'a worm to a toad, a toad to a snake, a snake ' +\n                'to a pig, a pig to a man, and a man to a worm.',\n  },\n  // Etc...\n\n```", "```js\nconst formatAuthor = entry =>\n  entry.author ?\n    `<div class=\"quote-author\">${entry.author}</div>` :\n    '';\n\nconst formatQuote = entry =>\n  entry.quote ?\n    `\n    <div class=\"quote\">\n      ${entry.quote.reduce((result, q) => `\n        ${result}\n        <div class=\"quote-line\">${q}</div>\n      `, '')}\n      ${formatAuthor(entry)}\n    </div>\n    ` : '';\n\nconst formatEntry = (term, entry) => `\n  <div class=\"entry\">\n    <h3 class=\"term\">${term}</h3>\n    <div class=\"part\">${entry.part}</div>\n    <div class=\"definition\">\n      ${entry.definition}\n      ${formatQuote(entry)}\n    </div>\n  </div>\n`;\n\napp.use(express.static('./'));\n\napp.get('/e', (req, res) => {\n  const term = req.query.term.toUpperCase();\n  const entry = E_entries[term];\n  let content;\n\n  if (entry) {\n    content = formatEntry(term, entry);\n  } else {\n    content = '<div>Sorry, your term was not found.</div>';\n  }\n\n  res.send(content);\n}); \n\n```", "```js\n<div class=\"letter\" id=\"letter-e\"> \n  <h3>E</h3> \n  <ul> \n    <li><a href=\"e?term=Eavesdrop\">Eavesdrop</a></li> \n    <li><a href=\"e?term=Edible\">Edible</a></li> \n    <li><a href=\"e?term=Education\">Education</a></li> \n    <li><a href=\"e?term=Eloquence\">Eloquence</a></li> \n    <li><a href=\"e?term=Elysium\">Elysium</a></li> \n    <li><a href=\"e?term=Emancipation\">Emancipation</a> \n      </li> \n    <li><a href=\"e?term=Emotion\">Emotion</a></li> \n    <li><a href=\"e?term=Envelope\">Envelope</a></li> \n    <li><a href=\"e?term=Envy\">Envy</a></li> \n    <li><a href=\"e?term=Epitaph\">Epitaph</a></li> \n    <li><a href=\"e?term=Evangelist\">Evangelist</a></li> \n  </ul> \n</div> \n\n```", "```js\n$(() => { \n  $('#letter-e a')\n    .click((e) => {\n      e.preventDefault();\n\n      const requestData = {\n        term: $(e.target).text()\n      };\n\n      $.get('e', requestData, (data) => {\n        $('#dictionary').html(data);\n      });\n    });\n}); \n\n```", "```js\n<div class=\"letter\" id=\"letter-f\"> \n  <h3>F</h3> \n  <form action=\"f\"> \n    <input type=\"text\" name=\"term\" value=\"\" id=\"term\" /> \n    <input type=\"submit\" name=\"search\" value=\"search\" \n      id=\"search\" /> \n  </form> \n</div> \n\n```", "```js\napp.post('/f', (req, res) => {\n  const term = req.body.term.toUpperCase();\n  const content = Object.keys(F_entries)\n    .filter(k => k.includes(term))\n    .reduce((result, k) => `\n      ${result}\n      ${formatEntry(k, F_entries[k])}\n    `, '');\n\n  res.send(content);\n}); \n\n```", "```js\n$(() => {\n  $('#letter-f form')\n    .submit((e) => {\n      e.preventDefault();\n\n      $.post(\n        $(e.target).attr('action'),\n        { term: $('input[name=\"term\"]').val() },\n        (data) => { $('#dictionary').html(data); }\n      );\n    });\n}); \n\n```", "```js\n$(() => {\n  $('#letter-f form')\n    .submit((e) => {\n      e.preventDefault();\n\n      $.post(\n        $(e.target).attr('action'),\n        $(e.target).serialize(),\n        (data) => { $('#dictionary').html(data); }\n      );\n    }); \n}); \n\n```", "```js\n<div id=\"loading\"> \n  Loading... \n</div> \n\n```", "```js\n$(() => {\n  $('<div/>')\n    .attr('id', 'loading')\n    .text('Loading...')\n    .insertBefore('#dictionary');\n}); \n\n```", "```js\n$(() => {\n  const $loading = $('<div/>')\n    .attr('id', 'loading')\n    .text('Loading...')\n    .insertBefore('#dictionary');\n\n  $(document)\n    .ajaxStart(() => {\n      $loading.show(); \n    }); \n}); \n\n```", "```js\n$(() => {\n  const $loading = $('<div/>')\n    .attr('id', 'loading')\n    .text('Loading...') \n    .insertBefore('#dictionary'); \n\n  $(document)\n    .ajaxStart(() => {\n      $loading.show(); \n    })\n    .ajaxStop(() => {\n      $loading.hide(); \n    }); \n}); \n\n```", "```js\n$(() => { \n  $('#letter-a a')\n    .click((e) => {\n      e.preventDefault();\n      $('#dictionary')\n        .load('a.html'); \n    }); \n}); \n\n```", "```js\n$(() => { \n  $('#letter-a a')\n    .click((e) => {\n      e.preventDefault();\n      $('#dictionary')\n        .hide()\n        .load('a.html', function() { \n          $(this).fadeIn(); \n        }); \n    }); \n}); \n\n```", "```js\n$(() => { \n  $('#letter-e a')\n    .click((e) => {\n      e.preventDefault();\n\n      const requestData = {\n        term: $(e.target).text()\n      };\n\n      $.get('notfound', requestData, (data) => {\n        $('#dictionary').html(data);\n      }).fail((xhr) => {\n        $('#dictionary')\n          .html(`An error occurred:\n            ${xhr.status}\n            ${xhr.responseText}\n          `);\n      });\n    });\n}); \n\n```", "```js\n$(() => {\n  $('h3.term')\n    .click((e) => {\n      $(e.target)\n        .siblings('.definition')\n        .slideToggle();\n    });\n}); \n\n```", "```js\n$(() => { \n  $('body')\n    .on('click', 'h3.term', (e) => {\n      $(e.target)\n        .siblings('.definition')\n        .slideToggle();\n    });\n}); \n\n```", "```js\nPromise.all([\n  $.get('a.html'),\n  $.ready\n]).then(([content]) => {\n  $('#dictionary')\n    .hide()\n    .html(content)\n    .fadeIn();\n});\n\n```", "```js\n$(() => {\n  $('#letter-g a')\n    .click((e) => { \n      e.preventDefault();\n\n      fetch('/g')\n        .then(resp => resp.json())\n        .then(data => {\n          const html = data.reduce((result, entry) => `\n            ${result}\n            <div class=\"entry\">\n              <h3 class=\"term\">${entry.term}</h3>\n              <div class=\"part\">${entry.part}</div>\n              <div class=\"definition\">\n                ${entry.definition}\n                ${formatQuote(entry)}\n              </div>\n            </div>\n          `, '');\n\n          $('#dictionary')\n            .html(html);\n        });\n    });\n});\n\n```"]