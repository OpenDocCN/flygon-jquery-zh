["```js\n    define([\"knockout\", \"exports\"], factory);\n    ```", "```js\n    requirejs.config({\n      paths: {\n        'text': '../lib/require/text',\n        'durandal':'../lib/durandal/js',\n        'plugins' : '../lib/durandal/js/plugins',\n        'transitions' : '../lib/durandal/js/transitions',\n        'knockout': '../lib/knockout/knockout-3.1.0.debug',\n        'bootstrap': '../lib/bootstrap/js/bootstrap.min',\n        'jquery': '../lib/jquery/jquery-1.9.1',\n        'toastr': '../lib/toastr/toastr.min',\n        'ko.validation': '../lib/kovalidation/ko.validation',\n        'mockjax': '../lib/mockjax/jquery.mockjax',\n        'mockjson': '../lib/mockjson/jquery.mockjson',\n        'icheck': '../lib/icheck/icheck'\n      },\n      shim: {\n        'bootstrap': {\n          deps: ['jquery'],\n          exports: 'jQuery'\n        },\n        mockjax: {\n          deps:['jquery']\n        },\n        mockjson: {\n          deps:['jquery']\n        },\n        'ko.validation':{\n          deps:['knockout']\n        },\n        'icheck': {\n          deps: ['jquery']\n        }\n      }\n    });\n\n    define([\n      'durandal/system',\n      'durandal/app',\n      'durandal/viewLocator',\n      'mocks',\n      'bindings',\n      'components',\n      'bootstrap',\n      'ko.validation',\n      'icheck',\n    ],  function (system, app, viewLocator,mocks,bindings,components) {\n      //>>excludeStart(\"build\", true);\n      system.debug(true);\n      //>>excludeEnd(\"build\");\n\n      app.title = 'Durandal Shop';\n\n      app.configurePlugins({\n        router:true,\n        dialog: true\n      });\n\n      app.start().then(function() {\n        //Replace 'viewmodels' in the moduleId with 'views' to locate the view.\n        //Look for partial views in a 'views' folder in the root.\n        viewLocator.useConvention();\n\n        //Show the app by setting the root view model for our application with a transition.\n        app.setRoot('viewmodels/shell', 'entrance');\n\n        mocks();\n        bindings.init();\n        components.init();\n      });\n    });\n    ```", "```js\n    <link rel=\"stylesheet\" href=\"lib/toastr/toastr.min.css\" />\n    <link rel=\"stylesheet\" href=\"lib/icheck/skins/all.css\" />\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\n    ```", "```js\nrouter.map([\n  { route: ['','/','catalog'], title:'Catalog', moduleId: 'viewmodels/catalog', nav: true },\n  { route: 'new', title:'New product', moduleId: 'viewmodels/new', nav: true },\n  { route: 'edit/:id', title:'Edit product',moduleId: 'viewmodels/edit', nav: false },\n  { route: 'cart', title:'Cart', \n    moduleId: 'viewmodels/cart', nav: false },\n  { route: 'order', title:'Order', moduleId: 'viewmodels/order', nav: true }\n]).buildNavigationModel();\n```", "```js\n    define([],function(){\n      var vm = {};\n      //to expose data just do: vm.myfeature = ...\n      return vm;\n    });\n    ```", "```js\n    <div></div>\n    ```", "```js\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <h1>Catalog</h1>\n          <div data-bind=\"compose: 'catalog-searchbar.html'\"></div>\n          <div data-bind=\"compose: 'catalog-details.html'\"></div>\n          <div data-bind=\"compose:'catalog-table.html'\"></div>\n        </div>\n      </div>\n    </div>\n    ```", "```js\n    <input type=\"checkbox\" data-bind=\"icheck:showSearchBar\"/>\n      Show Search options<br/><br/>\n    <div class=\"input-group\" data-bind=\"visible:showSearchBar\">\n      <span class=\"input-group-addon\">\n        <i class=\"glyphicon glyphicon-search\"></i> Search\n      </span>\n      <input type=\"text\" class=\"form-control\" data-bind=\"value:searchTerm, valueUpdate: 'keyup', executeOnEnter:filterCatalog\" placeholder=\"Press enter to search...\">\n    </div>\n    <hr/>\n    ```", "```js\n    <div class=\"row cart-detail\">\n      <div class=\"col-lg-2 col-md-4 col-sm-4 col-xs-4\">\n        <strong>\n          <i class=\"glyphicon glyphicon-shopping-cart\"></i> \n            Items in the cart:\n        </strong>\n        <span data-bind=\"text:CartService.cart().length\"></span>\n      </div>\n      <div class=\"col-lg-2 col-md-4 col-sm-4 col-xs-4\">\n        <strong>\n          <i class=\"glyphicon glyphicon-usd\"></i> \n          Total Amount:\n        </strong>\n        <span data-bind=\"text:CartService.grandTotal\"></span>\n      </div>\n      <div class=\"col-lg-8 col-md-4  col-sm-4 col-xs-4 text-right\">\n        <button data-bind=\"click:refresh\" class=\"btn btn-primary btn-lg\">\n          <i class=\"glyphicon glyphicon-refresh\"></i> Refresh\n        </button>\n        <a href=\"#/cart\" class=\"btn btn-primary btn-lg\">\n          <i class=\"glyphicon glyphicon-shopping-cart\"></i> \n          Go To Cart\n        </a>\n      </div>\n    </div>\n    ```", "```js\n    <table class=\"table\">\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>Price</th>\n        <th>Stock</th>\n        <th></th>\n      </tr>\n      </thead>\n      <tbody data-bind=\"{foreach:filteredCatalog}\">\n      <tr data-bind=\"style:{color:stock() < 5?'red':'black'}\">\n        <td data-bind=\"text:name\"></td>\n        <td data-bind=\"{currency:price}\"></td>\n        <td data-bind=\"{text:stock}\"></td>\n        <td>\n          <add-to-cart-button params=\"{cart: $parent.CartService.cart, item: $data}\">\n          </add-to-cart-button>\n          <button class=\"btn btn-info\" data-bind=\"{click:$parent.edit}\">\n            <i class=\"glyphicon glyphicon-pencil\"></i>\n          </button>\n          <button class=\"btn btn-danger\" data-bind=\"{click:$parent.remove}\">\n            <i class=\"glyphicon glyphicon-remove\"></i>\n          </button>\n        </td>\n      </tr>\n      </tbody>\n      <!-- FOOTER HAS BEEN REMOVED -->\n    </table>\n    ```", "```js\nvm.showSearchBar = ko.observable(true);\nvm.searchTerm = ko.observable(\"\");\nvm.catalog = ko.observableArray([]);\nvm.filteredCatalog = ko.observableArray([]);\n```", "```js\ndefine(['knockout'],function(ko){ ... })\n```", "```js\nvm.filterCatalog = function () {\n  if (!vm.catalog()) {\n    vm.filteredCatalog([]);\n  }\n  var filter = vm.searchTerm().toLowerCase();\n  if (!filter) {\n    vm.filteredCatalog(vm.catalog());\n  }\n  //filter data\n  var filtered = ko.utils.arrayFilter(vm.catalog(), function (item) {\n    var fields = [\"name\"]; //we can filter several properties\n    var i = fields.length;\n    while (i--) {\n      var prop = fields[i];\n      if (item.hasOwnProperty(prop) && ko.isObservable(item[prop])) {\n        var strProp = ko.utils.unwrapObservable( item[prop]).toLocaleLowerCase();\n        if (item[prop]() && (strProp.indexOf(filter) !== -1)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  });\n  vm.filteredCatalog(filtered);\n};\n```", "```js\nvm.edit = function(item) {\n  router.navigate('#/edit/'+item.id());\n}\n```", "```js\nvm.remove = function(item) {\n  app\n    .showMessage(\n      'Are you sure you want to delete this item?',\n      'Delete Item',\n      ['Yes', 'No']\n    ).then(function(answer){\n      if(answer === \"Yes\") {\n        ProductService.remove(item.id()).then(function(response){\n          vm.refresh();\n            CartService.remove(item);\n        })\n      }\n    });\n}\n```", "```js\nvm.refresh = function () {\n  return ProductService.all().then(function(response){\n    vm.catalog([]);\n    response.data.forEach(function(item){\n      vm.catalog.push(new Product(item.id,item.name,item.price,item.stock));\n    });\n    var catalog = vm.catalog();\n    CartService.update(catalog);\n    vm.catalog(catalog);\n    vm.filteredCatalog(vm.catalog());\n    LogService.success(\"Downloaded \"+vm.catalog().length+\" products\", \"Catalog loaded\");\n  });\n};\n```", "```js\nvm.activate = function() {\n  if(vm.catalog().length === 0) {\n    app.on(\"catalog:refresh\").then(function(){\n      vm.refresh();\n    });\n    return vm.refresh();\n  } else {\n    return true;\n  }\n}\n```", "```js\ndefine(['knockout','durandal/app','plugins/router', 'services/log','services/product','services/cart', 'models/product','models/cartproduct'\n],function(ko, app, router, LogService, ProductService, CartService, Product, CartProduct){\n  var vm = {};\n  vm.showSearchBar=ko.observable(true);\n  vm.searchTerm = ko.observable(\"\");\n  vm.catalog = ko.observableArray([]);\n  vm.filteredCatalog = ko.observableArray([]);\n  vm.CartService = CartService;\n\n  vm.filterCatalog = function () {...};\n  vm.edit = function(item) {...}\n  vm.remove = function(item) {...}\n  vm.refresh = function () {...}\n  vm.activate = function() {...}\n  return vm;\n});\n```", "```js\ndefine(['knockout','durandal/app' ,'models/cartproduct'],function(ko,app, CartProduct){\n  var service = {};\n  service.cart = ko.observableArray([]);\n  service.add = function(data){\n    if(!data.hasStock()) {\n      LogService.error(\"This product has no stock available\");\n      return;\n    }\n    var item = null;\n    var tmpCart = service.cart();\n    var n = tmpCart.length;\n\n    while(n--) {\n      if (tmpCart[n].product.id() === data.id()) {\n        item = tmpCart[n];\n      }\n    }\n\n    if (item) {\n      item.addUnit();\n    } else {\n      item = new CartProduct(data,1);\n      tmpCart.push(item);\n      item.product.decreaseStock(1);\n    }\n\n    service.cart(tmpCart);\n  };\n  service.subtract = function(data) {\n    var item = service.find(data);\n    item.removeUnit();\n  }\n  service.grandTotal = ko.computed(function(){\n    var tmpCart = service.cart();\n    var total = 0;\n    tmpCart.forEach(function(item){\n      total+= (item.units() * item.product.price());\n    });\n    return total;\n  });\n  service.find = function (data) {\n    var tmp;\n    service.cart().forEach(function(item){\n      if (item.product.id() === data.id()) {\n        tmp = item;\n      }\n    });\n    return tmp;\n  }\n  service.remove = function (data) {\n    var tmp = service.find(data);\n    var units = tmp.product.stock()+tmp.units();\n    tmp.product.stock(units);\n    service.cart.remove(tmp);\n  };\n  service.update = function (catalog){\n    var cart = service.cart();\n    var newCart = [];\n    for(var i =0;i<catalog.length;i++){\n      for(var j=0;j<cart.length;j++){\n        var catalogItem = catalog[i];\n        var cartItem = cart[j];\n        if(cartItem.product.id() === catalogItem.id()){\n          catalogItem.stock(catalogItem.stock() - cartItem.units());\n          newCart.push(new CartProduct(catalogItem,cartItem.units()));\n        }\n      }\n    }\n    service.cart(newCart);\n  }\n  return service;\n});\n```", "```js\ndefine([\"toastr\"],function(toastr){\n  //TOASTR CONFIG\n  toastr.options.positionClass = 'toast-bottom-right';\n\n  var error = function(text,title,log) {\n    toastr.error(title,text);\n    if (log) {\n      console.error(title,text);\n    }\n  };\n  var success = function(text,title,log) {\n    toastr.success(title,text);\n    if (log) {\n      console.log(title,text);\n    }\n  };\n  var warning = function(text,title,log) {\n    toastr.warning(title,text);\n    if (log) {\n      console.warn(title,text);\n    }\n  };\n  var info = function(text,title,log) {\n    toastr.info(atitle,text);\n    if (log) {\n      console.info(title,text);\n    }\n  };\n  return {\n    error:error,\n    success:success,\n    warning:warning,\n    info:info\n  }\n});\n```", "```js\n{ route: 'new', title:'New product', moduleId: 'viewmodels/new', nav: true }\n```", "```js\n<div data-bind=\"compose:'edit.html'\"></div>\n```", "```js\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-6 col-xs-offset-3\">\n      <form class=\"form-horizontal\" role=\"form\" data-bind=\"with:product\">\n        <div class=\"modal-header\">\n          <h3 data-bind=\"text:$parent.title\"></h3>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"form-group\">\n            <div class=\"col-sm-12\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Name\" data-bind=\"textInput:name\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <div class=\"col-sm-12\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Price\" data-bind=\"textInput:price\">\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <div class=\"col-sm-12\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"Stock\" data-bind=\"textInput:stock\">\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <div class=\"form-group\">\n            <div class=\"col-sm-12\">\n              <a href=\"#/catalog\"></a>\n              <button type=\"submit\" class=\"btn btn-default\" data-bind=\"{click:$parent.edit, enable:!errors().length}\">\n                <i class=\"glyphicon glyphicon-plus-sign\"></i>\n                <span data-bind=\"text:$parent.btn\"></span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n```", "```js\ndefine([\"durandal/app\",\"plugins/router\",\"services/log\",\"services/uuid\",\"services/product\",\"models/product\"\n],function(app, router,LogService,uuid, ProductService,Product){\n  var vm = {};\n  vm.title = \"New product\";\n  vm.btn = \"Add product\";\n  vm.edit = function() {\n    ProductService.create(vm.product.toObj()).then(function(response){\n      LogService.success(\"Product added\",\"New product \"+vm.product.name()+\" added\");\n      router.navigate(\"#/catalog\");\n      app.trigger(\"catalog:refresh\");\n    });\n  };\n  vm.activate = function () {\n    vm.product = new Product();\n  };\n  return vm;\n});\n```", "```js\n$.mockjax({\n  url: \"/products\",\n  type: \"GET\",\n  dataType: \"json\",\n  responseTime: 750,\n  responseText: $.mockJSON.generateFromTemplate({\n    \"data|5-5\": [{\n      \"id|1-100\": 0,\n      \"name\": \"@PRODUCTNAME\",\n      \"price|10-500\": 0,\n      \"stock|1-9\": 0\n    }]\n  })\n});\n```", "```js\n$.mockjax({\n  url: \"/products\",\n  type: \"GET\",\n  dataType: \"json\",\n  responseTime: 750,\n  responseText: updatedCatalog()\n});\n```", "```js\nvar catalog = $.mockJSON.generateFromTemplate({\n  \"data|5-5\": [{\n    \"id|1-100\": 0,\n    \"name\": \"@PRODUCTNAME\",\n    \"price|10-500\": 0,\n    \"stock|1-9\": 0\n  }]\n});\nvar updatedCatalog = function () {\n  return catalog;\n}\n```", "```js\nfunction findById(id){\n  var product;\n  catalog.data.forEach(function(item){\n    if (item.id === id) {\n      product = item;\n    }\n  });\n  return product;\n};\n$.mockjax({\n  url: /^\\/products\\/([\\d]+)$/,\n  type: \"GET\",\n  dataType: \"json\",\n  responseTime: 750,\n  response: function(settings){\n    var parts = settings.url.split(\"/\");\n    var id = parseInt(parts[2],10);\n    var p = findById(id);\n    this.responseText = {\n      \"data\": p\n    }\n  }\n});\n```", "```js\nvar lastId= 101; //Max autogenarated id is 100\n$.mockjax({\n  url: \"/products\",\n  type:\"POST\",\n  dataType: \"json\",\n  responseTime: 750,\n  response: function(settings){\n    settings.data.id = lastId;\n    lastId++;\n    catalog.data.push(settings.data);\n    this.responseText = {\n      \"data\": {\n        result: \"true\",\n          text: \"Product created\"\n      }\n    }\n  }\n});\n$.mockjax({\n  url: \"/products\",\n  type:\"PUT\",\n  dataType: \"json\",\n  responseTime: 750,\n  response: function (settings) {\n    var p = findById(settings.data.id);\n    p.name = settings.data.name;\n    p.price = settings.data.price;\n    p.stock = settings.data.stock;\n    this.responseText = {\n      \"data\": {\n        result: \"true\",\n        text: \"Product saved\"\n      }\n    }\n  }\n});\n```", "```js\n$.mockjax({\n  url: /^\\/products\\/([\\d]+)$/,\n  type:\"DELETE\",\n  dataType: \"json\",\n  responseTime: 750,\n  response: function(settings){\n    var parts = settings.url.split(\"/\");\n    var id = parseInt(parts[2],10);\n    var p = findById(id);\n    var index = catalog.data.indexOf(p);\n    if (index > -1) {\n      catalog.data.splice(index, 1);\n    }\n    this.responseText = {\n      \"data\": {\n        result: \"true\",\n        text: \"Product deleted\"\n      }\n    }\n  }\n});\n```", "```js\n$.mockjax({\n  type: 'PUT',\n  url: '/order',\n  responseTime: 750,\n  response: function (settings){\n    var cart = settings.data.order();\n    cart.forEach(function(item){\n      var elem = findById(item.product.id());\n      elem.stock -= item.units();\n    });\n    this.responseText = {\n      \"data\": {\n        orderId:uuid(),\n        result: \"true\",\n        text: \"Order saved\"\n      }\n    };\n  }\n});\n```", "```js\nvar uuid = (function uuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n  }\n  return function() {\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  };\n})();\n```", "```js\ndefine([\"durandal/app\",\"plugins/router\",\"services/log\",\"services/uuid\",\"services/product\",\"models/product\"\n],function(app, router,LogService,uuid,ProductService,Product){\n  var vm = {};\n  vm.title = \"Edit Product\";\n  vm.btn = \"Edit product\";\n  vm.activate = function(id) {\n    return ProductService.get(id).then(function(response){\n      var p = response.data;\n      if (p) {\n        vm.product = new Product(p.id, p.name, p.price, p.stock);\n      } else {\n        LogService.error(\"We didn't find product with id: \"+id)\n        router.navigate('#/catalog');\n      }\n    });\n  };\n  vm.edit = function() {\n    ProductService.save(vm.product.toObj()).then( function(response){\n      LogService.success(\"Product saved\",\"Product \"+vm.product.name()+\" saved\");\n      router.navigate(\"#/catalog\");\n      app.trigger(\"catalog:refresh\");\n    });\n  };\n  return vm;\n});\n```", "```js\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8 col-xs-offset-2\">\n      <h1>Cart</h1>\n      <div class=\"list-group\" data-bind=\"foreach:cart\">\n        <div data-bind=\"compose: 'cart-item.html'\"></div>\n      </div>\n      <button class=\"btn btn-primary btn-sm\" \n        data-bind=\"enable:cart().length,click:toOrder\">\n\t\tConfirm Order\n      </button>\n    </div>\n  </div>\n</div>\n```", "```js\n<div class=\"list-group-item\" style=\"overflow: hidden\">\n  <button type=\"button\" class=\"close pull-right\" data-bind=\"click:$parent.removeProduct\">\n    <span>&times;</span>\n  </button>\n  <h4 class=\"\" data-bind=\"text:product.name\"></h4>\n  <div class=\"input-group cart-unit\">\n    <input type=\"text\" class=\"form-control\" data-bind=\"textInput:units\" readonly/>\n    <span class=\"input-group-addon\">\n      <div class=\"btn-group-vertical\">\n        <button class=\"btn btn-default btn-xs add-unit\" data-bind=\"click:$parent.addUnit\">\n          <i class=\"glyphicon glyphicon-chevron-up\"></i>\n        </button>\n        <button class=\"btn btn-default btn-xs remove-unit\" data-bind=\"click:$parent.removeUnit\">\n          <i class=\"glyphicon glyphicon-chevron-down\"></i>\n        </button>\n      </div>\n    </span>\n  </div>\n</div>\n```", "```js\ndefine([\n  'durandal/app','plugins/router','services/log',\"services/cart\"\n],function(app, router, LogService, CartService){\n  var vm={};\n  vm.cart = CartService.cart;\n  vm.addUnit = function(data){\n    CartService.add(data.product);\n  };\n  vm.removeUnit = function(data) {\n    if (data.units() === 1) {\n      remove(data);\n    } else {\n      CartService.subtract(data);\n    }\n\n  };\n  vm.removeProduct = function(data) {\n    remove(data);\n  };\n  vm.toOrder = function() {\n    router.navigate('#/order');\n  }\n  vm.canActivate = function () {\n    var result = (vm.cart().length > 0);\n\n    if(!result) {\n      LogService.error(\"Select some products before\", \"Cart is empty\");\n      return {redirect:'#/catalog'};\n    }\n\n    return result;\n  }\n  function remove(data) {\n    app\n    .showMessage(\n      'Are you sure you want to delete this item?',\n      'Delete Item',\n      ['Yes', 'No']\n    ).then(function(answer){\n     if(answer === \"Yes\") {\n       CartService.remove(data.product);\n       LogService.success(\"Product removed\");\n     } else {\n       LogService.success(\"Deletion canceled\");\n     }\n   });\n  }\n  return vm;\n});\n```", "```js\n<h1>Confirm order</h1>\n<div class=\"col-xs-12 col-sm-6\">\n  <div class=\"modal-header\">\n    <h3>Order</h3>\n  </div>\n  <div data-bind=\"compose:'order-cart-detail.html'\"></div>\n</div>\n<div class=\"col-xs-12 col-sm-6\">\n  <div data-bind=\"compose:'order-contact-data.html'\"></div>\n  <div data-bind=\"compose:'order-buttons.html'\"></div>\n</div>\n```", "```js\n<table class=\"table\">\n  <thead>\n  <tr>\n    ...\n  </tr>\n  </thead>\n  <tbody data-bind=\"foreach:cart\">\n    ...\n  </tbody>\n  <tfoot>\n  <tr>\n    <td colspan=\"3\"></td>\n    <td class=\"text-right\">\n      Total:<span data-bind=\"currency:grandTotal\"></span>\n    </td>\n  </tr>\n  </tfoot>\n</table>\n```", "```js\n<form class=\"form-horizontal\" role=\"form\" data-bind=\"with:customer\">\n  <div class=\"modal-header\">\n    <h3>Customer Information</h3>\n  </div>\n  <div class=\"modal-body\">\n    ...\n  </div>\n</form>\n```", "```js\n<div class=\"col-xs-12\">\n  <button class=\"btn btn-sm btn-primary\" data-bind=\"click:finishOrder, enable:!customer.errors().length\">\n    Buy & finish\n  </button>\n  <span class=\"text-danger\" data-bind=\"visible:customer.errors().length\">\n    Complete your personal data to receive the order.\n  </span>\n</div>\n```", "```js\ndefine([\"knockout\",\"durandal/app\",\"plugins/router\",\"services/log\", \"services/cart\",\"models/customer\",\"services/order\" ], function(ko, app, router, LogService, CartService, Customer, OrderService){\n  var vm = {};\n\n  vm.countries = ko.observableArray(['United States','United Kingdom']);\n  vm.cart = CartService.cart;\n  vm.grandTotal = CartService.grandTotal;\n  vm.customer = new Customer();\n  vm.finishOrder = function () {\n    OrderService.save({\n      customer: vm.customer,\n      order: vm.cart\n    }).then(function(response){\n      app.showMessage(\n        \"Your order id is: <strong>\"+response.data.orderId+\"</strong>\",\n        'Order processed successfully'\n      ).then(function(){\n        LogService.success(\"Order completed\");\n        CartService.cart([]);\n        router.navigate(\"#/catalog\");\n        app.trigger(\"catalog:refresh\");\n      });\n    });\n  }\n\n  vm.canActivate = function () {\n    var result = (vm.cart().length > 0);\n\n    if(!result) {\n      LogService.error(\"Select some products before\",\"Cart is empty\");\n    }\n\n    return {redirect:'#/catalog'};\n  }\n\n  return vm;\n});\n```", "```js\napp.setRoot('shell/shell', 'entrance');\n```", "```js\nrouter.map([\n  { route: ['','/','catalog'], title:'Catalog', moduleId: 'catalog/catalog', nav: true },\n  { route: 'new', title:'New product', moduleId: 'product/new', nav: true },\n  { route: 'edit/:id', title:'Edit product', moduleId: 'product/edit', nav: false },\n  { route: 'cart', title:'Cart', moduleId: 'cart/cart', nav: false },\n  { route: 'order', title:'Order', moduleId: 'order/order', nav: true }\n]).buildNavigationModel();\n```", "```js\n<div data-bind=\"compose:'catalog-details.html'\"/></div>\n```", "```js\n<div data-bind=\"compose:'catalog/catalog-details.html\"/></div>\n```"]