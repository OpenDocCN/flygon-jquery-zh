["```js\n    npm install -g grunt-cli\n\n    ```", "```js\n    npm install markdown\n\n    ```", "```js\n    nw C:\\nodewebkit\\development\\helloWorld.nw\n\n    ```", "```js\nvar gui = require('nw.gui'), win = gui.Window.get();\n```", "```js\n$(document).on('click', '#minimize', function () {\n  win.minimize();\n});\n\n$(document).on('click', '#close', function () {\n  win.close();\n});\n```", "```js\n$(function(){\n  var ul = $('#upload ul');\n\n  $('#drop a').click(function(){\n    // Simulate a click on the file input button\n    // to show the file browser dialog\n    $(this).parent().find('input').click();\n  });\n```", "```js\n  // Initialize the jQuery File Upload plugin\n  $('#upload').fileupload({\n\n    // This element will accept file drag/drop uploading\n    dropZone: $('#drop'),\n```", "```js\n  add: function (e, data) {\n    var tpl = $('<li class=\"working\"><input type=\"text\" value=\"0\" data-width=\"48\" data-height=\"48\"'+ ' data-fgColor=\"#0788a5\" data-readOnly=\"1\" data- bgColor=\"#3e4043\"/><p></p><span></span></li>');\n```", "```js\n    tpl.find('p').text(data.files[0].name).append('<i>' + formatFileSize(data.files[0].size) + '</i>');\n\n    // Add the HTML to the UL element\n    data.context = tpl.appendTo(ul);\n```", "```js\n    // Initialize the knob plugin\n    tpl.find('input').knob();\n```", "```js\n    tpl.find('span').click(function(){\n\n      if(tpl.hasClass('working')){\n        jqXHR.abort();\n      }\n\n      tpl.fadeOut(function(){\n        tpl.remove();\n      });\n    });\n\n    // Automatically upload the file once it is added to the queue\n    var jqXHR = data.submit();\n  },\n```", "```js\n  progress: function(e, data){\n    var progress = parseInt(data.loaded / data.total * 100, 10);\n    data.context.find('input').val(progress).change();\n    if(progress == 100){\n      data.context.removeClass('working');\n    }\n  },\n```", "```js\n  fail:function(e, data){\n    // Something has gone wrong!\n    data.context.addClass('error');\n  }\n});\n```", "```js\n$(document).on('drop dragover', function (e) {\n  e.preventDefault();\n});\n```", "```js\nfunction formatFileSize(bytes) {\n  if (typeof bytes !== 'number') {\n    return '';\n  }\n\n  if (bytes >= 1000000000) {\n    return (bytes / 1000000000).toFixed(2) + ' GB';\n  }\n\n  if (bytes >= 1000000) {\n    return (bytes / 1000000).toFixed(2) + ' MB';\n  }\n\n  return (bytes / 1000).toFixed(2) + ' KB';\n  }\n});\n```", "```js\nnpm install -yeoman\n\n```", "```js\nnpm install â€“g generator-node-webkit\n\n```", "```js\n{\n  \"cmd\": [\"nw.exe\", \"--enable-logging\", \"${project_path:${file_path}}\"],\n  \"working_dir\": \"${project_path:${file_path}}\",\n  \"path\": \"C:/Tools/nwjs/\",\n  \"shell\": true\n}\n```", "```js\n    module.exports = function(grunt) {\n\n      grunt.initConfig({\n        nodewebkit: {\n          options: {\n            platforms: ['win'],\n            buildDir: './builds',\n            winIco: './img/filesize.ico'\n          },\n          src: ['./css/*.css', './img/*.*', './js/*.js', '*.html', '*.php', '*.json', '*.ico']\n        }\n      })\n\n      grunt.loadNpmTasks('grunt-node-webkit-builder');\n      grunt.registerTask('default', ['nodewebkit']);\n    };\n    ```", "```js\n    Npm install grunt-node-webkit-builder --save-dev\n\n    ```", "```js\n      \"icon\": \"img/filesize.png\"\n      },\n     \"devDependencies\": {\n     \"grunt\": \"~0.4.5\",\n     \"grunt-node-webkit-builder\": \"~1.0.2\"\n     }\n    }\n    ```"]