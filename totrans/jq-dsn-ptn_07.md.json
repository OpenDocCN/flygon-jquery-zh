["```js\nvar alertMessage = 'One second passed!'; \nfunction doLater() { \n    alert(alertMessage); \n}\nsetTimeout(doLater, 1000);\n```", "```js\nvar alertMessage = 'One second passed!';\nsetTimeout(function() { \n    alert(alertMessage); \n}, 1000);\n```", "```js\nvar c = new Countdown(); \n\nc.onProgress = function(progressStatus) { /*...*/ };\nc.onDone = function(result) {  /*...*/ };\nc.onError = function(error) {  /*...*/ };\n\nc.start();\n```", "```js\nvar r = new XMLHttpRequest(); \nr.open('GET', 'data.json', true); \nr.onreadystatechange = function() { \n    if (r.readyState != 4 || r.status != 200) { \n        return; \n    } \n    alert(r.responseText); \n};\nr.send();\n```", "```js\n$(document).ready(function() { \n  $('#fetchButton').on('click', function() { \n    $.getJSON('AjaxContent.json', function(json) { \n      console.log('done loading new content'); \n\n      $('#newContent').css({ 'display': 'none' }) \n        .text(json.data) \n        .slideDown(function() { \n          console.log('done displaying new content'); \n        }); \n    }); \n  }); \n}); \n```", "```js\n{ \"data\": \"I'm the text content fetched by an AJAX call!\" }\n```", "```js\nfunction getRandomNumberAsync (max, callbackFn) { \n    var runFor = 1000 + Math.random() * 1000; \n    setTimeout(function() { \n        var result = Math.random() * max; \n        callbackFn(result); \n    }, runFor); \n}\n```", "```js\ngetRandomNumberAsync(10, function(number) { \n    console.log(number); // returns a number between 0 and 10\n});\n```", "```js\nfunction getRandomNumberWS (max, callbackFn, errorFn) { \n  $.ajax({ \n    url: 'https://qrng.anu.edu.au/API/jsonI.php?length=1&type=uint16', \n    dataType: 'json', \n    success: function(json) { \n      var result = json.data[0] / 65535 * max; \n      callbackFn(result); \n    }, \n    error: errorFn \n  });\n}\n```", "```js\nfunction getThreeRandomNumbers(callbackFn, errorFn) {\n    var results = []; \n    getRandomNumberAsync(10, function(number) { \n        results.push(number); \n\n        getRandomNumberAsync(10, function(number) { \n            results.push(number); \n\n            getRandomNumberWS(10, function(number) {\n                results.push(number); \n                callbackFn(results); \n            }, function (error) { \n                errorFn(error); \n            }); \n        }); \n    });\n}\n```", "```js\nfunction getThreeRandomNumbers(callbackFn, errorFn) { \n    var results = []; \n\n    getRandomNumberAsync(10, function(number) { // task 1 \n        results.push(number); \n        task2(); \n    }); \n\n    function task2 () { \n        getRandomNumberAsync(10, function(number) { \n            results.push(number); \n            task3(); \n        }); \n    } \n\n    function task3 () { \n        getRandomNumberWS(10, function(number) { \n            results.push(number); \n            callbackFn(results); \n        }, errorFn); \n    } \n}\n```", "```js\nfunction getRandomNumbersConcurent(callbackFn, errorFn) { \n    var results = []; \n    var resultCount = 0; \n    var n = 3; \n\n    function gatherResult (resultPos) { \n        return function (result) { \n            results[resultPos] = result; \n            resultCount++; \n            if (resultCount === n) { \n                callbackFn(results); \n            } \n        }; \n    } \n\n    getRandomNumberAsync(10, gatherResult(0)); \n    getRandomNumberAsync(10, gatherResult(1)); \n    getRandomNumberWS(10, gatherResult(2), errorFn); \n}\n```", "```js\nfunction getRandomNumberAsync (max) { \n    var d = $.Deferred(); \n    var runFor = 1000 + Math.random() * 1000; \n    setTimeout(function() { \n        var result = Math.random() * max; \n        d.resolve(result); \n    }, runFor); \n    return d.promise(); \n} \n\ngetRandomNumberAsync(10).then(function(number) { \n    console.log(number); // returns a number between 0 and 10 \n});\n```", "```js\nfunction getRandomNumberAsync (max) { \n    return new Promise(function (resolve, reject) { \n        var runFor = 1000 + Math.random() * 1000; \n        setTimeout(function() { \n            var result = Math.random() * max; \n            resolve(result); \n        }, runFor); \n    }); \n} \n\ngetRandomNumberAsync(10).then(function(number) { \n    console.log(number); // returns a number between 0 and 10 \n});\n```", "```js\nvar d = $.Deferred(); \nsetTimeout(function() { \n    d.resolve(7); \n}, 2000); \nvar p = d.promise(); // jQuery Promise\n\nvar p = new Promise(function(resolve, reject) { // Promises/A+\n    setTimeout(function() { \n        resolve(7); \n    }, 2000); \n});\n```", "```js\nvar d = $.Deferred(function (deferred) { \n    setTimeout(function() { \n        deferred.resolve(7); \n    }, 2000); \n}); \nvar p = d.promise(); \n```", "```js\nvar p = $.Deferred(function (deferred) { \n    deferred.reject(new Error('Something happened!')); \n}).promise(); \n\nvar p = new Promise(function(resolve, reject) { \n    reject(new Error('Something happened!')); \n});\n```", "```js\np.then(function(result) { // works the same in jQuery & ES6\n    console.log(result); \n}, function(error) { \n    console.error('An error occurred: ', error); \n});\n```", "```js\np.fail(function(error) { // jQuery\n    console.error(error); \n}); \n\np.catch(function(error) { // ES6\n    console.error(error); \n});\n```", "```js\nvar pResolved = $.Deferred().resolve(7).promise(); // jQuery\nvar pRejected = $.Deferred().reject(new Error('Something happened!')).promise(); \n\nvar pResolved = Promise.resolve(7); // ES6\nvar pRejected = Promise.reject(new Error('Something happened!'));\n```", "```js\nvar p = $.Deferred().resolve(7).promise(); \n//or \nvar p = Promise.resolve(7);\n```", "```js\np.then(function(x) { // works the same in jQuery & ES6\n    console.log(x); // logs 7 \n    return x * 3; \n}).then(function(x) { \n    console.log(x); // logs 21 \n});\n```", "```js\np.then(function(x) { // works the same in jQuery & ES6\n    console.log(x); // logs 7 \n}).then(function(x) { \n    console.log(x); // logs undefined \n});\n```", "```js\np.then(function(x) { // for jQuery Promises\n    console.log(x); // logs 7 \n    var d2 = $.Deferred(); \n    setTimeout(function() { \n        d2.resolve(x*3); \n    }, 2000); \n    return d2.promise(); \n}).then(function(x) { \n    console.log(x); // logs 21 \n}); \n\np.then(function(x) { // for the A+ Promises\n    console.log(x); // logs 7 \n    return new Promise(function(resolve) { \n        setTimeout(function() { \n            resolve(x*3); \n        }, 2000); \n    }); \n}).then(function(x) { \n    console.log(x); // logs 21 \n});\n```", "```js\np.then(null, function (error) { // works the same in jQuery & ES6\n    console.error('An error happened!');// does not run, since the promise is resolved\n}).then(function(x) { \n    console.log(x); // logs 7 \n});\n```", "```js\n$.Deferred().resolve().promise().then(function() { \n    throw new Error('Something happened!'); \n    // the execution stops here\n}).then(null, function(x) { \n    console.log(x); // nothing gets printed\n}); \n\n$.Deferred().resolve().promise().then(function() { \n    try { // this is a workaround \n        throw new Error('Something happened!'); \n    } catch (e) { \n        return $.Deferred().reject(e).promise(); \n    } \n}).then(function(){ \n    console.log('Success'); // not printed \n}).then(null, function(x) { // almost equivalent to .fail()\n    console.log(x); // logs 'Something happened!'' \n}); \n\nPromise.resolve().then(function() { \n    throw new Error('Something happened!'); \n}).then(function(){ \n    console.log('Success'); // not printed \n}).then(null, function(x) { // equivalent to .catch()\n    console.log(x); // logs 'Something happened!''\n});\n```", "```js\n// jQuery\n$.when(p1, p2).then(function(result1, result2) { \n    console.log('p1', result1); // logs 7 \n    console.log('p2', result2); // logs 11 \n    // this can be used to make our code look like A+ \n    var results = arguments;\n}); \n\n// A+ \nPromise.all([p1, p2]).then(function(results) { \n    console.log('p1', results[0]); // logs 7 \n    console.log('p2', results[1]); // logs 11 \n});\n```", "```js\nvar jqueryPromise = $.Deferred().resolve('I will be A+ compliant').promise(); \nvar p = Promise.resolve(jqueryPromise); \np.then(function(result) { \n    console.log(result); \n});\n```", "```js\nvar p = new Promise(function (resolve, reject) { \n    jqueryPromise.then(resolve, reject); \n});\n```", "```js\nvar aPlusAjaxPromise = Promise.resolve($.getJSON('AjaxContent.json')); \naPlusAjaxPromise.then(function(result) { \n    console.log(result); \n}); \n```", "```js\nvar aPromise = Promise.resolve('I will be a jQuery Promise'); \nvar p = $.Deferred(function (deferred) { \n    aPromise.then(function(result) { \n        return deferred.resolve(result); \n    }, function(error) { \n        return deferred.reject(error); \n    }); \n}).promise();\np.then(function(result) { \n    console.log(result); \n});\n```"]