- en: Chapter 2. Image Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In this chapter we''ll be creating a basic image rotator (slider) using jQuery
    animation functions. We''ll also be extending the functionality of our script
    to pause the animation when our users hover over the rotator. Then we''ll be adding
    previous and next links to the script to allow users the ability to scroll through
    our images at their own pace. Lastly, we''ll be adding in a pagination link, so
    that our user can page through the images in our image rotator.*'
  prefs: []
  type: TYPE_NORMAL
- en: Image animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On your journey through the world of jQuery, you'll find that some form of content
    or image rotation is necessary at times. Image rotators are a more visually appealing
    way to display sets of images than having them displayed straight down the page.
    They can also lead to a more compact and efficient design, allow for preloading
    of content or images, and also can give us the ability to control what and when
    the user sees.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Image rotators are often referred to as a **slideshow**, **slider**, **scroller**,
    or **carousel**, based on the varying functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be talking about the following animation methods in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fadeIn()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fadeOut()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fadeToggle()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fadeIn()` and `fadeOut()` methods perform the least complex animations
    available via jQuery. They simply adjust the opacity of selected elements to either
    show or hide the element and can be used with no additional configuration. The
    `fadeToggle()` method is almost as simple, but does provide some basic logic to
    check the selected element's current state.
  prefs: []
  type: TYPE_NORMAL
- en: Elements that are hidden with `display:none` will be set to their correct display
    type (either `display:block` for block-level elements or `display:inline` for
    inline elements) where possible at the start of a `fadeIn()` animation. It is
    important to note this as your CSS styles might impact the appearance of an element
    that you are fading in. An element's natural display type is used wherever possible,
    so hidden `<li>` elements are set to `display:list-item`, and hidden `<td>` elements
    are set to `display:table-cell`.
  prefs: []
  type: TYPE_NORMAL
- en: Elements that are set to `display:block` (or are set to another display type
    but nevertheless visible on the page) will be set to `display:none` at the end
    of a `fadeOut()` animation. Elements will switch between their visible and non-visible
    states when the `fadeToggle()` method is used.
  prefs: []
  type: TYPE_NORMAL
- en: Elements that are to be shown using the `fadeIn()` method must be initially
    hidden with `display:none` while the elements that are hidden with `visibility:hidden`
    for example, will remain hidden at the end of the animation because the fade methods
    specifically alter the `opacity` and `display` property, and not the `visibility`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'In their simplest forms, these methods can be used without any additional configuration.
    We can simply call the methods on any collection of selected elements without
    using any arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(elements).fadeIn();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$(elements).fadeOut();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$(elements).fadeToggle();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When no arguments are provided, the animations will have the default duration
    of 400 milliseconds and the default easing of `swing`. We'll talk about animation
    easing very shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the animations with arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With arguments, the fading methods may take the following form (square brackets
    denote optional arguments):'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(elements).fadeIn([duration] [,easing] [,callback]);
  prefs: []
  type: TYPE_NORMAL
- en: $(elements).fadeOut([duration] [,easing] [,callback]);
  prefs: []
  type: TYPE_NORMAL
- en: $(elements).fadeToggle([duration] [,easing] [,callback]);
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: We can control the duration of the animation using the `duration` argument to
    specify either an integer in milliseconds or strings `"slow"`, and `"fast"`. These
    strings are shortcuts for 600 and 200 milliseconds respectively. The default duration
    given if one isn't specified is 400.
  prefs: []
  type: TYPE_NORMAL
- en: We can also supply `0` as the `duration` argument, which will effectively disable
    the animation. It's unlikely that we'd need to do this as it would be more efficient
    to not use an animation at all, but it is useful to know. I should point out that
    the fade will still occur; it will just happen over a duration of 0 milliseconds.
    Doing this would be the same as using `.hide()`, essentially.
  prefs: []
  type: TYPE_NORMAL
- en: The easing argument can be changed from its default value of `swing` to `linear`,
    which causes the animation to progress at the same speed throughout the animation.
    The default, `swing`, causes the animation to start slowly, speed up slightly,
    and then slow down towards the end of the animation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `duration` argument relates to the length of time the animation takes to
    run and not the speed of the animation. Therefore, a higher value will mean a
    slower, longer animation and not a faster, shorter animation. The number of easing
    types can be greatly increased using plugins. We'll look at the extra easing types
    added by jQuery UI later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: We may supply a **callback** function (either a function reference or an anonymous
    function, with the latter being more commonplace). This callback function will
    be executed after the animation ends for each element in the selection, so it
    may be triggered more than once if more than a single element is being animated.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A callback function is a function that is passed inside another function as
    a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example of callback code triggers an alert once the animation
    is complete (callback in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(".selector").fadeOut("slow", function() { alert("callback triggered!"); });
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll often see the preceding line formatted like the following block of
    code for readability:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $(".selector").fadeOut("slow", function() {
  prefs: []
  type: TYPE_NORMAL
- en: alert("callback triggered!");
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting up the markup and styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin with, we need to create the elements that will be used in the example
    and the styling to set their visual appearance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML document using the template file we created in [Chapter 1](ch01.html
    "Chapter 1. Getting Started"), *Getting Started*, and in between the `<body>`
    tag add the following underlying markup for our image slider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="container">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="slider">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=1">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=2">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=3">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=4">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=5">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=6">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <img src="img/200?image=7">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the page in the `jquery-animation` directory as `image-rotator.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll also need to add in our stylesheet for this example. In the HTML file
    we just created, add `image-rotator` to our placeholder stylesheet link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next we should create the stylesheet we just linked to. In a new file, add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .container {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:relative;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: width:200px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: height:200px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#slider img {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display:none;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: border-radius:3px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save this file as `image-rotator.css` in the `css` folder within our project
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we'll be using seven images in our image rotator. This can
    easily be changed based on our needs by simply adding additional images to `<div
    id="slider">`.
  prefs: []
  type: TYPE_NORMAL
- en: We wrapped our `#slider` element in a `<div>` element with a class of `container`
    so that we can set the dimensions of our image rotator in case all our images
    aren't of the same width and height. Also, we set `position:relative` to the `#slider`
    div so that the rotator images being set to `position:absolute` don't get removed
    from the page flow.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an element is set to `position:absolute`, the element no longer holds open
    the space that it's placed in, which allows other elements behind or in front
    of it, based on the other CSS used on the surrounding elements. This is similar
    to what happens when an element is floated and it's removed from the page flow.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that in some cases if an element (or group of elements)
    are set to `position:absolute` without a parent element being set to `position:relative`,
    the `position:absolute` elements could come out of their parent element, which
    would collapse the parent element.
  prefs: []
  type: TYPE_NORMAL
- en: The images are set to `position:absolute` because they need to stack behind
    each other so that our image rotator element doesn't jump around as the images
    are being faded in and out. This is needed because all of the images will occupy
    the same relative position on the page. However, we only want 1 image to display
    at a time. Using `display:none` will turn off the visibility on all our images.
    This is needed so that we don't have to worry about the **stacking order** of
    our images. We want a good presentation on our images so we added a small `border-radius`
    on the images to soften the corners.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Stack order** refers to the order in which elements are stacked on a page.
    If an element is loaded before another element, it will be before the following
    element. The stack order can be modified in CSS using `z-index`, and by adding
    `position` to an element.'
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – using fadeIn()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which strings can be passed into the `fadeIn()` method as the first argument?
  prefs: []
  type: TYPE_NORMAL
- en: The strings `"short"` or `"long"`, which refer to the duration of the animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The strings `"low"` or `"high"`, which refer to the opacity that the element
    is faded to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The strings `"slow"` or `"fast"`, which refer to the duration of the animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A hexadecimal string specifying `background-color` of the element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What else can be passed into the method?
  prefs: []
  type: TYPE_NORMAL
- en: A string specifying the easing function to use for the animation, and a callback
    function to be executed once the animation ends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An object containing additional configuration options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An array containing additional configuration options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A callback function to be executed at the start of an animation, and a callback
    function to be executed at the end of the animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scripting the image slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we're going to add the finishing touches to our image rotator by adding
    the jQuery code that'll animate our images.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – scripting the image rotator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add the code for the script that will animate our images. Add the
    following code inside the anonymous function below the `<body>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: var image = $("#slider img");
  prefs: []
  type: TYPE_NORMAL
- en: var numSlides = image.length;
  prefs: []
  type: TYPE_NORMAL
- en: var activeSlide = 0;
  prefs: []
  type: TYPE_NORMAL
- en: var speed = 2000;
  prefs: []
  type: TYPE_NORMAL
- en: var fade = 1000;
  prefs: []
  type: TYPE_NORMAL
- en: var timer = setInterval(rotate, speed);
  prefs: []
  type: TYPE_NORMAL
- en: image.eq(activeSlide).show();
  prefs: []
  type: TYPE_NORMAL
- en: function rotate() {
  prefs: []
  type: TYPE_NORMAL
- en: activeSlide++;
  prefs: []
  type: TYPE_NORMAL
- en: if (activeSlide == numSlides) {
  prefs: []
  type: TYPE_NORMAL
- en: activeSlide = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: image.not(activeSlide).fadeOut(fade);
  prefs: []
  type: TYPE_NORMAL
- en: image.eq(activeSlide).fadeIn(fade);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we did was we cached a reference to all the `<img>` elements
    located inside the `#slider` element. We'll be referencing it several times, so
    it is more efficient to only select it from the **Document Object Model** (**DOM**)
    once. For performance reasons, it is generally best to minimize the number of
    DOM operations that are carried out.
  prefs: []
  type: TYPE_NORMAL
- en: For counting the number of images we used `length()`. This counts the number
    of child elements (`<img>`) inside the parent element (`#slider`). For our example,
    we used seven images. Using the `length()` function to count the number of `<img>`
    elements, we can easily add or remove images from the image slider without altering
    the jQuery code.
  prefs: []
  type: TYPE_NORMAL
- en: Our `activeSlide` variable is set to `0` so that we start with the first image
    in our set. This is generally something you won't want to change unless you want
    to start on a specific image. This number can be changed to any number you like,
    as long as we have at least that number of images in our set of images.
  prefs: []
  type: TYPE_NORMAL
- en: The `activeSlide` variable represents the position within the group of elements
    we just selected. The `length()` function returns the number of elements, starting
    from `0`. In our example, `image.length()` will return `6` and therefore `activeSlide`
    can be `0` to `6` since there are seven `<img>` elements. We initialize `activeSlide`
    to `0`, so we start at the first image in the sequence. If we want to start on
    a different image, initialize `activeSlide` to that position within the group
    keeping in mind that the first position is `0` and not `1`.
  prefs: []
  type: TYPE_NORMAL
- en: To set the time between each execution of the `rotate()` function, we set the
    `speed` variable to `2000` milliseconds (2 seconds). 2 seconds is a good speed
    for our example but you'll want to set it to a longer duration depending on the
    images that you're rotating. If you have text on your images that you want your
    users to read, you should set the rotation speed based on how long you think it
    will take your users to comfortably read all the text. If you have images with
    high detail in them, set the speed to something you think is a generous amount
    of time to take in all the detail. In case you have a clickable element that requires
    a "call to action", this time will need to be taken into consideration based on
    how long it takes the user to digest the information and take the action you want
    them to take.
  prefs: []
  type: TYPE_NORMAL
- en: Our `fade` variable is set to `1000` (1 second) as this is a decent speed for
    fading out the images. This can be changed to fit your needs and you'll find that
    there is no standard time for it or the speed. You'll need to tailor these times
    to give your users the best possible experience on your website.
  prefs: []
  type: TYPE_NORMAL
- en: The `setInterval()` (native JavaScript method) function creates a timer within
    the script which executes the function that's called every interval. In our example,
    `setInterval()` will execute the `rotate()` function, but wait to call it again
    until the amount of time specified in the `speed` variable has passed. Since `speed`
    is set to `2000`, the `rotate()` function will be executed every 2 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With arguments, the `setInterval` event may take the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setInterval(function, duration);`'
  prefs: []
  type: TYPE_NORMAL
- en: We then tell the script to display the active image using `show()`. Since we
    set the `activeSlide` variable to `0` initially, the first image in our set will
    be displayed first. This is needed because if you recall, in our CSS we're turning
    off the visibility of all of the images in our rotator using `display:none`. If
    you change the initial value of the `activeSlide` variable, then that image will
    be the first one to be shown when the script starts.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we move on to the meat of our script. For our vegetarian readers, whatever
    protein equivalent you eat in your diet, Soy? Tofu? Anyway, the `rotate()` function
    is where we do most of the heavy lifting in our code. The code above the `rotate()`
    function is mostly the settings for our image rotator to use. Inside our beefy
    `rotate()` function we have a variable (`activeSlide`) that we're incrementing
    by one each time it is called. This is needed to set our active image to the next
    image in our set each time the function loops.
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statement is used to reset the `activeSlide` number back to `0` once
    the script has reached the last `<img>` element in the selected group.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the two most important lines in our code (arguably). We're
    using the `fadeOut()` animation function for all images that is `not()` our active
    image. Then we're using `fadeIn()` for the image that is equal to the `activeSlide`
    image. You'll notice the variable fade inside our `fadeOut()` and `fadeIn()` animations.
    This determines the speed at which the animation is performed. Along with some
    other jQuery animation functions, `"slow"` and `"fast"` can also be used—which
    is 600 and 200 milliseconds respectively.
  prefs: []
  type: TYPE_NORMAL
- en: This is a screenshot of what we just created using the previous code. You'll
    notice how the first image fades out at the same time our next image fades in.
    This effect is called **cross-fading**.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/9642OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pop quiz – length() and milliseconds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What does `length()` refer to?
  prefs: []
  type: TYPE_NORMAL
- en: The character count of a variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The number of elements in the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The width of the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The amount of time an animation should run for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. How many milliseconds are there in 1 second?
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '100'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1000'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '10000'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Time for action – extending the pause-on-hover functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pause-on-hover is necessary when your images have a lot of detail, text that
    your users need to read, or have a specific call to action that you want them
    to make. Even if you don't have need of any of those things, it's still a good
    idea to add this functionality as it allows the user to get a good look at the
    images if they wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates that the image rotation has stopped when
    the user hovered over the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – extending the pause-on-hover functionality](img/9642OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To detect when we hover on and off our image rotator so that we can pause our
    image rotator, we need to add the following code to the line below `image.eq(activeSlide).show();`:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: $("#slider").hover(function() {
  prefs: []
  type: TYPE_NORMAL
- en: clearInterval(timer);
  prefs: []
  type: TYPE_NORMAL
- en: '}, function() {'
  prefs: []
  type: TYPE_NORMAL
- en: timer = setInterval(rotate, speed);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a hover event to gain the ability to tell our script when we're hovering
    over the `#slider` element and when we've moved away from the element. We're using
    `clearInterval()` (native JavaScript method) on the `timer` variable to stop the
    timer on our rotator, effectively pausing the animation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More about the hover event can be found here: [http://api.jquery.com/hover/](http://api.jquery.com/hover/)'
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that `stop()` and `clearQueue()` are other methods to
    stop an animation or function from running. However, in this example, we don't
    want to use them because they stop our animations immediately. That can mean it
    will pause an animation halfway through and will display both (the current active
    and the next active) images partially faded on top of each other. Alternatively,
    we could have left the interval running and used a flag in the `rotate()` function
    to determine whether to perform the `fadeIn()` or `fadeOut()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: The next line tells the script that we are no longer hovering over it and to
    resume animating the images. The timer is then reset back to what we originally
    set it to at the beginning using `setInterval` (native JavaScript method).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – extending the previous and next link features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To give your users more controls over the speed of your rotating images, we''re
    going to add next and previous links as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add the anchor tags that will be used for our previous and next
    links. To do this, add the following code between the last two `</div>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <a id="prev">prev</a>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <a id="next">next</a>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our next and previous links will need some basic styling, so let''s add the
    following lines of CSS to the bottom of our `image-rotator.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#prev, #next {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: position:absolute;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bottom:10px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: padding:5px 10px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: color:#000;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: background:#FFF;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: border-radius:3px;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: text-decoration:none;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: opacity:0.7;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#prev:hover, #next:hover {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: opacity:1;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cursor:pointer;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#prev {left:10px;}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#next {right:10px;}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For handling the click events on the next and previous links, we''ll need to
    add the following code right above the `rotate()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#prev").click(function(event) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: activeSlide--;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: rotate();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#next").click(function(event) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: activeSlide++;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: rotate();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following lines of code above `image.not(activeSlide).fadeOut(fade);`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (activeSlide < 0) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: activeSlide = numSlides - 1;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `rotate()` function by replacing `activeSlide++` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (!pause == true) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: activeSlide++;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the `hover()` function and replace it with the following code (the new
    code is highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$("#slider, #prev, #next").hover(function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: clearInterval(timer);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pause = true;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timer = setInterval(rotate, speed);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pause = false;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows that, after the next link is clicked, our image
    rotator moves to the next image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – extending the previous and next link features](img/9642OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the third step, we're adding in two click functions for the previous and
    next links. We are decrementing the active image number by one on the previous
    function and incrementing by one on the next function. Then we need to call the
    rotate function again so that our old image fades out and our new one fades in.
    We use `preventDefault()` (native JavaScript method) so that the previous and
    next links don't add a hashtag (**#**) to the URL in our address bar. This prevents
    the previous and next links from working like a traditional anchor tag.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth step allows us to move backwards in our image set. This `if` statement
    is similar to the `if` statement we already have in our `rotate()` function used
    to reset the active variable if it's equal to the number of images in our rotator.
  prefs: []
  type: TYPE_NORMAL
- en: We need to change the `rotate()` function so it only increments the `active`
    image variable if our image rotator isn't being hovered over. To do this, we replaced
    the line that increments our `activeSlide` variable with an `if` statement. Using
    this `if` statement we're telling the script to only allow the `activeSlide` variable
    to increment if our user is not hovering over the image rotator.
  prefs: []
  type: TYPE_NORMAL
- en: We'll need to add in our next and previous links to the pause-on-hover function
    so that the image rotation will pause when you hover over those as well. This
    can be achieved by adding a comma after `#slider`, and adding in our `#next` and
    `#previous` ID selectors. We're setting the `pause` variable to a Boolean value
    of `true` or `false` based on whether or not we've triggered the `hover` event.
    This is needed to tell the `rotate` function to only increment the `activeSlide`
    variable if we are not hovering over it. To tell our script we are hovering over
    it, we're setting the variable `pause` to a value of `true`. Then we set it to
    `false` once our cursor leaves the image rotator.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – preventDefault() and setInterval()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What is `preventDefault()` used for?
  prefs: []
  type: TYPE_NORMAL
- en: Preventing the script from defaulting variables in the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preventing the default action on an event it's used on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turning off all JavaScript errors in the function that it's used in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turning off JavaScript errors for variables that return a value of null.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What are the two arguments for the `setInterval()` method that need to
    be used?
  prefs: []
  type: TYPE_NORMAL
- en: '`speed` and `time`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`function` and `duration`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`duration` and `speed`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`speed` and `function`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Time for action – extending the pagination functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To give our users even more control over our image rotator, we''re going to
    add what''s called **pagination**. Pagination allows you to move directly to a
    specific image in our rotator instead of having to click the next and previous
    links until we find the image we''re looking for. This function is very helpful
    if we have a large number of images in our image rotator. To add pagination we
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the following code to `image-rotator.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '```js'
  prefs: []
  type: TYPE_NORMAL
- en: '#pagination {'
  prefs: []
  type: TYPE_NORMAL
- en: position:absolute;
  prefs: []
  type: TYPE_NORMAL
- en: top:10px;
  prefs: []
  type: TYPE_NORMAL
- en: width:100%;
  prefs: []
  type: TYPE_NORMAL
- en: text-align:center;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '#pagination a {'
  prefs: []
  type: TYPE_NORMAL
- en: padding:2px 5px;
  prefs: []
  type: TYPE_NORMAL
- en: color:#000;
  prefs: []
  type: TYPE_NORMAL
- en: background:#FFF;
  prefs: []
  type: TYPE_NORMAL
- en: border-radius:3px;
  prefs: []
  type: TYPE_NORMAL
- en: text-decoration:none;
  prefs: []
  type: TYPE_NORMAL
- en: opacity:0.7;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '#pagination a:hover {'
  prefs: []
  type: TYPE_NORMAL
- en: opacity:1;
  prefs: []
  type: TYPE_NORMAL
- en: cursor:pointer;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `image-rotator.html`, add the following line directly under `var pause;`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var paging = "";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In our HTML, we need to add the following code under `<a id="next" href="#">next</a>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div id="pagination"></div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Place the following code below `image.eq(activeSlide).show();`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for (var page = 0; page < numSlides; page++) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: paging += "<a rel=\"" + (page + 1) + "\">" + (page + 1) + "</a>\n";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#pagination").html(paging);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the `hover` event below and replace it with the following code (new code
    is highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '$("#slider, #prev, #next, #pagination").hover(function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: clearInterval(timer);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pause = true;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, function() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: timer = setInterval(rotate, speed);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pause = false;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code directly above our `rotate()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $("#pagination a").click(function(event) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: event.preventDefault();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: activeSlide = $(this).attr("rel") - 1;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: rotate();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the pagination feature we added, along
    with the fourth image displayed after clicking on the respective link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – extending the pagination functionality](img/9642OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we did was declare and set the new paging variable. Without
    this, we'll get nasty JavaScript errors in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Using a `for` loop, we defined our page variable, telling it to continue looping
    until `page` is less than the number of images in our set and then increment that
    newly defined variable by one using `++`. The next line is the most complicated
    bit of code in our script so far, so stick with me! A variable followed by `+=`
    tells the variable to use what's already stored inside and to continue adding
    on to the end. This method of stringing together values or strings is called **concatenation**.
  prefs: []
  type: TYPE_NORMAL
- en: We then need to build the HTML structure of the pagination links. We're building
    a series of seven `<a>` tags, one for each image in our group. To print the image
    numbers on the links, we'll use `(page + 1)`. We're using `+ 1` because JavaScript
    numbers things on what's called a **zero-index** or **zero-based numbering**,
    which means instead of starting at 1 when numbering a group or list of items,
    it starts with 0\. This hasn't been a problem until now (because we weren't printing
    out the value), but we now need to tell our script to start at 1 so that it displays
    the pagination links properly. The last line of the `for` loop replaces the contents
    of `#pagination` and replaces it with the value stored inside the `paging` variable
    using `html()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `html()` method is used to get or set the HTML contents on the selected
    element(s).
  prefs: []
  type: TYPE_NORMAL
- en: Again, we need to expand our pause-on-hover function to know to pause when we're
    hovering over our new `#pagination` element. If we don't do this, when you hover
    over the `#pagination` div, the images would continue to rotate.
  prefs: []
  type: TYPE_NORMAL
- en: We added another click function (`$("#pagination a").click`) to handle our pagination
    links. You'll notice the same `preventDefault()` we used before so that our links
    don't add the hashtag (#) to our page URL when clicking on the pagination links.
    The next line sets the `activeSlide` variable to the value of `rel` in our pagination
    anchor tag and then subtracts by one. This is done because we set it to increment
    by one to offset the zero-index problem we saw in the third step.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added in the containing `<div>` element that'll hold all of our
    pagination links.
  prefs: []
  type: TYPE_NORMAL
- en: Have a Go Hero – extending the image rotator further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we used `fadeIn()` and `fadeOut()` to rotate our images. Have
    a go at extending the example so that the script can detect the child elements
    that should be animated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other ideas for extending the image rotator:'
  prefs: []
  type: TYPE_NORMAL
- en: Have the script to set the child element dimensions dynamically, allowing the
    script to scale to fit the content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the ability to show more than one element at a time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving the current active link in the pagination bar a different look so that
    our user knows which image the rotator is currently on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding in additional transition effects (for example, slide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop quiz – altering variables and zero index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What does using `++` after a variable do?
  prefs: []
  type: TYPE_NORMAL
- en: Merges the values of two variables together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tells the script to only allow adding to the variable and not subtracting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increments the variable by one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increments the variable by two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What does **zero-index** mean?
  prefs: []
  type: TYPE_NORMAL
- en: That JavaScript counts starting with zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That a variable's default value is zero if not specifically defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A method in which an element's index is set to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A method to set a variable's value to zero after being used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at some of jQuery's most basic animation methods.
    The fade methods are the simplest animation methods found in jQuery, only animating
    the opacity of the selected element(s).
  prefs: []
  type: TYPE_NORMAL
- en: The `show()`, `hide()`, and `toggle()` methods can also be used to perform animations
    but alter the dimensions of the element as well as its opacity. All of these methods
    are simple to use and require little or no additional configuration in order to
    run.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to manipulate the background properties
    on elements to create background animations.
  prefs: []
  type: TYPE_NORMAL
