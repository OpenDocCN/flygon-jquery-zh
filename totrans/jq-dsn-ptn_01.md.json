["```js\n<!DOCTYPE html> \n<html> \n  <head> \n    <title>DOM Manipulations</title> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"dom-manipulations.css\">\n  </head> \n  <body> \n    <h1 id=\"pageHeader\">DOM Manipulations</h1> \n\n    <div class=\"boxContainer\"> \n      <div> \n        <p class=\"box\"> \n          Doing DOM Manipulations is easy with JS! \n        </p> \n      </div> \n      <div> \n        <p class=\"box\"> \n          Doing DOM Manipulations is easy with JS! \n        </p> \n      </div> \n      <div> \n        <p class=\"box\"> \n          Doing DOM Manipulations is easy with JS! \n        </p> \n      </div> \n    </div> \n\n    <p class=\"box\"> \n      Doing DOM Manipulations is easy with JS! \n    </p> \n    <p class=\"box\"> \n      Doing DOM Manipulations is easy with JS! \n    </p>\n\n    <script type=\"text/javascript\" src=\"img/jquery-2.2.0.min.js\"></script>\n    <script type=\"text/javascript\" src=\"img/jquery-dom-manipulations.js\"></script>\n  </body>\n</html>\n```", "```js\n.box {\n    padding: 7px 10px;\n    border: solid 1px #333;\n    margin: 5px 3px;\n    box-shadow: 0 1px 2px #777;\n}\n\n.boxsizer {\n    float: left;\n    width: 33.33%;\n}\n\n.clear { clear: both; }\n```", "```js\nsetTimeout(function() {\n    $('#pageHeader').css('font-size', '3em');\n\n    var $boxes = $('.boxContainer .box');\n    $boxes.append(\n      '<br /><br /><i>In case we need simple things</i>.');\n    $boxes.parent().addClass('boxsizer');\n\n    $('.boxContainer').append('<div class=\"clear\">');\n}, 700);\n```", "```js\n<div class=\"boxContainer\"> \n <div class=\"boxsizer\"> \n    <p class=\"box\"> \n      Doing DOM Manipulations is easy with JS! \n <br><br><i>In case we need simple things</i>. \n    </p> \n  </div> \n <div class=\"boxsizer\"> \n    <p class=\"box\"> \n      Doing DOM Manipulations is easy with JS! \n <br><br><i>In case we need simple things</i>. \n    </p> \n  </div> \n <div class=\"boxsizer\"> \n    <p class=\"box\"> \n      Doing DOM Manipulations is easy with JS! \n <br><br><i>In case we need simple things</i>. \n    </p> \n  </div> \n <div class=\"clear\"></div> \n</div> \n```", "```js\n$('.boxContainer .box') \n  .append('<br /><br /><i>In case we need simple things</i>.') \n  .parent() \n  .addClass('boxsizer');\n```", "```js\nfor (var i = 0; i < obj.length; i++) { \n  console.log(obj[i]); \n}\n```", "```js\nempty: function() { \n  var elem, i = 0; \n\n  for ( ; ( elem = this[ i ] ) != null; i++ ) {\n    if ( elem.nodeType === 1 ) { \n      // Prevent memory leaks \n      jQuery.cleanData( getAll( elem, false ) ); \n\n      // Remove any remaining nodes \n      elem.textContent = \"\"; \n    } \n  } \n\n  return this; \n}\n```", "```js\nsetTimeout(function() { \n  var headerElement = document.getElementById('pageHeader'); \n  if (headerElement) { \n    headerElement.style.fontSize = '3em'; \n  } \n  var boxContainerElement = document.getElementsByClassName('boxContainer')[0]; \n  if (boxContainerElement) { \n    var innerBoxElements = boxContainerElement.getElementsByClassName('box'); \n    for (var i = 0; i < innerBoxElements.length; i++) { \n      var boxElement = innerBoxElements[i]; \n      boxElement.innerHTML +='<br /><br /><i>In case we need simple things</i>.'; \n      boxElement.parentNode.className += ' boxsizer'; \n    } \n    var clearFloatDiv = document.createElement('div'); \n    clearFloatDiv.className = 'clear'; \n    boxContainerElement.appendChild(clearFloatDiv); \n  } \n}, 700);\n```", "```js\nvar numberValues = [2, 5, 8]; \n\nvar objectsWithValues = [ \n    { value: 7 }, \n    { value: 4 }, \n    { value: 6 }, \n    { value: 9 } \n];\n```", "```js\nfunction ValuesComposite() { \n    this.length = 0; \n} \n\nValuesComposite.prototype.append = function(item) { \n    if ((typeof item === 'object' && 'value' in item) || \n        typeof item === 'number') { \n        this[this.length] = item; \n        this.length++; \n    } \n\n    return this; \n}; \n\nValuesComposite.prototype.increment = function(number) { \n    for (var i = 0; i < this.length; i++) { \n        var item = this[i]; \n        if (typeof item === 'object' && 'value' in item) { \n            item.value += number; \n        } else if (typeof item === 'number') { \n            this[i] += number; \n        } \n    } \n\n    return this; \n}; \n\nValuesComposite.prototype.getValues = function() { \n    var result = []; \n    for (var i = 0; i < this.length; i++) { \n        var item = this[i]; \n        if (typeof item === 'object' && 'value' in item) { \n            result.push(item.value); \n        } else if (typeof item === 'number') { \n            result.push(item); \n        } \n    } \n    return result; \n};\n```", "```js\nvar valuesComposition = new ValuesComposite(); \n\nfor (var i = 0; i < numberValues.length; i++) { \n    valuesComposition.append(numberValues[i]); \n} \n\nfor (var i = 0; i < objectsWithValues.length; i++) { \n    valuesComposition.append(objectsWithValues[i]); \n}\n\nvaluesComposition.increment(2) \n    .append(1) \n    .append(2) \n    .append({ value: 3 }); \n\nconsole.log(valuesComposition.getValues()); \n```", "```js\n► Array [ 4, 7, 10, 9, 6, 8, 11, 1, 2, 3 ]\n```", "```js\neach: function( obj, callback ) {\n  var length, i = 0;\n\n  if ( isArrayLike( obj ) ) {\n    length = obj.length;\n    for ( ; i < length; i++ ) {\n      if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n        break;\n      }\n    }\n  } else {\n    for ( i in obj ) {\n      if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n        break;\n      }\n    }\n   }\n\n  return obj;\n}\n```", "```js\neach: function( callback ) {\n  return jQuery.each( this, callback );\n}\n```", "```js\n// using the helper function on an array\n$.each([3, 5, 7], function(index){\n    console.log(this + 1);\n});\n// using the method on a jQuery object\n$('.boxContainer .box').each(function(index) {\n    console.log('I\\'m box #' + (index + 1)); // index is zero-based\n});\n```", "```js\nvar collection = { \n    nodeValue: 7, \n    left: { \n        nodeValue: 4, \n        left: 2, \n        right: { \n            nodeValue: 6, \n            left: 5, \n            right: 9 \n        } \n    }, \n    right: { \n        nodeValue: 9, \n        left: 8 \n    } \n}; \n```", "```js\nfunction iterateTreeValues(node, callback) { \n    if (node === null || node === undefined) { \n        return; \n    } \n\n    if (typeof node === 'object') { \n        if ('left' in node) { \n            iterateTreeValues(node.left, callback); \n        } \n        if ('nodeValue' in node) { \n            callback(node.nodeValue); \n        } \n        if ('right' in node) { \n            iterateTreeValues(node.right, callback); \n        } \n    } else { \n        // its a leaf, so the node is the value \n        callback(node); \n    } \n} \n```", "```js\nvar valuesArray = []; \niterateTreeValues(collection, function(value) { \n    if (value > 4) { \n        valuesArray.push(value); \n    } \n}); \nconsole.log(valuesArray);\n```", "```js\n► Array [ 5, 6, 9, 7, 8, 9 ]\n```"]