["```js\ngf.addTilemap = function(parent, divId, options){\n    var options = $.extend({\n        x: 0,\n        y: 0,\n        tileWidth: 64,\n        tileHeight: 64,\n        width: 0,\n        height: 0,\n        map: [],\n        animations: [],\n        logic: false\n    }, options);\n\n    var tilemap = gf.tilemapFragment.clone().attr(\"id\",divId).data(\"gf\",options);\n\n    if (!options.logic){\n\n       // find the visible part\n       var offset = gf.offset(parent);\n       var visible = gf.tilemapBox(options, {\n          x:      -options.x - offset.x,\n          y:      -options.x - offset.y,\n          width:  gf.baseDiv.width(),\n          height: gf.baseDiv.height()\n       });\n         options.visible = visible;\n\n       //create line and row fragment:\n       for (var i=visible.y1; i < visible.y2; i++){\n           for(var j=visible.x1; j < visible.x2; j++) {\n               var animationIndex = options.map[i][j];\n\n               if(animationIndex > 0){\n                   var tileOptions = {\n                       x: options.x + j*options.tileWidth,\n                       y: options.y + i*options.tileHeight,\n                       width: options.tileWidth,\n                       height: options.tileHeight\n                   }\n                   var tile = gf.spriteFragment.clone().css({\n                       left:   tileOptions.x,\n                       top:    tileOptions.y,\n                       width:  tileOptions.width,\n                       height: tileOptions.height}\n                   ).addClass(\"gf_line_\"+i).addClass(\"gf_column_\"+j).data(\"gf\", tileOptions);\n\n                   gf.setAnimation(tile, options.animations[animationIndex-1]);\n\n                   tilemap.append(tile);\n               }\n           }\n       }\n    }\n    parent.append(tilemap);\n    return tilemap;\n}\n```", "```js\ngf.tilemapCollide = function(tilemap, box){\n    var options = tilemap.data(\"gf\");\n    var collisionBox = gf.tilemapBox(options, box);\n    var divs = []\n\n    for (var i = collisionBox.y1; i < collisionBox.y2; i++){\n        for (var j = collisionBox.x1; j < collisionBox.x2; j++){\n            var index = options.map[i][j];\n            if( index > 0){\n               if(options.logic) {\n divs.push({\n type:   index,\n x:      j*options.tileWidth,\n y:      i*options.tileHeight,\n width:  options.tileWidth,\n height: options.tileHeight\n });\n } else {\n                   divs.push(tilemap.find(\".gf_line_\"+i+\".gf_column_\"+j));\n             }\n            }\n        }\n    }\n    return divs;\n}\n```", "```js\n{\n   \"enemies\" : [\n      {\n         \"name\" : \"Monster1\",\n         \"type\" : \"spider\",\n         \"positionx\" : 213,\n         \"positiony\" : 11,\n         \"pathx\" : [250,300,213],\n         \"pathy\" : [30,11,11]\n      },\n      {\n         \"name\" : \"Monster2\",\n         \"type\" : \"fly\",\n         \"positionx\" : 345,\n         \"positiony\" : 100,\n         \"pathx\" : [12,345],\n         \"pathy\" : [100,100]\n      }   \n   ],\n   \"npcs\" : [\n      {\n         \"name\" : \"Johny\",\n         \"type\" : \"farmer\",\n         \"positionx\" : 202,\n         \"positiony\" : 104,\n         \"dialog\" : [\n            \"Hi, welcome to my home,\",\n            \"Feel free to wander around!\"\n         ]\n      }\n   ]\n}\n```", "```js\n$.ajax({\n  url: url,\n  dataType: 'json',\n  data: data,\n  success: callback\n});\n```", "```js\nvar callback = success(data, textStatus, jqXHR)\n```", "```js\nsuccess: function(json){\n    //...\n\n   var layers = json.layers;\n   var usedTiles = [];\n   var animationCounter = 0;\n   var tilemapArrays = [];\n\n   // Detect which animations we need to generate\n   // and convert the tiles array indexes to the new ones\n   for (var i=0; i < layers.length; i++){\n      if(layers[i].type === \"tilelayer\"){\n         // ...\n         tilemapArrays.push(tilemapArray);\n      }\n   }\n   // adding the tilemaps\n   for (var i=0; i<tilemapArrays.length; i++){\n      tilemaps.push(gf.addTilemap(parent, divIdPrefix+i, {\n         x:          0,\n         y:          0,\n         tileWidth:  tileWidth,\n         tileHeight: tileHeight,\n         width:      width,\n         height:     height,\n         map:        tilemapArrays[i],\n         animations: animations,\n         logic: (layers[i].name === \"logic\")\n         }));\n      }\n   }\n});\n```", "```js\n$.ajax({\n  url: url,\n  dataType: \"script\",\n  success: success\n});\n```", "```js\n$(function() {\n    var someVariable = \"someValue\";\n\n    var someFunction = function(){\n        //do something\n    }\n});\n```", "```js\nvar myVariable = someVariable;\nsomeFunction();\n```", "```js\nvar someVariable = \"someValue\";    \nvar someFunction = function(){\n    //do something\n}\n\n$(function() {\n    // do something else\n});\n```", "```js\n$(function() {\n    var someVariable = \"someValue\";\n\n    var someFunction = function(){\n        //do something\n    }\n});\n```", "```js\nsomeFunction();\n```", "```js\n$.getScript(\"myScript.js\").fail(function(jqxhr, textStatus, exception) {\n    console.log(\"Error: \"+exception);\n});\n```", "```js\nerror: ReferenceError: someFunction is not defined\n```", "```js\nvar levels = [\n        {tiles: \"level1.json\", enemies: \"level1.js\"},\n        {tiles: \"level2.json\", enemies: \"level2.js\"}\n    ];\n\n    var currentLevel = 0;\n\n    var loadNextLevel = function(group){\n        var level = levels[currentLevel++];\n        // clear old level\n        $(\"#level0\").remove();\n        $(\"#level1\").remove();\n        for(var i = 0; i < enemies.length; i++){\n            enemies[i].div.remove();\n        }\n        enemies = [];\n\n        // create the new level\n\n        // first the tiles\n        gf.importTiled(level.tiles, group, \"level\");\n\n        // then the enemies\n        $.getScript(level.enemies);\n\n        // finaly return the div holdoing the tilemap\n        return $(\"#level1\");\n    }\n```", "```js\nvar collisions = gf.tilemapCollide(tilemap, {x: newX, y: newY, width: newW, height: newH});\nvar i = 0;\nwhile (i < collisions.length > 0) {\n    var collision = collisions[i];\n    i++;\n    var collisionBox = {\n        x1: collision.x,\n        y1: collision.y,\n        x2: collision.x + collision.width,\n        y2: collision.y + collision.height\n    };\n\n    // react differently to each kind of tile\n    switch (collision.type) {\n        case 1:\n            // collision tiles\n            var x = gf.intersect(newX, newX + newW, collisionBox.x1,collisionBox.x2);\n            var y = gf.intersect(newY, newY + newH, collisionBox.y1,collisionBox.y2);\n\n            var diffx = (x[0] === newX)? x[0]-x[1] : x[1]-x[0];\n            var diffy = (y[0] === newY)? y[0]-y[1] : y[1]-y[0];\n            if (Math.abs(diffx) > Math.abs(diffy)){\n                // displace along the y axis\n                 newY -= diffy;\n                 speed = 0;\n                 if(status==\"jump\" && diffy > 0){\n                     status=\"stand\";\n                     gf.setAnimation(this.div, playerAnim.stand);\n                 }\n            } else {\n                // displace along the x axis\n                newX -= diffx;\n            }\n            break;\n        case 2:\n            // deadly tiles\n            // collision tiles\n            var y = gf.intersect(newY, newY + newH, collisionBox.y1,collisionBox.y2);\n            var diffy = (y[0] === newY)? y[0]-y[1] : y[1]-y[0];\n            if(diffy > 40){\n                status = \"dead\";\n            }\n            break;\n        case 3: \n // end of level tiles\n status = \"finished\"; \n break;\n    }\n\n}\n```", "```js\nif (status == \"finished\") {\n    tilemap         = loadNextLevel(group);\n    gf.x(this.div, 0);\n    gf.y(this.div, 0);\n    status = \"stand\";\n    gf.setAnimation(this.div, playerAnim.jump);\n}\n```", "```js\nvar group = $(\"#group\");\n\nvar fly1   = new Fly();\nfly1.init(\n    gf.addSprite(group,\"fly1\",{width: 69, height: 31, x: 280, y: 220}),\n    280, 490,\n    flyAnim\n);\nenemies.push(fly1);\n\nvar slime1 = new Slime();\nslime1.init(\n    gf.addSprite(group,\"slime1\",{width: 43, height: 28, x: 980, y: 392}),\n    980, 1140,\n    slimeAnim\n);\nenemies.push(slime1);\n\nvar slime2 = new Slime();\nslime2.init(\n    gf.addSprite(group,\"slime2\",{width: 43, height: 28, x: 2800, y: 392}),\n    2800, 3000,\n    slimeAnim\n);\nenemies.push(slime2);\n```", "```js\nvar enemies = [];\nvar slimeAnim = {\n    stand: new gf.animation({\n        url: \"slime.png\"\n    }),\n    // ...\n\n}\nvar flyAnim = {\n    stand: new gf.animation({\n        url: \"fly.png\"\n    }),\n    // ...}\n\nvar Slime = function() {\n    // ...\n};\nvar Fly = function() {}\nFly.prototype = new Slime();\nFly.prototype.dies = function(){\n    gf.y(this.div, gf.y(this.div) + 5);\n}\n\n$(function() {\n   // here come the rest of the game\n});\n```"]