["```js\n// a sound object\nsound = function(){\n  // Preloads the sound\n  this.preload = function(url){\n    // TODO: implement\n  };\n\n  // Returns true if the sound is preloaded\n  this.isPreloaded = function(){\n    // TODO: implement\n  }\n\n  // Starts to play the sound. If loop is true the\n  // sound will repeat until stopped \n  this.play = function(loop){\n    // TODO: implement\n  };\n\n  // Stops the sound\n  this.stop = function(){\n    // TODO: implement\n  };\n};\n```", "```js\n<script type=\"text/javascript\" src=\"img/sound.js\"></script>\n```", "```js\nvar initialize = function() {\n    // ... \n    backgroundMusic = new sound();\n    backgroundMusic.preload(\"background_music.mp3\");\n    waitForSound();\n}\n\nvar waitForSound = function(){\n  if (backgroundMusic.isPreloaded()){\n    // ...\n    backgroundMusic.play(true);\n  } else {\n    setTimeout(arguments.callee, 100);\n  }\n}\n```", "```js\nvar player = new (function(){\n    // ...\n    this.update = function () {\n        if(status == \"dead\"){\n           // ...\n        } else if (status == \"finished\") {\n          backgroundMusic.stop();\n          // ...\n```", "```js\nvar gameLoop = function() {\n    if(gameState === \"level\"){\n        // ..\n    } else if (gameState === \"menu\") {\n\n      if (gf.keyboard[32]){\n        // ..\n        backgroundMusic.play(true);\n      }\n    }\n};\n```", "```js\n// Preloads the sound\nthis.preload = function(url){\n  // Preloading is not supported in a consistant\n  // way for embeded sounds so we just save the \n  // URL for later use.\n  this.url = url;\n};\n\n// Returns true if the sound is preloaded\nthis.isPreloaded = function(){\n  // Since we use no preloading we always return true\n  return true;\n}\n```", "```js\n// Starts to play the sound. If loop is true the\n// sound will repeat until stopped \nthis.play = function(loop){\n  var embed = \"<embed width='0' height='0' src='\";\n  embed += this.url;\n  embed += \"' loop='\";\n  embed += (loop)? \"true\" : \"false\";\n  embed += \"' autostart='true' />\";\n  this.obj = $(embed);\n  $(\"body\").append(this.obj);\n};\n```", "```js\n// Stops the sound\nthis.stop = function(){\n  this.obj.remove();\n};\n```", "```js\n<audio>\n   <source src=\"img/backgroundMusic.ogg\" type='audio/ogg; codecs=\"vorbis\"'>\n   <source src=\"img/backgroundMusic.mp3\" type='audio/mpeg; codecs=\"mp3\"'>\n</audio>\n```", "```js\nvar audio = new Audio();\n```", "```js\nvar canPlay = audio.canPlayType('audio/ogg; codecs=\"vorbis\"');\n```", "```js\nvar audio = new Audio();\nvar canPlayOggVorbis = audio.canPlayType('audio/ogg; codecs=\"vorbis\"');\nvar canPlayMP3 = audio.canPlayType('audio/mpeg; codecs=\"mp3\"');\nif (canPlayOggVorbis == \"probably\" || (canPlayOggVorbis == \"maybe\" && canPlayMP3 != \"probably\")) {\n  sound.ext = \".ogg\";\n} else {\n  sound.ext = \".mp3\";\n} \n```", "```js\n// a sound object\nsound = function(){\n\n  // Preloads the sound\n  this.preload = function(url){\n    this.audio = new Audio();\n    this.audio.preload = \"auto\";\n    this.audio.src = url + sound.ext;\n    this.audio.load();\n  };\n\n  // Returns true if the sound is preloaded\n  this.isPreloaded = function(){\n    return (this.audio.readyState == 4)\n  }\n\n  // ..\n};\n\n(function(){\n var audio = new Audio();\n var canPlayOggVorbis = audio.canPlayType('audio/ogg; codecs=\"vorbis\"');\n var canPlayMP3 = audio.canPlayType('audio/mpeg; codecs=\"mp3\"');\n if (canPlayOggVorbis == \"probably\" || (canPlayOggVorbis == \"maybe\" && canPlayMP3 != \"probably\")) {\n sound.ext = \".ogg\";\n } else {\n sound.ext = \".mp3\";\n }\n})();\n\n```", "```js\n// Starts to play the sound. If loop is true the\n// sound will repeat until stopped \nthis.play = function(loop){\n  if (this.audio.lopp === undefined){\n    this.audio.addEventListener('ended', function() {\n        this.currentTime = 0;\n        this.play();\n    }, false);\n  } else {\n    this.audio.loop = loop;\n  }\n  this.audio.play();\n};\n\n// Stops the sound\nthis.stop = function(){\n  this.audio.pause();\n this.audio.currentTime = 0;\n};\n```", "```js\n// Pauses the sound\nthis.pause = function(loop){\n  this.audio.pause();\n};\n```", "```js\nvar soundBuffer = null;\nvar context = new webkitAudioContext();\n\nvar request = new XMLHttpRequest();\n\nrequest.open('GET', url, true);\nrequest.responseType = 'arraybuffer';\n\n// Decode asynchronously\nrequest.onload = function() {\n  context.decodeAudioData(request.response, function(buffer) {\n    soundBuffer = buffer;\n  }, onError);\n}\nrequest.send();\n\nvar context = new webkitAudioContext();\n```", "```js\nvar source = context.createBufferSource();\nsource.buffer = buffer;\n```", "```js\nsource.connect(context.destination);\n```", "```js\nsource.start(0);\n```", "```js\nsound = function(){\n  this.preloaded = false;\n\n  // Preloads the sound\n  this.preload = function(url){\n    var request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    // Decode asynchronously\n    var that = this;\n    request.onload = function() {\n      sound.context.decodeAudioData(request.response, function(buffer) {\n        that.soundBuffer = buffer;\n        that.preloaded = true;\n      });\n    }\n    request.send();\n  };\n\n  // Returns true if the sound is preloaded\n  this.isPreloaded = function(){\n    return this.preloaded;\n  }\n\n  // Starts to play the sound. If loop is true the\n  // sound will repeat until stopped \n  this.play = function(loop){\n    this.source = sound.context.createBufferSource();\n this.source.buffer = this.soundBuffer;\n    this.source.connect(sound.context.destination);\n    this.source.loop = true;\n    this.source.start(0);\n  };\n\n  // Stops the sound\n  this.stop = function(){\n    this.source.stop(0);\n  };\n};\n\nsound.context = new webkitAudioContext();\n```", "```js\nvar gainNode = context.createGainNode();\n```", "```js\nsource.connect(gainNode);\ngainNode.connect(context.destination);\n```", "```js\ngainNode.gain.value = 0.8;\n```", "```js\nbufferLoader = new BufferLoader(\n  context,\n  [\n    'sound1.mp3',\n    'sound2.mp3'\n  ],\n  function(bufferList){\n    // bufferList is an array of buffer\n  }\n);\nbufferLoader.load();\n```", "```js\nsound = function(){\n\n  this.preloadStarted = false;\n\n  // Preloads the sound\n  this.preload = function(url){\n    if(sound.ready){\n      this.audio = soundManager.createSound({\n        id: 'sound'+sound.counter++,\n        url: url,\n        autoLoad: true,\n        autoPlay: false,\n        volume: 50\n      });\n      this.preloadStarted = true;\n    } else {\n      this.url = url;\n    }\n  };\n\n  // Returns true if the sound is preloaded\n  this.isPreloaded = function(){\n    if (!this.preloadStarted){\n      this.preload(this.url);\n      return false;\n    } else {\n      return (this.audio.readyState == 3)\n    }\n  }\n  //...\n};\n\nsound.ready = false;\nsound.counter = 0;\n// a sound object\nsoundManager.setup({\n url: 'sm2.swf',\n flashVersion: 8, \n useHTML5Audio: true,\n onready: function() {\n sound.ready = true;\n }\n});\n\n```", "```js\n// Starts to play the sound. If loop is true the\n// sound will repeat until stopped \nthis.play = function(loop){\n  this.audio.loops = loop;\n  this.audio.play();\n};\n\n// Pauses the sound\nthis.pause = function(loop){\n  this.audio.pause();\n};\n\n// Stops the sound\nthis.stop = function(){\n  this.audio.stop();\n};\n```"]