- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today's **World Wide Web** (**WWW**) is a dynamic environment and its users
    set a high bar for both the style and function of sites. To build interesting
    and interactive sites, developers are turning to JavaScript libraries, such as
    jQuery, to automate common tasks and to simplify complicated ones. One reason
    the jQuery library is a popular choice is its ability to assist in a wide range
    of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: It can seem challenging to know where to begin because jQuery performs so many
    different functions. Yet, there is a coherence and symmetry to the design of the
    library; many of its concepts are borrowed from the structure of **HTML** and
    **Cascading Style Sheets** (**CSS**). The library's design lends itself to a quick
    start for designers with little programming experience, since many have more experience
    with these technologies than they do with JavaScript. In fact, in this opening
    chapter, we'll write a functioning jQuery program in just three lines of code.
    On the other hand, experienced programmers will also appreciate this conceptual
    consistency.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The primary features of jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a jQuery code environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple working jQuery script example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reasons to choose jQuery over plain JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common JavaScript development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What jQuery does?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The jQuery library provides a general-purpose abstraction layer for common
    web scripting, and it is therefore useful in almost every scripting situation.
    Its extensible nature means that we could never cover all the possible uses and
    functions in a single book, as plugins are constantly being developed to add new
    abilities. The core features, though, assist us in accomplishing the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access elements in a document**: Without a JavaScript library, web developers
    often need to write many lines of code to traverse the **Document Object Model**
    (**DOM**) tree and locate specific portions of an HTML document''s structure.
    With jQuery, developers have a robust and efficient selector mechanism at their
    disposal, making it easy to retrieve the exact piece of the document that needs
    to be inspected or manipulated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Modify the appearance of a web page**: CSS offers a powerful method of influencing
    the way a document is rendered, but it falls short when not all web browsers support
    the same standards. With jQuery, developers can bridge this gap, relying on the
    same standards support across all browsers. In addition, jQuery can change the
    classes or individual style properties applied to a portion of the document even
    after the page has been rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Alter the content of a document**: Not limited to mere cosmetic changes,
    jQuery can modify the content of a document itself with a few keystrokes. Text
    can be changed, images can be inserted or swapped, lists can be reordered, or
    the entire structure of the HTML can be rewritten and extended--all with a single
    easy-to-use **Application Programming Interface** (**API**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Respond to a user''s interaction**: Even the most elaborate and powerful
    behaviors are not useful if we can''t control when they take place. The jQuery
    library offers an elegant way to intercept a wide variety of events, such as a
    user clicking on a link, without the need to clutter the HTML code itself with
    event handlers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Animate changes being made to a document**: To effectively implement such
    interactive behaviors, a  designer must also provide visual feedback to the user.
    The jQuery library facilitates this by providing an array of effects such as fades
    and wipes, as well as a toolkit for crafting new ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Retrieve information from a server without refreshing a page**: This pattern
    is known as **Ajax**, which originally stood for **Asynchronous JavaScript and
    XML**, but has since come to represent a much greater set of technologies for
    communicating between the client and the server. The jQuery library removes the
    browser-specific complexity from this process, allowing developers to focus on
    the server-side functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Why jQuery works well?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the resurgence of interest in dynamic HTML comes a proliferation of JavaScript
    frameworks. Some are specialized, focusing on just one or two of the tasks previously
    mentioned. Others attempt to catalog every possible behavior and animation and
    serves these up prepackaged. To maintain the wide range of features outlined earlier
    while remaining relatively compact, jQuery employs several strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Leverage knowledge of CSS**: By basing the mechanism for locating page elements
    on CSS selectors, jQuery inherits a terse yet legible way of expressing a document''s
    structure. The jQuery library becomes an entry point for designers who want to
    add behaviors to their pages because a prerequisite for doing professional web
    development is knowledge of CSS syntax.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support extensions**: In order to avoid "feature creep", jQuery relegates
    special-case uses to plugins. The method for creating new plugins is simple and
    well documented, which has spurred the development of a wide variety of inventive
    and useful modules. Even most of the features in the basic jQuery download are
    internally realized through the plugin architecture and can be removed if desired,
    yielding an even smaller library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Abstract away browser quirks**: An unfortunate reality of web development
    is that each browser has its own set of deviations from published standards. A
    significant portion of any web application can be relegated to handling features
    differently on each platform. While the ever-evolving browser landscape makes
    a perfectly browser-neutral codebase impossible for some advanced features, jQuery
    adds an abstraction layer that normalizes the common tasks, reducing the size
    of code while tremendously simplifying it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always work with sets**: When we instruct jQuery to find all elements with
    the class `collapsible` and hide them, there is no need to loop through each returned
    element. Instead, methods such as `.hide()` are designed to automatically work
    on sets of objects instead of individual ones. This technique, called *implicit
    iteration*, means that many looping constructs become unnecessary, shortening
    code considerably.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow multiple actions in one line**: To avoid overuse of temporary variables
    or wasteful repetition, jQuery employs a programming pattern called *chaining*
    for the majority of its methods. This means that the result of most operations
    on an object is the object itself, ready for the next action to be applied to
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These strategies keep the file size of the jQuery package small, while at the
    same time providing techniques for keeping our custom code that uses the library
    compact as well.
  prefs: []
  type: TYPE_NORMAL
- en: The elegance of the library comes about partly by design and partly due to the
    evolutionary process spurred by the vibrant community that has sprung up around
    the project. Users of jQuery gather to discuss not only the development of plugins
    but also enhancements to the core library. The users and developers also assist
    in continually improving the official project documentation, which can be found
    at [http://api.jquery.com](http://api.jquery.com).
  prefs: []
  type: TYPE_NORMAL
- en: Despite all the efforts required to engineer such a flexible and robust system,
    the end product is free for all to use. This open source project is licensed under
    the MIT License to permit free use of jQuery on any site and facilitate its use
    within proprietary software. If a project requires it, developers can relicense
    jQuery under the GNU Public License for inclusion in other GNU-licensed open source
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in jQuery 3?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The changes introduced in jQuery 3 are quite subtle compared to the changes
    introduced in jQuery 2\. Most of what's changed is under the hood. Let's take
    a brief look at some changes and how they're likely to impact an existing jQuery
    project. You can review the fine-grained details ([https://jquery.com/upgrade-guide/3.0](https://jquery.com/upgrade-guide/3.0))
    while reading this book.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The biggest change with browser support in jQuery 3 is Internet Explorer. Having
    to support older versions of this browser is the bane of any web developer's existence.
    jQuery 3 has taken a big step forward by only supporting IE9+. The support policy
    for other browsers is the current version and the previous version.
  prefs: []
  type: TYPE_NORMAL
- en: The days of Internet Explorer are numbered. Microsoft has released the successor
    to IE called Edge. This browser is a completely separate project from IE and isn't
    burdened by the issues that have plagued IE. Additionally, recent versions of
    Microsoft Windows actually push for Edge as the default browser, and updates are
    regular and predictable. Goodbye and good riddance IE.
  prefs: []
  type: TYPE_NORMAL
- en: Deferred objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Deferred` object was introduced in jQuery 1.5 as a means to better manage
    asynchronous behavior. They were kind of like ES2015 promises, but different enough
    that they weren't interchangeable. Now that the ES2015 version of JavaScript is
    commonplace in modern browsers, the `Deferred` object is fully compatible with
    native `Promise` objects. This means that quite a lot has changed with the old
    `Deferred` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous document-ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea that the document-ready callback function is executed asynchronously
    might seem counterintuitive at first. There are a couple of reasons this is the
    case in jQuery 3\. First, the `$(() => {})` expression returns a `Deferred` instance,
    and these now behave like native promises. The second reason is that there's a
    `jQuery.ready` promise that resolves when the document is ready. As you'll see
    later on in this book, you can use this promise alongside other promises to perform
    other asynchronous tasks before the DOM is ready to render.
  prefs: []
  type: TYPE_NORMAL
- en: All the rest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of other breaking changes to the API that were introduced
    in jQuery 3 that we won't dwell on here. The upgrade guide that I mentioned earlier
    goes into detail about each of these changes and how to deal with them. However,
    I'll point out functionality that's new or different in jQuery 3 as we make our
    way through this book.
  prefs: []
  type: TYPE_NORMAL
- en: Making our first jQuery-powered web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have covered the range of features available to us with jQuery,
    we can examine how to put the library into action. To get started, we need to
    download a copy of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No installation is required. To use jQuery, we just need a publicly available
    copy of the file, no matter whether that copy is on an external site or our own.
    Since JavaScript is an interpreted language, there is no compilation or build
    phase to worry about. Whenever we need a page to have jQuery available, we will
    simply refer to the file's location from a `<script>` element in the HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: The official jQuery website ([http://jquery.com/](http://jquery.com/)) always
    has the most up-to-date stable version of the library, which can be downloaded
    right from the home page of the site. Several versions of jQuery may be available
    at any given moment; the most appropriate for us as site developers will be the
    latest uncompressed version of the library. This can be replaced with a compressed
    version in production environments.
  prefs: []
  type: TYPE_NORMAL
- en: As jQuery's popularity has grown, companies have made the file freely available
    through their **Content Delivery** **Networks** (**CDNs**). Most notably, Google
    ([https://developers.google.com/speed/libraries/devguide](https://developers.google.com/speed/libraries/devguide)),
    Microsoft ([http://www.asp.net/ajaxlibrary/cdn.ashx](http://www.asp.net/ajaxlibrary/cdn.ashx)),
    and the jQuery project itself ([http://code.jquery.com](http://code.jquery.com))
    offer the file on powerful, low-latency servers distributed around the world for
    fast download, regardless of the user's location. While a CDN-hosted copy of jQuery
    has speed advantages due to server distribution and caching, using a local copy
    can be convenient during development. Throughout this book, we'll use a copy of
    the file stored on our own system, which will allow us to run our code whether
    we're connected to the Internet or not.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid unexpected bugs, always use a specific version of jQuery. For example,
    3.1.1\. Some CDNs allow you to link to the latest version of the library. Similarly,
    if you're using `npm` to install jQuery, always make sure that your `package.json`
    requires a specific version.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up jQuery in an HTML document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three pieces to most examples of jQuery usage: the HTML document,
    CSS files to style it, and JavaScript files to act on it. For our first example,
    we''ll use a page with a book excerpt that has a number of classes applied to
    portions of it. This page includes a reference to the latest version of the jQuery
    library, which we have downloaded, renamed `jquery.js`, and placed in our local
    project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Immediately following the normal HTML preamble, the stylesheet is loaded. For
    this example, we''ll use a simple one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Getting the example code
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the example code from the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3).'
  prefs: []
  type: TYPE_NORMAL
- en: After the stylesheet is referenced, the JavaScript files are included. It is
    important that the `script` tag for the jQuery library be placed before the tag
    for our custom scripts; otherwise, the jQuery framework will not be available
    when our code attempts to reference it.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the rest of this book, only the relevant portions of HTML and CSS
    files will be printed. The files in their entirety are available from the book's
    companion code examples: [https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have a page that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_01_001-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will use jQuery to apply a new style to the poem text.
  prefs: []
  type: TYPE_NORMAL
- en: This example is to demonstrate a simple use of jQuery. In real-world situations,
    this type of styling could be performed purely with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our jQuery code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our custom code will go in the second, currently empty, JavaScript file, which
    we included from the HTML using `<script src="img/01.js"></script>`. For this
    example, we only need three lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I'll be using newer ES2015 **arrow function** syntax for most callback functions
    throughout the book. The only reason is that it's more concise than having the
    `function` keyword all over the place. However, if you're more comfortable with
    the `function() {}` syntax, by all means, use it.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's step through this script piece by piece to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the poem text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fundamental operation in jQuery is selecting a part of the document. This
    is done with the `$()` function. Typically, it takes a string as a parameter,
    which can contain any CSS selector expression. In this case, we wish to find all
    of the `<div>` elements in the document that have the `poem-stanza` class applied
    to them, so the selector is very simple. However, we will cover much more sophisticated
    options through the course of the book. We will walk through many ways of locating
    parts of a document in [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml),
    *Selecting Elements*.
  prefs: []
  type: TYPE_NORMAL
- en: When called, the `$()` function returns a new jQuery object instance, which
    is the basic building block we will be working with from now on. This object encapsulates
    zero or more DOM elements and allows us to interact with them in many different
    ways. In this case, we wish to modify the appearance of these parts of the page
    and we will accomplish this by changing the classes applied to the poem text.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting the new class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `.addClass()` method, like most jQuery methods, is named self descriptively;
    it applies a CSS class to the part of the page that we have selected. Its only
    parameter is the name of the class to add. This method, and its counterpart, `.removeClass()`,
    will allow us to easily observe jQuery in action as we explore the different selector
    expressions available to us. For now, our example simply adds the `highlight`
    class, which our stylesheet has defined as italicized text with a gray background
    and a border.
  prefs: []
  type: TYPE_NORMAL
- en: Note that no iteration is necessary to add the class to all the poem stanzas.
    As we discussed, jQuery uses implicit iteration within methods such as `.addClass()`,
    so a single function call is all it takes to alter all the selected parts of the
    document.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Taken together, `$()` and `.addClass()` are enough for us to accomplish our
    goal of changing the appearance of the poem text. However, if this line of code
    is inserted alone in the document header, it will have no effect. JavaScript code
    is run as soon as it is encountered in the browser, and at the time the header
    is being processed, no HTML is yet present to style. We need to delay the execution
    of the code until after the DOM is available for our use.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `$(() => {})` construct (passing a function instead of a selector
    expression), jQuery allows us to schedule function calls for firing once the DOM
    is loaded, without necessarily waiting for images to fully render. While this
    event scheduling is possible without the aid of jQuery, `$(() => {})` provides
    an especially elegant cross-browser solution that includes the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses the browser's native DOM-ready implementations when available and adds
    a `window.onload` event handler as a safety net
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It executes functions passed to `$()` even if it is called after the browser
    event has already occurred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It handles the event scheduling asynchronously to allow scripts to delay if
    necessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `$()` function''s parameter can accept a reference to an already defined
    function, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Listing 1.1
  prefs: []
  type: TYPE_NORMAL
- en: 'However, as demonstrated in the original version of the script and repeated
    in *Listing 1.2*, the method can also accept an anonymous function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Listing 1.2
  prefs: []
  type: TYPE_NORMAL
- en: This anonymous function idiom is convenient in jQuery code for methods that
    take a function as an argument when that function isn't reusable. Moreover, the
    closure it creates can be an advanced and powerful tool. If you're using arrow
    functions, you also get lexically bound `this` as a context, which avoids having
    to bind functions. It may also have unintended consequences and ramifications
    of memory use, however, if not dealt with carefully.
  prefs: []
  type: TYPE_NORMAL
- en: The finished product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that our JavaScript is in place, the page looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_01_002-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The poem stanzas are now italicized and enclosed in boxes, as specified by the
    `01.css` stylesheet, due to the insertion of the `highlight` class by the JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Plain JavaScript versus jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even a task as simple as this can be complicated without jQuery at our disposal.
    In plain JavaScript, we could add the `highlight` class this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Listing 1.3
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite its length, this solution does not handle many of the situations that
    jQuery takes care of for us in *Listing 1.2*, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Properly respecting other `window.onload` event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acting as soon as the DOM is ready
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing element retrieval and other tasks with modern DOM methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can see that our jQuery-driven code is easier to write, simpler to read,
    and faster to execute than its plain JavaScript equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Using development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this code comparison has shown, jQuery code is typically shorter and clearer
    than its basic JavaScript equivalent. However, this doesn't mean we will always
    write code that is free from bugs or that we will intuitively understand what
    is happening on our pages at all times. Our jQuery coding experience will be much
    smoother with the assistance of standard development tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'High-quality development tools are available in all modern browsers. We can
    feel free to use the environment that is most comfortable to us. Options include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Edge ([https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/](https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer Developer Tools ([http://msdn.microsoft.com/en-us/library/dd565628.aspx](http://msdn.microsoft.com/%20en-us/library/dd565628.aspx))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari Web Development Tools ([https://developer.apple.com/safari/tools/](https://developer.apple.com/safari/tools/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome Developer Tools ([https://developer.chrome.com/devtools](https://developer.chrome.com/devtools))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox Developer Tools ([https://developer.mozilla.org/en-US/docs/Tools](https://developer.mozilla.org/en-US/docs/Tools))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of these toolkits offers similar development features, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and modifying aspects of the DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigating the relationship between CSS and its effect on page presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convenient tracing of script execution through special methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pausing execution of running scripts and inspecting variable values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the details of these features vary from one tool to the next, the general
    concepts remain the same. In this book, some examples will require the use of
    one of these toolkits; we will use Chrome Developer Tools for these demonstrations,
    but development tools for other browsers are fine alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up-to-date instructions for accessing and using Chrome Developer Tools can be
    found on the project's documentation pages at [https://developer.chrome.com/devtools](https://developer.chrome.com/devtools).
    The tools are too involved to explore in great detail here, but a survey of some
    of the most relevant features will be useful to us.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding these screenshots
  prefs: []
  type: TYPE_NORMAL
- en: Chrome Developer Tools is a quickly evolving project, so the following screenshots
    may not exactly match your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Chrome Developer Tools is activated, a new panel appears offering information
    about the current page. In the default Elements tab of this panel, we can see
    a representation of the page structure on the left-hand side and details of the
    selected element (such as the CSS rules that apply to it) on the right-hand side.
    This tab is especially useful for investigating the structure of the page and
    debugging CSS issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_01_01-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Sources tab allows us to view the contents of all loaded scripts on the
    page. By right-clicking on a line number, we can set a breakpoint, set a conditional
    breakpoint, or have the script continue to that line after another breakpoint
    is reached. Breakpoints are effective ways to pause the execution of a script
    and examine what occurs in a step-by-step fashion. On the right-hand side of the
    page, we can enter a list of variables and expressions we wish to know the value
    of at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: The Console tab will be of most frequent use to us while learning jQuery. A
    field at the bottom of the panel allows us to enter any JavaScript statement,
    and the result of the statement is then presented in the panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we perform the same jQuery selector as in *Listing 1.2*, but
    we are not performing any action on the selected elements. Even so, the statement
    gives us interesting information: we see that the result of the selector is a
    jQuery object pointing to the two `.poem-stanza` elements on the page. We can
    use this console feature to quickly try out jQuery code at any time, right from
    within the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition, we can interact with this console directly from our code using
    the `console.log()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Listing 1.4
  prefs: []
  type: TYPE_NORMAL
- en: 'This code illustrates that we can pass any kind of expression into the `console.log()`
    method. Simple values such as strings and numbers are printed directly, and more
    complicated values such as jQuery objects are nicely formatted for our inspection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_01_04.png)'
  prefs: []
  type: TYPE_IMG
- en: This `console.log()` function (which works in each of the browser developer
    tools we mentioned earlier) is a convenient alternative to the JavaScript `alert()`
    function, and will be very useful as we test our jQuery code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to make jQuery available to JavaScript code
    on our web page, use the `$()` function to locate a part of the page that has
    a given class, call `.addClass()` to apply additional styling to this part of
    the page, and invoke `$(() => {})` to cause this function to execute upon loading
    the page. We have also explored the development tools we will be relying on when
    writing, testing, and debugging our jQuery code.
  prefs: []
  type: TYPE_NORMAL
- en: We now have an idea of why a developer would choose to use a JavaScript framework
    rather than writing all code from scratch, even for the most basic tasks. We have
    also seen some of the ways in which jQuery excels as a framework, why we might
    choose it over other options, and in general, which tasks jQuery makes easier.
  prefs: []
  type: TYPE_NORMAL
- en: The simple example we have been using demonstrates how jQuery works, but is
    not very useful in real-world situations. In the next chapter, we will expand
    on this code by exploring jQuery's sophisticated selector language, finding practical
    uses for this technique.
  prefs: []
  type: TYPE_NORMAL
